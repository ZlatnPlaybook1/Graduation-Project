
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Image
 * 
 */
export type Image = $Result.DefaultSelection<Prisma.$ImagePayload>
/**
 * Model ValidationNumber
 * 
 */
export type ValidationNumber = $Result.DefaultSelection<Prisma.$ValidationNumberPayload>
/**
 * Model userForsqlInjection
 * 
 */
export type userForsqlInjection = $Result.DefaultSelection<Prisma.$userForsqlInjectionPayload>
/**
 * Model userForXSS
 * 
 */
export type userForXSS = $Result.DefaultSelection<Prisma.$userForXSSPayload>
/**
 * Model File
 * 
 */
export type File = $Result.DefaultSelection<Prisma.$FilePayload>
/**
 * Model Lab1IDORS
 * 
 */
export type Lab1IDORS = $Result.DefaultSelection<Prisma.$Lab1IDORSPayload>
/**
 * Model Lab2IDORS
 * 
 */
export type Lab2IDORS = $Result.DefaultSelection<Prisma.$Lab2IDORSPayload>
/**
 * Model Lab3IDORS
 * 
 */
export type Lab3IDORS = $Result.DefaultSelection<Prisma.$Lab3IDORSPayload>
/**
 * Model Post
 * 
 */
export type Post = $Result.DefaultSelection<Prisma.$PostPayload>
/**
 * Model lab2sql
 * 
 */
export type lab2sql = $Result.DefaultSelection<Prisma.$lab2sqlPayload>
/**
 * Model lab3sql
 * 
 */
export type lab3sql = $Result.DefaultSelection<Prisma.$lab3sqlPayload>
/**
 * Model ACUser
 * 
 */
export type ACUser = $Result.DefaultSelection<Prisma.$ACUserPayload>
/**
 * Model apiHackingLab
 * 
 */
export type apiHackingLab = $Result.DefaultSelection<Prisma.$apiHackingLabPayload>
/**
 * Model imageForApiHacking
 * 
 */
export type imageForApiHacking = $Result.DefaultSelection<Prisma.$imageForApiHackingPayload>
/**
 * Model ProductToPathTraversalLab1
 * 
 */
export type ProductToPathTraversalLab1 = $Result.DefaultSelection<Prisma.$ProductToPathTraversalLab1Payload>
/**
 * Model BankAccount
 * 
 */
export type BankAccount = $Result.DefaultSelection<Prisma.$BankAccountPayload>
/**
 * Model CSRFLab2
 * 
 */
export type CSRFLab2 = $Result.DefaultSelection<Prisma.$CSRFLab2Payload>
/**
 * Model CSRFLab3
 * 
 */
export type CSRFLab3 = $Result.DefaultSelection<Prisma.$CSRFLab3Payload>
/**
 * Model FileInclusionLab1
 * 
 */
export type FileInclusionLab1 = $Result.DefaultSelection<Prisma.$FileInclusionLab1Payload>
/**
 * Model CartItem
 * 
 */
export type CartItem = $Result.DefaultSelection<Prisma.$CartItemPayload>
/**
 * Model BurPSuiteLab3
 * 
 */
export type BurPSuiteLab3 = $Result.DefaultSelection<Prisma.$BurPSuiteLab3Payload>
/**
 * Model Course
 * 
 */
export type Course = $Result.DefaultSelection<Prisma.$CoursePayload>
/**
 * Model CourseRegistration
 * 
 */
export type CourseRegistration = $Result.DefaultSelection<Prisma.$CourseRegistrationPayload>
/**
 * Model ClickJackLab1
 * 
 */
export type ClickJackLab1 = $Result.DefaultSelection<Prisma.$ClickJackLab1Payload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  admin: 'admin',
  writer: 'writer'
};

export type Role = (typeof Role)[keyof typeof Role]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs, $Utils.Call<Prisma.TypeMapCb, {
    extArgs: ExtArgs
  }>, ClientOptions>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.image`: Exposes CRUD operations for the **Image** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Images
    * const images = await prisma.image.findMany()
    * ```
    */
  get image(): Prisma.ImageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.validationNumber`: Exposes CRUD operations for the **ValidationNumber** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ValidationNumbers
    * const validationNumbers = await prisma.validationNumber.findMany()
    * ```
    */
  get validationNumber(): Prisma.ValidationNumberDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userForsqlInjection`: Exposes CRUD operations for the **userForsqlInjection** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserForsqlInjections
    * const userForsqlInjections = await prisma.userForsqlInjection.findMany()
    * ```
    */
  get userForsqlInjection(): Prisma.userForsqlInjectionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userForXSS`: Exposes CRUD operations for the **userForXSS** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserForXSSES
    * const userForXSSES = await prisma.userForXSS.findMany()
    * ```
    */
  get userForXSS(): Prisma.userForXSSDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.file`: Exposes CRUD operations for the **File** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Files
    * const files = await prisma.file.findMany()
    * ```
    */
  get file(): Prisma.FileDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.lab1IDORS`: Exposes CRUD operations for the **Lab1IDORS** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Lab1IDORS
    * const lab1IDORS = await prisma.lab1IDORS.findMany()
    * ```
    */
  get lab1IDORS(): Prisma.Lab1IDORSDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.lab2IDORS`: Exposes CRUD operations for the **Lab2IDORS** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Lab2IDORS
    * const lab2IDORS = await prisma.lab2IDORS.findMany()
    * ```
    */
  get lab2IDORS(): Prisma.Lab2IDORSDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.lab3IDORS`: Exposes CRUD operations for the **Lab3IDORS** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Lab3IDORS
    * const lab3IDORS = await prisma.lab3IDORS.findMany()
    * ```
    */
  get lab3IDORS(): Prisma.Lab3IDORSDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.post`: Exposes CRUD operations for the **Post** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Posts
    * const posts = await prisma.post.findMany()
    * ```
    */
  get post(): Prisma.PostDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.lab2sql`: Exposes CRUD operations for the **lab2sql** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Lab2sqls
    * const lab2sqls = await prisma.lab2sql.findMany()
    * ```
    */
  get lab2sql(): Prisma.lab2sqlDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.lab3sql`: Exposes CRUD operations for the **lab3sql** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Lab3sqls
    * const lab3sqls = await prisma.lab3sql.findMany()
    * ```
    */
  get lab3sql(): Prisma.lab3sqlDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.aCUser`: Exposes CRUD operations for the **ACUser** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ACUsers
    * const aCUsers = await prisma.aCUser.findMany()
    * ```
    */
  get aCUser(): Prisma.ACUserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.apiHackingLab`: Exposes CRUD operations for the **apiHackingLab** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ApiHackingLabs
    * const apiHackingLabs = await prisma.apiHackingLab.findMany()
    * ```
    */
  get apiHackingLab(): Prisma.apiHackingLabDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.imageForApiHacking`: Exposes CRUD operations for the **imageForApiHacking** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ImageForApiHackings
    * const imageForApiHackings = await prisma.imageForApiHacking.findMany()
    * ```
    */
  get imageForApiHacking(): Prisma.imageForApiHackingDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.productToPathTraversalLab1`: Exposes CRUD operations for the **ProductToPathTraversalLab1** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProductToPathTraversalLab1s
    * const productToPathTraversalLab1s = await prisma.productToPathTraversalLab1.findMany()
    * ```
    */
  get productToPathTraversalLab1(): Prisma.ProductToPathTraversalLab1Delegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.bankAccount`: Exposes CRUD operations for the **BankAccount** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BankAccounts
    * const bankAccounts = await prisma.bankAccount.findMany()
    * ```
    */
  get bankAccount(): Prisma.BankAccountDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.cSRFLab2`: Exposes CRUD operations for the **CSRFLab2** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CSRFLab2s
    * const cSRFLab2s = await prisma.cSRFLab2.findMany()
    * ```
    */
  get cSRFLab2(): Prisma.CSRFLab2Delegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.cSRFLab3`: Exposes CRUD operations for the **CSRFLab3** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CSRFLab3s
    * const cSRFLab3s = await prisma.cSRFLab3.findMany()
    * ```
    */
  get cSRFLab3(): Prisma.CSRFLab3Delegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.fileInclusionLab1`: Exposes CRUD operations for the **FileInclusionLab1** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FileInclusionLab1s
    * const fileInclusionLab1s = await prisma.fileInclusionLab1.findMany()
    * ```
    */
  get fileInclusionLab1(): Prisma.FileInclusionLab1Delegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.cartItem`: Exposes CRUD operations for the **CartItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CartItems
    * const cartItems = await prisma.cartItem.findMany()
    * ```
    */
  get cartItem(): Prisma.CartItemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.burPSuiteLab3`: Exposes CRUD operations for the **BurPSuiteLab3** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BurPSuiteLab3s
    * const burPSuiteLab3s = await prisma.burPSuiteLab3.findMany()
    * ```
    */
  get burPSuiteLab3(): Prisma.BurPSuiteLab3Delegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.course`: Exposes CRUD operations for the **Course** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Courses
    * const courses = await prisma.course.findMany()
    * ```
    */
  get course(): Prisma.CourseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.courseRegistration`: Exposes CRUD operations for the **CourseRegistration** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CourseRegistrations
    * const courseRegistrations = await prisma.courseRegistration.findMany()
    * ```
    */
  get courseRegistration(): Prisma.CourseRegistrationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.clickJackLab1`: Exposes CRUD operations for the **ClickJackLab1** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ClickJackLab1s
    * const clickJackLab1s = await prisma.clickJackLab1.findMany()
    * ```
    */
  get clickJackLab1(): Prisma.ClickJackLab1Delegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.3.1
   * Query Engine version: acc0b9dd43eb689cbd20c9470515d719db10d0b0
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Image: 'Image',
    ValidationNumber: 'ValidationNumber',
    userForsqlInjection: 'userForsqlInjection',
    userForXSS: 'userForXSS',
    File: 'File',
    Lab1IDORS: 'Lab1IDORS',
    Lab2IDORS: 'Lab2IDORS',
    Lab3IDORS: 'Lab3IDORS',
    Post: 'Post',
    lab2sql: 'lab2sql',
    lab3sql: 'lab3sql',
    ACUser: 'ACUser',
    apiHackingLab: 'apiHackingLab',
    imageForApiHacking: 'imageForApiHacking',
    ProductToPathTraversalLab1: 'ProductToPathTraversalLab1',
    BankAccount: 'BankAccount',
    CSRFLab2: 'CSRFLab2',
    CSRFLab3: 'CSRFLab3',
    FileInclusionLab1: 'FileInclusionLab1',
    CartItem: 'CartItem',
    BurPSuiteLab3: 'BurPSuiteLab3',
    Course: 'Course',
    CourseRegistration: 'CourseRegistration',
    ClickJackLab1: 'ClickJackLab1'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "image" | "validationNumber" | "userForsqlInjection" | "userForXSS" | "file" | "lab1IDORS" | "lab2IDORS" | "lab3IDORS" | "post" | "lab2sql" | "lab3sql" | "aCUser" | "apiHackingLab" | "imageForApiHacking" | "productToPathTraversalLab1" | "bankAccount" | "cSRFLab2" | "cSRFLab3" | "fileInclusionLab1" | "cartItem" | "burPSuiteLab3" | "course" | "courseRegistration" | "clickJackLab1"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Image: {
        payload: Prisma.$ImagePayload<ExtArgs>
        fields: Prisma.ImageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ImageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ImageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          findFirst: {
            args: Prisma.ImageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ImageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          findMany: {
            args: Prisma.ImageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>[]
          }
          create: {
            args: Prisma.ImageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          createMany: {
            args: Prisma.ImageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ImageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>[]
          }
          delete: {
            args: Prisma.ImageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          update: {
            args: Prisma.ImageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          deleteMany: {
            args: Prisma.ImageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ImageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ImageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>[]
          }
          upsert: {
            args: Prisma.ImageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          aggregate: {
            args: Prisma.ImageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateImage>
          }
          groupBy: {
            args: Prisma.ImageGroupByArgs<ExtArgs>
            result: $Utils.Optional<ImageGroupByOutputType>[]
          }
          count: {
            args: Prisma.ImageCountArgs<ExtArgs>
            result: $Utils.Optional<ImageCountAggregateOutputType> | number
          }
        }
      }
      ValidationNumber: {
        payload: Prisma.$ValidationNumberPayload<ExtArgs>
        fields: Prisma.ValidationNumberFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ValidationNumberFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValidationNumberPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ValidationNumberFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValidationNumberPayload>
          }
          findFirst: {
            args: Prisma.ValidationNumberFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValidationNumberPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ValidationNumberFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValidationNumberPayload>
          }
          findMany: {
            args: Prisma.ValidationNumberFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValidationNumberPayload>[]
          }
          create: {
            args: Prisma.ValidationNumberCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValidationNumberPayload>
          }
          createMany: {
            args: Prisma.ValidationNumberCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ValidationNumberCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValidationNumberPayload>[]
          }
          delete: {
            args: Prisma.ValidationNumberDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValidationNumberPayload>
          }
          update: {
            args: Prisma.ValidationNumberUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValidationNumberPayload>
          }
          deleteMany: {
            args: Prisma.ValidationNumberDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ValidationNumberUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ValidationNumberUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValidationNumberPayload>[]
          }
          upsert: {
            args: Prisma.ValidationNumberUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValidationNumberPayload>
          }
          aggregate: {
            args: Prisma.ValidationNumberAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateValidationNumber>
          }
          groupBy: {
            args: Prisma.ValidationNumberGroupByArgs<ExtArgs>
            result: $Utils.Optional<ValidationNumberGroupByOutputType>[]
          }
          count: {
            args: Prisma.ValidationNumberCountArgs<ExtArgs>
            result: $Utils.Optional<ValidationNumberCountAggregateOutputType> | number
          }
        }
      }
      userForsqlInjection: {
        payload: Prisma.$userForsqlInjectionPayload<ExtArgs>
        fields: Prisma.userForsqlInjectionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.userForsqlInjectionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userForsqlInjectionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.userForsqlInjectionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userForsqlInjectionPayload>
          }
          findFirst: {
            args: Prisma.userForsqlInjectionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userForsqlInjectionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.userForsqlInjectionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userForsqlInjectionPayload>
          }
          findMany: {
            args: Prisma.userForsqlInjectionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userForsqlInjectionPayload>[]
          }
          create: {
            args: Prisma.userForsqlInjectionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userForsqlInjectionPayload>
          }
          createMany: {
            args: Prisma.userForsqlInjectionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.userForsqlInjectionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userForsqlInjectionPayload>[]
          }
          delete: {
            args: Prisma.userForsqlInjectionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userForsqlInjectionPayload>
          }
          update: {
            args: Prisma.userForsqlInjectionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userForsqlInjectionPayload>
          }
          deleteMany: {
            args: Prisma.userForsqlInjectionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.userForsqlInjectionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.userForsqlInjectionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userForsqlInjectionPayload>[]
          }
          upsert: {
            args: Prisma.userForsqlInjectionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userForsqlInjectionPayload>
          }
          aggregate: {
            args: Prisma.UserForsqlInjectionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserForsqlInjection>
          }
          groupBy: {
            args: Prisma.userForsqlInjectionGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserForsqlInjectionGroupByOutputType>[]
          }
          count: {
            args: Prisma.userForsqlInjectionCountArgs<ExtArgs>
            result: $Utils.Optional<UserForsqlInjectionCountAggregateOutputType> | number
          }
        }
      }
      userForXSS: {
        payload: Prisma.$userForXSSPayload<ExtArgs>
        fields: Prisma.userForXSSFieldRefs
        operations: {
          findUnique: {
            args: Prisma.userForXSSFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userForXSSPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.userForXSSFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userForXSSPayload>
          }
          findFirst: {
            args: Prisma.userForXSSFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userForXSSPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.userForXSSFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userForXSSPayload>
          }
          findMany: {
            args: Prisma.userForXSSFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userForXSSPayload>[]
          }
          create: {
            args: Prisma.userForXSSCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userForXSSPayload>
          }
          createMany: {
            args: Prisma.userForXSSCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.userForXSSCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userForXSSPayload>[]
          }
          delete: {
            args: Prisma.userForXSSDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userForXSSPayload>
          }
          update: {
            args: Prisma.userForXSSUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userForXSSPayload>
          }
          deleteMany: {
            args: Prisma.userForXSSDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.userForXSSUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.userForXSSUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userForXSSPayload>[]
          }
          upsert: {
            args: Prisma.userForXSSUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userForXSSPayload>
          }
          aggregate: {
            args: Prisma.UserForXSSAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserForXSS>
          }
          groupBy: {
            args: Prisma.userForXSSGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserForXSSGroupByOutputType>[]
          }
          count: {
            args: Prisma.userForXSSCountArgs<ExtArgs>
            result: $Utils.Optional<UserForXSSCountAggregateOutputType> | number
          }
        }
      }
      File: {
        payload: Prisma.$FilePayload<ExtArgs>
        fields: Prisma.FileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          findFirst: {
            args: Prisma.FileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          findMany: {
            args: Prisma.FileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>[]
          }
          create: {
            args: Prisma.FileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          createMany: {
            args: Prisma.FileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>[]
          }
          delete: {
            args: Prisma.FileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          update: {
            args: Prisma.FileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          deleteMany: {
            args: Prisma.FileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FileUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>[]
          }
          upsert: {
            args: Prisma.FileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          aggregate: {
            args: Prisma.FileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFile>
          }
          groupBy: {
            args: Prisma.FileGroupByArgs<ExtArgs>
            result: $Utils.Optional<FileGroupByOutputType>[]
          }
          count: {
            args: Prisma.FileCountArgs<ExtArgs>
            result: $Utils.Optional<FileCountAggregateOutputType> | number
          }
        }
      }
      Lab1IDORS: {
        payload: Prisma.$Lab1IDORSPayload<ExtArgs>
        fields: Prisma.Lab1IDORSFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Lab1IDORSFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Lab1IDORSPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Lab1IDORSFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Lab1IDORSPayload>
          }
          findFirst: {
            args: Prisma.Lab1IDORSFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Lab1IDORSPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Lab1IDORSFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Lab1IDORSPayload>
          }
          findMany: {
            args: Prisma.Lab1IDORSFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Lab1IDORSPayload>[]
          }
          create: {
            args: Prisma.Lab1IDORSCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Lab1IDORSPayload>
          }
          createMany: {
            args: Prisma.Lab1IDORSCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.Lab1IDORSCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Lab1IDORSPayload>[]
          }
          delete: {
            args: Prisma.Lab1IDORSDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Lab1IDORSPayload>
          }
          update: {
            args: Prisma.Lab1IDORSUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Lab1IDORSPayload>
          }
          deleteMany: {
            args: Prisma.Lab1IDORSDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.Lab1IDORSUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.Lab1IDORSUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Lab1IDORSPayload>[]
          }
          upsert: {
            args: Prisma.Lab1IDORSUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Lab1IDORSPayload>
          }
          aggregate: {
            args: Prisma.Lab1IDORSAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLab1IDORS>
          }
          groupBy: {
            args: Prisma.Lab1IDORSGroupByArgs<ExtArgs>
            result: $Utils.Optional<Lab1IDORSGroupByOutputType>[]
          }
          count: {
            args: Prisma.Lab1IDORSCountArgs<ExtArgs>
            result: $Utils.Optional<Lab1IDORSCountAggregateOutputType> | number
          }
        }
      }
      Lab2IDORS: {
        payload: Prisma.$Lab2IDORSPayload<ExtArgs>
        fields: Prisma.Lab2IDORSFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Lab2IDORSFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Lab2IDORSPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Lab2IDORSFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Lab2IDORSPayload>
          }
          findFirst: {
            args: Prisma.Lab2IDORSFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Lab2IDORSPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Lab2IDORSFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Lab2IDORSPayload>
          }
          findMany: {
            args: Prisma.Lab2IDORSFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Lab2IDORSPayload>[]
          }
          create: {
            args: Prisma.Lab2IDORSCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Lab2IDORSPayload>
          }
          createMany: {
            args: Prisma.Lab2IDORSCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.Lab2IDORSCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Lab2IDORSPayload>[]
          }
          delete: {
            args: Prisma.Lab2IDORSDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Lab2IDORSPayload>
          }
          update: {
            args: Prisma.Lab2IDORSUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Lab2IDORSPayload>
          }
          deleteMany: {
            args: Prisma.Lab2IDORSDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.Lab2IDORSUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.Lab2IDORSUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Lab2IDORSPayload>[]
          }
          upsert: {
            args: Prisma.Lab2IDORSUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Lab2IDORSPayload>
          }
          aggregate: {
            args: Prisma.Lab2IDORSAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLab2IDORS>
          }
          groupBy: {
            args: Prisma.Lab2IDORSGroupByArgs<ExtArgs>
            result: $Utils.Optional<Lab2IDORSGroupByOutputType>[]
          }
          count: {
            args: Prisma.Lab2IDORSCountArgs<ExtArgs>
            result: $Utils.Optional<Lab2IDORSCountAggregateOutputType> | number
          }
        }
      }
      Lab3IDORS: {
        payload: Prisma.$Lab3IDORSPayload<ExtArgs>
        fields: Prisma.Lab3IDORSFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Lab3IDORSFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Lab3IDORSPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Lab3IDORSFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Lab3IDORSPayload>
          }
          findFirst: {
            args: Prisma.Lab3IDORSFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Lab3IDORSPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Lab3IDORSFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Lab3IDORSPayload>
          }
          findMany: {
            args: Prisma.Lab3IDORSFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Lab3IDORSPayload>[]
          }
          create: {
            args: Prisma.Lab3IDORSCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Lab3IDORSPayload>
          }
          createMany: {
            args: Prisma.Lab3IDORSCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.Lab3IDORSCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Lab3IDORSPayload>[]
          }
          delete: {
            args: Prisma.Lab3IDORSDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Lab3IDORSPayload>
          }
          update: {
            args: Prisma.Lab3IDORSUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Lab3IDORSPayload>
          }
          deleteMany: {
            args: Prisma.Lab3IDORSDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.Lab3IDORSUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.Lab3IDORSUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Lab3IDORSPayload>[]
          }
          upsert: {
            args: Prisma.Lab3IDORSUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Lab3IDORSPayload>
          }
          aggregate: {
            args: Prisma.Lab3IDORSAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLab3IDORS>
          }
          groupBy: {
            args: Prisma.Lab3IDORSGroupByArgs<ExtArgs>
            result: $Utils.Optional<Lab3IDORSGroupByOutputType>[]
          }
          count: {
            args: Prisma.Lab3IDORSCountArgs<ExtArgs>
            result: $Utils.Optional<Lab3IDORSCountAggregateOutputType> | number
          }
        }
      }
      Post: {
        payload: Prisma.$PostPayload<ExtArgs>
        fields: Prisma.PostFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PostFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PostFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          findFirst: {
            args: Prisma.PostFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PostFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          findMany: {
            args: Prisma.PostFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>[]
          }
          create: {
            args: Prisma.PostCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          createMany: {
            args: Prisma.PostCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PostCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>[]
          }
          delete: {
            args: Prisma.PostDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          update: {
            args: Prisma.PostUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          deleteMany: {
            args: Prisma.PostDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PostUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PostUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>[]
          }
          upsert: {
            args: Prisma.PostUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          aggregate: {
            args: Prisma.PostAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePost>
          }
          groupBy: {
            args: Prisma.PostGroupByArgs<ExtArgs>
            result: $Utils.Optional<PostGroupByOutputType>[]
          }
          count: {
            args: Prisma.PostCountArgs<ExtArgs>
            result: $Utils.Optional<PostCountAggregateOutputType> | number
          }
        }
      }
      lab2sql: {
        payload: Prisma.$lab2sqlPayload<ExtArgs>
        fields: Prisma.lab2sqlFieldRefs
        operations: {
          findUnique: {
            args: Prisma.lab2sqlFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$lab2sqlPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.lab2sqlFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$lab2sqlPayload>
          }
          findFirst: {
            args: Prisma.lab2sqlFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$lab2sqlPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.lab2sqlFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$lab2sqlPayload>
          }
          findMany: {
            args: Prisma.lab2sqlFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$lab2sqlPayload>[]
          }
          create: {
            args: Prisma.lab2sqlCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$lab2sqlPayload>
          }
          createMany: {
            args: Prisma.lab2sqlCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.lab2sqlCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$lab2sqlPayload>[]
          }
          delete: {
            args: Prisma.lab2sqlDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$lab2sqlPayload>
          }
          update: {
            args: Prisma.lab2sqlUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$lab2sqlPayload>
          }
          deleteMany: {
            args: Prisma.lab2sqlDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.lab2sqlUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.lab2sqlUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$lab2sqlPayload>[]
          }
          upsert: {
            args: Prisma.lab2sqlUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$lab2sqlPayload>
          }
          aggregate: {
            args: Prisma.Lab2sqlAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLab2sql>
          }
          groupBy: {
            args: Prisma.lab2sqlGroupByArgs<ExtArgs>
            result: $Utils.Optional<Lab2sqlGroupByOutputType>[]
          }
          count: {
            args: Prisma.lab2sqlCountArgs<ExtArgs>
            result: $Utils.Optional<Lab2sqlCountAggregateOutputType> | number
          }
        }
      }
      lab3sql: {
        payload: Prisma.$lab3sqlPayload<ExtArgs>
        fields: Prisma.lab3sqlFieldRefs
        operations: {
          findUnique: {
            args: Prisma.lab3sqlFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$lab3sqlPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.lab3sqlFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$lab3sqlPayload>
          }
          findFirst: {
            args: Prisma.lab3sqlFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$lab3sqlPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.lab3sqlFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$lab3sqlPayload>
          }
          findMany: {
            args: Prisma.lab3sqlFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$lab3sqlPayload>[]
          }
          create: {
            args: Prisma.lab3sqlCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$lab3sqlPayload>
          }
          createMany: {
            args: Prisma.lab3sqlCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.lab3sqlCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$lab3sqlPayload>[]
          }
          delete: {
            args: Prisma.lab3sqlDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$lab3sqlPayload>
          }
          update: {
            args: Prisma.lab3sqlUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$lab3sqlPayload>
          }
          deleteMany: {
            args: Prisma.lab3sqlDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.lab3sqlUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.lab3sqlUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$lab3sqlPayload>[]
          }
          upsert: {
            args: Prisma.lab3sqlUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$lab3sqlPayload>
          }
          aggregate: {
            args: Prisma.Lab3sqlAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLab3sql>
          }
          groupBy: {
            args: Prisma.lab3sqlGroupByArgs<ExtArgs>
            result: $Utils.Optional<Lab3sqlGroupByOutputType>[]
          }
          count: {
            args: Prisma.lab3sqlCountArgs<ExtArgs>
            result: $Utils.Optional<Lab3sqlCountAggregateOutputType> | number
          }
        }
      }
      ACUser: {
        payload: Prisma.$ACUserPayload<ExtArgs>
        fields: Prisma.ACUserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ACUserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ACUserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ACUserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ACUserPayload>
          }
          findFirst: {
            args: Prisma.ACUserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ACUserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ACUserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ACUserPayload>
          }
          findMany: {
            args: Prisma.ACUserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ACUserPayload>[]
          }
          create: {
            args: Prisma.ACUserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ACUserPayload>
          }
          createMany: {
            args: Prisma.ACUserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ACUserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ACUserPayload>[]
          }
          delete: {
            args: Prisma.ACUserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ACUserPayload>
          }
          update: {
            args: Prisma.ACUserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ACUserPayload>
          }
          deleteMany: {
            args: Prisma.ACUserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ACUserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ACUserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ACUserPayload>[]
          }
          upsert: {
            args: Prisma.ACUserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ACUserPayload>
          }
          aggregate: {
            args: Prisma.ACUserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateACUser>
          }
          groupBy: {
            args: Prisma.ACUserGroupByArgs<ExtArgs>
            result: $Utils.Optional<ACUserGroupByOutputType>[]
          }
          count: {
            args: Prisma.ACUserCountArgs<ExtArgs>
            result: $Utils.Optional<ACUserCountAggregateOutputType> | number
          }
        }
      }
      apiHackingLab: {
        payload: Prisma.$apiHackingLabPayload<ExtArgs>
        fields: Prisma.apiHackingLabFieldRefs
        operations: {
          findUnique: {
            args: Prisma.apiHackingLabFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$apiHackingLabPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.apiHackingLabFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$apiHackingLabPayload>
          }
          findFirst: {
            args: Prisma.apiHackingLabFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$apiHackingLabPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.apiHackingLabFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$apiHackingLabPayload>
          }
          findMany: {
            args: Prisma.apiHackingLabFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$apiHackingLabPayload>[]
          }
          create: {
            args: Prisma.apiHackingLabCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$apiHackingLabPayload>
          }
          createMany: {
            args: Prisma.apiHackingLabCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.apiHackingLabCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$apiHackingLabPayload>[]
          }
          delete: {
            args: Prisma.apiHackingLabDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$apiHackingLabPayload>
          }
          update: {
            args: Prisma.apiHackingLabUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$apiHackingLabPayload>
          }
          deleteMany: {
            args: Prisma.apiHackingLabDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.apiHackingLabUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.apiHackingLabUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$apiHackingLabPayload>[]
          }
          upsert: {
            args: Prisma.apiHackingLabUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$apiHackingLabPayload>
          }
          aggregate: {
            args: Prisma.ApiHackingLabAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateApiHackingLab>
          }
          groupBy: {
            args: Prisma.apiHackingLabGroupByArgs<ExtArgs>
            result: $Utils.Optional<ApiHackingLabGroupByOutputType>[]
          }
          count: {
            args: Prisma.apiHackingLabCountArgs<ExtArgs>
            result: $Utils.Optional<ApiHackingLabCountAggregateOutputType> | number
          }
        }
      }
      imageForApiHacking: {
        payload: Prisma.$imageForApiHackingPayload<ExtArgs>
        fields: Prisma.imageForApiHackingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.imageForApiHackingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$imageForApiHackingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.imageForApiHackingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$imageForApiHackingPayload>
          }
          findFirst: {
            args: Prisma.imageForApiHackingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$imageForApiHackingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.imageForApiHackingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$imageForApiHackingPayload>
          }
          findMany: {
            args: Prisma.imageForApiHackingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$imageForApiHackingPayload>[]
          }
          create: {
            args: Prisma.imageForApiHackingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$imageForApiHackingPayload>
          }
          createMany: {
            args: Prisma.imageForApiHackingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.imageForApiHackingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$imageForApiHackingPayload>[]
          }
          delete: {
            args: Prisma.imageForApiHackingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$imageForApiHackingPayload>
          }
          update: {
            args: Prisma.imageForApiHackingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$imageForApiHackingPayload>
          }
          deleteMany: {
            args: Prisma.imageForApiHackingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.imageForApiHackingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.imageForApiHackingUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$imageForApiHackingPayload>[]
          }
          upsert: {
            args: Prisma.imageForApiHackingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$imageForApiHackingPayload>
          }
          aggregate: {
            args: Prisma.ImageForApiHackingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateImageForApiHacking>
          }
          groupBy: {
            args: Prisma.imageForApiHackingGroupByArgs<ExtArgs>
            result: $Utils.Optional<ImageForApiHackingGroupByOutputType>[]
          }
          count: {
            args: Prisma.imageForApiHackingCountArgs<ExtArgs>
            result: $Utils.Optional<ImageForApiHackingCountAggregateOutputType> | number
          }
        }
      }
      ProductToPathTraversalLab1: {
        payload: Prisma.$ProductToPathTraversalLab1Payload<ExtArgs>
        fields: Prisma.ProductToPathTraversalLab1FieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductToPathTraversalLab1FindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductToPathTraversalLab1Payload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductToPathTraversalLab1FindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductToPathTraversalLab1Payload>
          }
          findFirst: {
            args: Prisma.ProductToPathTraversalLab1FindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductToPathTraversalLab1Payload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductToPathTraversalLab1FindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductToPathTraversalLab1Payload>
          }
          findMany: {
            args: Prisma.ProductToPathTraversalLab1FindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductToPathTraversalLab1Payload>[]
          }
          create: {
            args: Prisma.ProductToPathTraversalLab1CreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductToPathTraversalLab1Payload>
          }
          createMany: {
            args: Prisma.ProductToPathTraversalLab1CreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProductToPathTraversalLab1CreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductToPathTraversalLab1Payload>[]
          }
          delete: {
            args: Prisma.ProductToPathTraversalLab1DeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductToPathTraversalLab1Payload>
          }
          update: {
            args: Prisma.ProductToPathTraversalLab1UpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductToPathTraversalLab1Payload>
          }
          deleteMany: {
            args: Prisma.ProductToPathTraversalLab1DeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProductToPathTraversalLab1UpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProductToPathTraversalLab1UpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductToPathTraversalLab1Payload>[]
          }
          upsert: {
            args: Prisma.ProductToPathTraversalLab1UpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductToPathTraversalLab1Payload>
          }
          aggregate: {
            args: Prisma.ProductToPathTraversalLab1AggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProductToPathTraversalLab1>
          }
          groupBy: {
            args: Prisma.ProductToPathTraversalLab1GroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductToPathTraversalLab1GroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductToPathTraversalLab1CountArgs<ExtArgs>
            result: $Utils.Optional<ProductToPathTraversalLab1CountAggregateOutputType> | number
          }
        }
      }
      BankAccount: {
        payload: Prisma.$BankAccountPayload<ExtArgs>
        fields: Prisma.BankAccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BankAccountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BankAccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BankAccountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BankAccountPayload>
          }
          findFirst: {
            args: Prisma.BankAccountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BankAccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BankAccountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BankAccountPayload>
          }
          findMany: {
            args: Prisma.BankAccountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BankAccountPayload>[]
          }
          create: {
            args: Prisma.BankAccountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BankAccountPayload>
          }
          createMany: {
            args: Prisma.BankAccountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BankAccountCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BankAccountPayload>[]
          }
          delete: {
            args: Prisma.BankAccountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BankAccountPayload>
          }
          update: {
            args: Prisma.BankAccountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BankAccountPayload>
          }
          deleteMany: {
            args: Prisma.BankAccountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BankAccountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BankAccountUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BankAccountPayload>[]
          }
          upsert: {
            args: Prisma.BankAccountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BankAccountPayload>
          }
          aggregate: {
            args: Prisma.BankAccountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBankAccount>
          }
          groupBy: {
            args: Prisma.BankAccountGroupByArgs<ExtArgs>
            result: $Utils.Optional<BankAccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.BankAccountCountArgs<ExtArgs>
            result: $Utils.Optional<BankAccountCountAggregateOutputType> | number
          }
        }
      }
      CSRFLab2: {
        payload: Prisma.$CSRFLab2Payload<ExtArgs>
        fields: Prisma.CSRFLab2FieldRefs
        operations: {
          findUnique: {
            args: Prisma.CSRFLab2FindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CSRFLab2Payload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CSRFLab2FindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CSRFLab2Payload>
          }
          findFirst: {
            args: Prisma.CSRFLab2FindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CSRFLab2Payload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CSRFLab2FindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CSRFLab2Payload>
          }
          findMany: {
            args: Prisma.CSRFLab2FindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CSRFLab2Payload>[]
          }
          create: {
            args: Prisma.CSRFLab2CreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CSRFLab2Payload>
          }
          createMany: {
            args: Prisma.CSRFLab2CreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CSRFLab2CreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CSRFLab2Payload>[]
          }
          delete: {
            args: Prisma.CSRFLab2DeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CSRFLab2Payload>
          }
          update: {
            args: Prisma.CSRFLab2UpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CSRFLab2Payload>
          }
          deleteMany: {
            args: Prisma.CSRFLab2DeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CSRFLab2UpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CSRFLab2UpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CSRFLab2Payload>[]
          }
          upsert: {
            args: Prisma.CSRFLab2UpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CSRFLab2Payload>
          }
          aggregate: {
            args: Prisma.CSRFLab2AggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCSRFLab2>
          }
          groupBy: {
            args: Prisma.CSRFLab2GroupByArgs<ExtArgs>
            result: $Utils.Optional<CSRFLab2GroupByOutputType>[]
          }
          count: {
            args: Prisma.CSRFLab2CountArgs<ExtArgs>
            result: $Utils.Optional<CSRFLab2CountAggregateOutputType> | number
          }
        }
      }
      CSRFLab3: {
        payload: Prisma.$CSRFLab3Payload<ExtArgs>
        fields: Prisma.CSRFLab3FieldRefs
        operations: {
          findUnique: {
            args: Prisma.CSRFLab3FindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CSRFLab3Payload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CSRFLab3FindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CSRFLab3Payload>
          }
          findFirst: {
            args: Prisma.CSRFLab3FindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CSRFLab3Payload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CSRFLab3FindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CSRFLab3Payload>
          }
          findMany: {
            args: Prisma.CSRFLab3FindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CSRFLab3Payload>[]
          }
          create: {
            args: Prisma.CSRFLab3CreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CSRFLab3Payload>
          }
          createMany: {
            args: Prisma.CSRFLab3CreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CSRFLab3CreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CSRFLab3Payload>[]
          }
          delete: {
            args: Prisma.CSRFLab3DeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CSRFLab3Payload>
          }
          update: {
            args: Prisma.CSRFLab3UpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CSRFLab3Payload>
          }
          deleteMany: {
            args: Prisma.CSRFLab3DeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CSRFLab3UpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CSRFLab3UpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CSRFLab3Payload>[]
          }
          upsert: {
            args: Prisma.CSRFLab3UpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CSRFLab3Payload>
          }
          aggregate: {
            args: Prisma.CSRFLab3AggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCSRFLab3>
          }
          groupBy: {
            args: Prisma.CSRFLab3GroupByArgs<ExtArgs>
            result: $Utils.Optional<CSRFLab3GroupByOutputType>[]
          }
          count: {
            args: Prisma.CSRFLab3CountArgs<ExtArgs>
            result: $Utils.Optional<CSRFLab3CountAggregateOutputType> | number
          }
        }
      }
      FileInclusionLab1: {
        payload: Prisma.$FileInclusionLab1Payload<ExtArgs>
        fields: Prisma.FileInclusionLab1FieldRefs
        operations: {
          findUnique: {
            args: Prisma.FileInclusionLab1FindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FileInclusionLab1Payload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FileInclusionLab1FindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FileInclusionLab1Payload>
          }
          findFirst: {
            args: Prisma.FileInclusionLab1FindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FileInclusionLab1Payload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FileInclusionLab1FindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FileInclusionLab1Payload>
          }
          findMany: {
            args: Prisma.FileInclusionLab1FindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FileInclusionLab1Payload>[]
          }
          create: {
            args: Prisma.FileInclusionLab1CreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FileInclusionLab1Payload>
          }
          createMany: {
            args: Prisma.FileInclusionLab1CreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FileInclusionLab1CreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FileInclusionLab1Payload>[]
          }
          delete: {
            args: Prisma.FileInclusionLab1DeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FileInclusionLab1Payload>
          }
          update: {
            args: Prisma.FileInclusionLab1UpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FileInclusionLab1Payload>
          }
          deleteMany: {
            args: Prisma.FileInclusionLab1DeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FileInclusionLab1UpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FileInclusionLab1UpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FileInclusionLab1Payload>[]
          }
          upsert: {
            args: Prisma.FileInclusionLab1UpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FileInclusionLab1Payload>
          }
          aggregate: {
            args: Prisma.FileInclusionLab1AggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFileInclusionLab1>
          }
          groupBy: {
            args: Prisma.FileInclusionLab1GroupByArgs<ExtArgs>
            result: $Utils.Optional<FileInclusionLab1GroupByOutputType>[]
          }
          count: {
            args: Prisma.FileInclusionLab1CountArgs<ExtArgs>
            result: $Utils.Optional<FileInclusionLab1CountAggregateOutputType> | number
          }
        }
      }
      CartItem: {
        payload: Prisma.$CartItemPayload<ExtArgs>
        fields: Prisma.CartItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CartItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CartItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartItemPayload>
          }
          findFirst: {
            args: Prisma.CartItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CartItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartItemPayload>
          }
          findMany: {
            args: Prisma.CartItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartItemPayload>[]
          }
          create: {
            args: Prisma.CartItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartItemPayload>
          }
          createMany: {
            args: Prisma.CartItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CartItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartItemPayload>[]
          }
          delete: {
            args: Prisma.CartItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartItemPayload>
          }
          update: {
            args: Prisma.CartItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartItemPayload>
          }
          deleteMany: {
            args: Prisma.CartItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CartItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CartItemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartItemPayload>[]
          }
          upsert: {
            args: Prisma.CartItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartItemPayload>
          }
          aggregate: {
            args: Prisma.CartItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCartItem>
          }
          groupBy: {
            args: Prisma.CartItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<CartItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.CartItemCountArgs<ExtArgs>
            result: $Utils.Optional<CartItemCountAggregateOutputType> | number
          }
        }
      }
      BurPSuiteLab3: {
        payload: Prisma.$BurPSuiteLab3Payload<ExtArgs>
        fields: Prisma.BurPSuiteLab3FieldRefs
        operations: {
          findUnique: {
            args: Prisma.BurPSuiteLab3FindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BurPSuiteLab3Payload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BurPSuiteLab3FindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BurPSuiteLab3Payload>
          }
          findFirst: {
            args: Prisma.BurPSuiteLab3FindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BurPSuiteLab3Payload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BurPSuiteLab3FindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BurPSuiteLab3Payload>
          }
          findMany: {
            args: Prisma.BurPSuiteLab3FindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BurPSuiteLab3Payload>[]
          }
          create: {
            args: Prisma.BurPSuiteLab3CreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BurPSuiteLab3Payload>
          }
          createMany: {
            args: Prisma.BurPSuiteLab3CreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BurPSuiteLab3CreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BurPSuiteLab3Payload>[]
          }
          delete: {
            args: Prisma.BurPSuiteLab3DeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BurPSuiteLab3Payload>
          }
          update: {
            args: Prisma.BurPSuiteLab3UpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BurPSuiteLab3Payload>
          }
          deleteMany: {
            args: Prisma.BurPSuiteLab3DeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BurPSuiteLab3UpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BurPSuiteLab3UpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BurPSuiteLab3Payload>[]
          }
          upsert: {
            args: Prisma.BurPSuiteLab3UpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BurPSuiteLab3Payload>
          }
          aggregate: {
            args: Prisma.BurPSuiteLab3AggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBurPSuiteLab3>
          }
          groupBy: {
            args: Prisma.BurPSuiteLab3GroupByArgs<ExtArgs>
            result: $Utils.Optional<BurPSuiteLab3GroupByOutputType>[]
          }
          count: {
            args: Prisma.BurPSuiteLab3CountArgs<ExtArgs>
            result: $Utils.Optional<BurPSuiteLab3CountAggregateOutputType> | number
          }
        }
      }
      Course: {
        payload: Prisma.$CoursePayload<ExtArgs>
        fields: Prisma.CourseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CourseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CourseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          findFirst: {
            args: Prisma.CourseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CourseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          findMany: {
            args: Prisma.CourseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>[]
          }
          create: {
            args: Prisma.CourseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          createMany: {
            args: Prisma.CourseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CourseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>[]
          }
          delete: {
            args: Prisma.CourseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          update: {
            args: Prisma.CourseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          deleteMany: {
            args: Prisma.CourseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CourseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CourseUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>[]
          }
          upsert: {
            args: Prisma.CourseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          aggregate: {
            args: Prisma.CourseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCourse>
          }
          groupBy: {
            args: Prisma.CourseGroupByArgs<ExtArgs>
            result: $Utils.Optional<CourseGroupByOutputType>[]
          }
          count: {
            args: Prisma.CourseCountArgs<ExtArgs>
            result: $Utils.Optional<CourseCountAggregateOutputType> | number
          }
        }
      }
      CourseRegistration: {
        payload: Prisma.$CourseRegistrationPayload<ExtArgs>
        fields: Prisma.CourseRegistrationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CourseRegistrationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseRegistrationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CourseRegistrationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseRegistrationPayload>
          }
          findFirst: {
            args: Prisma.CourseRegistrationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseRegistrationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CourseRegistrationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseRegistrationPayload>
          }
          findMany: {
            args: Prisma.CourseRegistrationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseRegistrationPayload>[]
          }
          create: {
            args: Prisma.CourseRegistrationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseRegistrationPayload>
          }
          createMany: {
            args: Prisma.CourseRegistrationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CourseRegistrationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseRegistrationPayload>[]
          }
          delete: {
            args: Prisma.CourseRegistrationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseRegistrationPayload>
          }
          update: {
            args: Prisma.CourseRegistrationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseRegistrationPayload>
          }
          deleteMany: {
            args: Prisma.CourseRegistrationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CourseRegistrationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CourseRegistrationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseRegistrationPayload>[]
          }
          upsert: {
            args: Prisma.CourseRegistrationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseRegistrationPayload>
          }
          aggregate: {
            args: Prisma.CourseRegistrationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCourseRegistration>
          }
          groupBy: {
            args: Prisma.CourseRegistrationGroupByArgs<ExtArgs>
            result: $Utils.Optional<CourseRegistrationGroupByOutputType>[]
          }
          count: {
            args: Prisma.CourseRegistrationCountArgs<ExtArgs>
            result: $Utils.Optional<CourseRegistrationCountAggregateOutputType> | number
          }
        }
      }
      ClickJackLab1: {
        payload: Prisma.$ClickJackLab1Payload<ExtArgs>
        fields: Prisma.ClickJackLab1FieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClickJackLab1FindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClickJackLab1Payload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClickJackLab1FindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClickJackLab1Payload>
          }
          findFirst: {
            args: Prisma.ClickJackLab1FindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClickJackLab1Payload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClickJackLab1FindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClickJackLab1Payload>
          }
          findMany: {
            args: Prisma.ClickJackLab1FindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClickJackLab1Payload>[]
          }
          create: {
            args: Prisma.ClickJackLab1CreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClickJackLab1Payload>
          }
          createMany: {
            args: Prisma.ClickJackLab1CreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ClickJackLab1CreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClickJackLab1Payload>[]
          }
          delete: {
            args: Prisma.ClickJackLab1DeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClickJackLab1Payload>
          }
          update: {
            args: Prisma.ClickJackLab1UpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClickJackLab1Payload>
          }
          deleteMany: {
            args: Prisma.ClickJackLab1DeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClickJackLab1UpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ClickJackLab1UpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClickJackLab1Payload>[]
          }
          upsert: {
            args: Prisma.ClickJackLab1UpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClickJackLab1Payload>
          }
          aggregate: {
            args: Prisma.ClickJackLab1AggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClickJackLab1>
          }
          groupBy: {
            args: Prisma.ClickJackLab1GroupByArgs<ExtArgs>
            result: $Utils.Optional<ClickJackLab1GroupByOutputType>[]
          }
          count: {
            args: Prisma.ClickJackLab1CountArgs<ExtArgs>
            result: $Utils.Optional<ClickJackLab1CountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    image?: ImageOmit
    validationNumber?: ValidationNumberOmit
    userForsqlInjection?: userForsqlInjectionOmit
    userForXSS?: userForXSSOmit
    file?: FileOmit
    lab1IDORS?: Lab1IDORSOmit
    lab2IDORS?: Lab2IDORSOmit
    lab3IDORS?: Lab3IDORSOmit
    post?: PostOmit
    lab2sql?: lab2sqlOmit
    lab3sql?: lab3sqlOmit
    aCUser?: ACUserOmit
    apiHackingLab?: apiHackingLabOmit
    imageForApiHacking?: imageForApiHackingOmit
    productToPathTraversalLab1?: ProductToPathTraversalLab1Omit
    bankAccount?: BankAccountOmit
    cSRFLab2?: CSRFLab2Omit
    cSRFLab3?: CSRFLab3Omit
    fileInclusionLab1?: FileInclusionLab1Omit
    cartItem?: CartItemOmit
    burPSuiteLab3?: BurPSuiteLab3Omit
    course?: CourseOmit
    courseRegistration?: CourseRegistrationOmit
    clickJackLab1?: ClickJackLab1Omit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    File: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    File?: boolean | UserCountOutputTypeCountFileArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FileWhereInput
  }


  /**
   * Count Type UserForXSSCountOutputType
   */

  export type UserForXSSCountOutputType = {
    posts: number
  }

  export type UserForXSSCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    posts?: boolean | UserForXSSCountOutputTypeCountPostsArgs
  }

  // Custom InputTypes
  /**
   * UserForXSSCountOutputType without action
   */
  export type UserForXSSCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserForXSSCountOutputType
     */
    select?: UserForXSSCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserForXSSCountOutputType without action
   */
  export type UserForXSSCountOutputTypeCountPostsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostWhereInput
  }


  /**
   * Count Type ApiHackingLabCountOutputType
   */

  export type ApiHackingLabCountOutputType = {
    image: number
  }

  export type ApiHackingLabCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    image?: boolean | ApiHackingLabCountOutputTypeCountImageArgs
  }

  // Custom InputTypes
  /**
   * ApiHackingLabCountOutputType without action
   */
  export type ApiHackingLabCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiHackingLabCountOutputType
     */
    select?: ApiHackingLabCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ApiHackingLabCountOutputType without action
   */
  export type ApiHackingLabCountOutputTypeCountImageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: imageForApiHackingWhereInput
  }


  /**
   * Count Type CourseCountOutputType
   */

  export type CourseCountOutputType = {
    registrations: number
  }

  export type CourseCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    registrations?: boolean | CourseCountOutputTypeCountRegistrationsArgs
  }

  // Custom InputTypes
  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseCountOutputType
     */
    select?: CourseCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeCountRegistrationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseRegistrationWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    name: string | null
    email: string | null
    password: string | null
    isVerified: boolean | null
    role: $Enums.Role | null
    token: string | null
    address: string | null
    birthday: string | null
    phoneNum: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    name: string | null
    email: string | null
    password: string | null
    isVerified: boolean | null
    role: $Enums.Role | null
    token: string | null
    address: string | null
    birthday: string | null
    phoneNum: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    name: number
    email: number
    password: number
    isVerified: number
    role: number
    token: number
    address: number
    birthday: number
    phoneNum: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    name?: true
    email?: true
    password?: true
    isVerified?: true
    role?: true
    token?: true
    address?: true
    birthday?: true
    phoneNum?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    name?: true
    email?: true
    password?: true
    isVerified?: true
    role?: true
    token?: true
    address?: true
    birthday?: true
    phoneNum?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    name?: true
    email?: true
    password?: true
    isVerified?: true
    role?: true
    token?: true
    address?: true
    birthday?: true
    phoneNum?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    name: string
    email: string
    password: string
    isVerified: boolean
    role: $Enums.Role
    token: string | null
    address: string | null
    birthday: string | null
    phoneNum: string | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    isVerified?: boolean
    role?: boolean
    token?: boolean
    address?: boolean
    birthday?: boolean
    phoneNum?: boolean
    validationNumber?: boolean | User$validationNumberArgs<ExtArgs>
    image?: boolean | User$imageArgs<ExtArgs>
    File?: boolean | User$FileArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    isVerified?: boolean
    role?: boolean
    token?: boolean
    address?: boolean
    birthday?: boolean
    phoneNum?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    isVerified?: boolean
    role?: boolean
    token?: boolean
    address?: boolean
    birthday?: boolean
    phoneNum?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    isVerified?: boolean
    role?: boolean
    token?: boolean
    address?: boolean
    birthday?: boolean
    phoneNum?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "name" | "email" | "password" | "isVerified" | "role" | "token" | "address" | "birthday" | "phoneNum", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    validationNumber?: boolean | User$validationNumberArgs<ExtArgs>
    image?: boolean | User$imageArgs<ExtArgs>
    File?: boolean | User$FileArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      validationNumber: Prisma.$ValidationNumberPayload<ExtArgs> | null
      image: Prisma.$ImagePayload<ExtArgs> | null
      File: Prisma.$FilePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      updatedAt: Date
      name: string
      email: string
      password: string
      isVerified: boolean
      role: $Enums.Role
      token: string | null
      address: string | null
      birthday: string | null
      phoneNum: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    validationNumber<T extends User$validationNumberArgs<ExtArgs> = {}>(args?: Subset<T, User$validationNumberArgs<ExtArgs>>): Prisma__ValidationNumberClient<$Result.GetResult<Prisma.$ValidationNumberPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    image<T extends User$imageArgs<ExtArgs> = {}>(args?: Subset<T, User$imageArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    File<T extends User$FileArgs<ExtArgs> = {}>(args?: Subset<T, User$FileArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly isVerified: FieldRef<"User", 'Boolean'>
    readonly role: FieldRef<"User", 'Role'>
    readonly token: FieldRef<"User", 'String'>
    readonly address: FieldRef<"User", 'String'>
    readonly birthday: FieldRef<"User", 'String'>
    readonly phoneNum: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.validationNumber
   */
  export type User$validationNumberArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValidationNumber
     */
    select?: ValidationNumberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ValidationNumber
     */
    omit?: ValidationNumberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationNumberInclude<ExtArgs> | null
    where?: ValidationNumberWhereInput
  }

  /**
   * User.image
   */
  export type User$imageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    where?: ImageWhereInput
  }

  /**
   * User.File
   */
  export type User$FileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    where?: FileWhereInput
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    cursor?: FileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FileScalarFieldEnum | FileScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Image
   */

  export type AggregateImage = {
    _count: ImageCountAggregateOutputType | null
    _min: ImageMinAggregateOutputType | null
    _max: ImageMaxAggregateOutputType | null
  }

  export type ImageMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    name: string | null
    path: string | null
    mimetype: string | null
    userId: string | null
  }

  export type ImageMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    name: string | null
    path: string | null
    mimetype: string | null
    userId: string | null
  }

  export type ImageCountAggregateOutputType = {
    id: number
    createdAt: number
    name: number
    path: number
    mimetype: number
    userId: number
    _all: number
  }


  export type ImageMinAggregateInputType = {
    id?: true
    createdAt?: true
    name?: true
    path?: true
    mimetype?: true
    userId?: true
  }

  export type ImageMaxAggregateInputType = {
    id?: true
    createdAt?: true
    name?: true
    path?: true
    mimetype?: true
    userId?: true
  }

  export type ImageCountAggregateInputType = {
    id?: true
    createdAt?: true
    name?: true
    path?: true
    mimetype?: true
    userId?: true
    _all?: true
  }

  export type ImageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Image to aggregate.
     */
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     */
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Images
    **/
    _count?: true | ImageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ImageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ImageMaxAggregateInputType
  }

  export type GetImageAggregateType<T extends ImageAggregateArgs> = {
        [P in keyof T & keyof AggregateImage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateImage[P]>
      : GetScalarType<T[P], AggregateImage[P]>
  }




  export type ImageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ImageWhereInput
    orderBy?: ImageOrderByWithAggregationInput | ImageOrderByWithAggregationInput[]
    by: ImageScalarFieldEnum[] | ImageScalarFieldEnum
    having?: ImageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ImageCountAggregateInputType | true
    _min?: ImageMinAggregateInputType
    _max?: ImageMaxAggregateInputType
  }

  export type ImageGroupByOutputType = {
    id: string
    createdAt: Date
    name: string
    path: string
    mimetype: string
    userId: string
    _count: ImageCountAggregateOutputType | null
    _min: ImageMinAggregateOutputType | null
    _max: ImageMaxAggregateOutputType | null
  }

  type GetImageGroupByPayload<T extends ImageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ImageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ImageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ImageGroupByOutputType[P]>
            : GetScalarType<T[P], ImageGroupByOutputType[P]>
        }
      >
    >


  export type ImageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    name?: boolean
    path?: boolean
    mimetype?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["image"]>

  export type ImageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    name?: boolean
    path?: boolean
    mimetype?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["image"]>

  export type ImageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    name?: boolean
    path?: boolean
    mimetype?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["image"]>

  export type ImageSelectScalar = {
    id?: boolean
    createdAt?: boolean
    name?: boolean
    path?: boolean
    mimetype?: boolean
    userId?: boolean
  }

  export type ImageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "createdAt" | "name" | "path" | "mimetype" | "userId", ExtArgs["result"]["image"]>
  export type ImageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ImageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ImageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ImagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Image"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      name: string
      path: string
      mimetype: string
      userId: string
    }, ExtArgs["result"]["image"]>
    composites: {}
  }

  type ImageGetPayload<S extends boolean | null | undefined | ImageDefaultArgs> = $Result.GetResult<Prisma.$ImagePayload, S>

  type ImageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ImageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ImageCountAggregateInputType | true
    }

  export interface ImageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Image'], meta: { name: 'Image' } }
    /**
     * Find zero or one Image that matches the filter.
     * @param {ImageFindUniqueArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ImageFindUniqueArgs>(args: SelectSubset<T, ImageFindUniqueArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Image that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ImageFindUniqueOrThrowArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ImageFindUniqueOrThrowArgs>(args: SelectSubset<T, ImageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Image that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageFindFirstArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ImageFindFirstArgs>(args?: SelectSubset<T, ImageFindFirstArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Image that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageFindFirstOrThrowArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ImageFindFirstOrThrowArgs>(args?: SelectSubset<T, ImageFindFirstOrThrowArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Images that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Images
     * const images = await prisma.image.findMany()
     * 
     * // Get first 10 Images
     * const images = await prisma.image.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const imageWithIdOnly = await prisma.image.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ImageFindManyArgs>(args?: SelectSubset<T, ImageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Image.
     * @param {ImageCreateArgs} args - Arguments to create a Image.
     * @example
     * // Create one Image
     * const Image = await prisma.image.create({
     *   data: {
     *     // ... data to create a Image
     *   }
     * })
     * 
     */
    create<T extends ImageCreateArgs>(args: SelectSubset<T, ImageCreateArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Images.
     * @param {ImageCreateManyArgs} args - Arguments to create many Images.
     * @example
     * // Create many Images
     * const image = await prisma.image.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ImageCreateManyArgs>(args?: SelectSubset<T, ImageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Images and returns the data saved in the database.
     * @param {ImageCreateManyAndReturnArgs} args - Arguments to create many Images.
     * @example
     * // Create many Images
     * const image = await prisma.image.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Images and only return the `id`
     * const imageWithIdOnly = await prisma.image.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ImageCreateManyAndReturnArgs>(args?: SelectSubset<T, ImageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Image.
     * @param {ImageDeleteArgs} args - Arguments to delete one Image.
     * @example
     * // Delete one Image
     * const Image = await prisma.image.delete({
     *   where: {
     *     // ... filter to delete one Image
     *   }
     * })
     * 
     */
    delete<T extends ImageDeleteArgs>(args: SelectSubset<T, ImageDeleteArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Image.
     * @param {ImageUpdateArgs} args - Arguments to update one Image.
     * @example
     * // Update one Image
     * const image = await prisma.image.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ImageUpdateArgs>(args: SelectSubset<T, ImageUpdateArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Images.
     * @param {ImageDeleteManyArgs} args - Arguments to filter Images to delete.
     * @example
     * // Delete a few Images
     * const { count } = await prisma.image.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ImageDeleteManyArgs>(args?: SelectSubset<T, ImageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Images
     * const image = await prisma.image.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ImageUpdateManyArgs>(args: SelectSubset<T, ImageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Images and returns the data updated in the database.
     * @param {ImageUpdateManyAndReturnArgs} args - Arguments to update many Images.
     * @example
     * // Update many Images
     * const image = await prisma.image.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Images and only return the `id`
     * const imageWithIdOnly = await prisma.image.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ImageUpdateManyAndReturnArgs>(args: SelectSubset<T, ImageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Image.
     * @param {ImageUpsertArgs} args - Arguments to update or create a Image.
     * @example
     * // Update or create a Image
     * const image = await prisma.image.upsert({
     *   create: {
     *     // ... data to create a Image
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Image we want to update
     *   }
     * })
     */
    upsert<T extends ImageUpsertArgs>(args: SelectSubset<T, ImageUpsertArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageCountArgs} args - Arguments to filter Images to count.
     * @example
     * // Count the number of Images
     * const count = await prisma.image.count({
     *   where: {
     *     // ... the filter for the Images we want to count
     *   }
     * })
    **/
    count<T extends ImageCountArgs>(
      args?: Subset<T, ImageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ImageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Image.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ImageAggregateArgs>(args: Subset<T, ImageAggregateArgs>): Prisma.PrismaPromise<GetImageAggregateType<T>>

    /**
     * Group by Image.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ImageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ImageGroupByArgs['orderBy'] }
        : { orderBy?: ImageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ImageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetImageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Image model
   */
  readonly fields: ImageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Image.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ImageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Image model
   */ 
  interface ImageFieldRefs {
    readonly id: FieldRef<"Image", 'String'>
    readonly createdAt: FieldRef<"Image", 'DateTime'>
    readonly name: FieldRef<"Image", 'String'>
    readonly path: FieldRef<"Image", 'String'>
    readonly mimetype: FieldRef<"Image", 'String'>
    readonly userId: FieldRef<"Image", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Image findUnique
   */
  export type ImageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter, which Image to fetch.
     */
    where: ImageWhereUniqueInput
  }

  /**
   * Image findUniqueOrThrow
   */
  export type ImageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter, which Image to fetch.
     */
    where: ImageWhereUniqueInput
  }

  /**
   * Image findFirst
   */
  export type ImageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter, which Image to fetch.
     */
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     */
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Images.
     */
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Images.
     */
    distinct?: ImageScalarFieldEnum | ImageScalarFieldEnum[]
  }

  /**
   * Image findFirstOrThrow
   */
  export type ImageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter, which Image to fetch.
     */
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     */
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Images.
     */
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Images.
     */
    distinct?: ImageScalarFieldEnum | ImageScalarFieldEnum[]
  }

  /**
   * Image findMany
   */
  export type ImageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter, which Images to fetch.
     */
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     */
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Images.
     */
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     */
    skip?: number
    distinct?: ImageScalarFieldEnum | ImageScalarFieldEnum[]
  }

  /**
   * Image create
   */
  export type ImageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * The data needed to create a Image.
     */
    data: XOR<ImageCreateInput, ImageUncheckedCreateInput>
  }

  /**
   * Image createMany
   */
  export type ImageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Images.
     */
    data: ImageCreateManyInput | ImageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Image createManyAndReturn
   */
  export type ImageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * The data used to create many Images.
     */
    data: ImageCreateManyInput | ImageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Image update
   */
  export type ImageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * The data needed to update a Image.
     */
    data: XOR<ImageUpdateInput, ImageUncheckedUpdateInput>
    /**
     * Choose, which Image to update.
     */
    where: ImageWhereUniqueInput
  }

  /**
   * Image updateMany
   */
  export type ImageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Images.
     */
    data: XOR<ImageUpdateManyMutationInput, ImageUncheckedUpdateManyInput>
    /**
     * Filter which Images to update
     */
    where?: ImageWhereInput
    /**
     * Limit how many Images to update.
     */
    limit?: number
  }

  /**
   * Image updateManyAndReturn
   */
  export type ImageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * The data used to update Images.
     */
    data: XOR<ImageUpdateManyMutationInput, ImageUncheckedUpdateManyInput>
    /**
     * Filter which Images to update
     */
    where?: ImageWhereInput
    /**
     * Limit how many Images to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Image upsert
   */
  export type ImageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * The filter to search for the Image to update in case it exists.
     */
    where: ImageWhereUniqueInput
    /**
     * In case the Image found by the `where` argument doesn't exist, create a new Image with this data.
     */
    create: XOR<ImageCreateInput, ImageUncheckedCreateInput>
    /**
     * In case the Image was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ImageUpdateInput, ImageUncheckedUpdateInput>
  }

  /**
   * Image delete
   */
  export type ImageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter which Image to delete.
     */
    where: ImageWhereUniqueInput
  }

  /**
   * Image deleteMany
   */
  export type ImageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Images to delete
     */
    where?: ImageWhereInput
    /**
     * Limit how many Images to delete.
     */
    limit?: number
  }

  /**
   * Image without action
   */
  export type ImageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
  }


  /**
   * Model ValidationNumber
   */

  export type AggregateValidationNumber = {
    _count: ValidationNumberCountAggregateOutputType | null
    _avg: ValidationNumberAvgAggregateOutputType | null
    _sum: ValidationNumberSumAggregateOutputType | null
    _min: ValidationNumberMinAggregateOutputType | null
    _max: ValidationNumberMaxAggregateOutputType | null
  }

  export type ValidationNumberAvgAggregateOutputType = {
    expiration: number | null
  }

  export type ValidationNumberSumAggregateOutputType = {
    expiration: bigint | null
  }

  export type ValidationNumberMinAggregateOutputType = {
    id: string | null
    number: string | null
    createdAt: Date | null
    expiration: bigint | null
    isVerified: boolean | null
    userId: string | null
  }

  export type ValidationNumberMaxAggregateOutputType = {
    id: string | null
    number: string | null
    createdAt: Date | null
    expiration: bigint | null
    isVerified: boolean | null
    userId: string | null
  }

  export type ValidationNumberCountAggregateOutputType = {
    id: number
    number: number
    createdAt: number
    expiration: number
    isVerified: number
    userId: number
    _all: number
  }


  export type ValidationNumberAvgAggregateInputType = {
    expiration?: true
  }

  export type ValidationNumberSumAggregateInputType = {
    expiration?: true
  }

  export type ValidationNumberMinAggregateInputType = {
    id?: true
    number?: true
    createdAt?: true
    expiration?: true
    isVerified?: true
    userId?: true
  }

  export type ValidationNumberMaxAggregateInputType = {
    id?: true
    number?: true
    createdAt?: true
    expiration?: true
    isVerified?: true
    userId?: true
  }

  export type ValidationNumberCountAggregateInputType = {
    id?: true
    number?: true
    createdAt?: true
    expiration?: true
    isVerified?: true
    userId?: true
    _all?: true
  }

  export type ValidationNumberAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ValidationNumber to aggregate.
     */
    where?: ValidationNumberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ValidationNumbers to fetch.
     */
    orderBy?: ValidationNumberOrderByWithRelationInput | ValidationNumberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ValidationNumberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ValidationNumbers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ValidationNumbers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ValidationNumbers
    **/
    _count?: true | ValidationNumberCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ValidationNumberAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ValidationNumberSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ValidationNumberMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ValidationNumberMaxAggregateInputType
  }

  export type GetValidationNumberAggregateType<T extends ValidationNumberAggregateArgs> = {
        [P in keyof T & keyof AggregateValidationNumber]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateValidationNumber[P]>
      : GetScalarType<T[P], AggregateValidationNumber[P]>
  }




  export type ValidationNumberGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ValidationNumberWhereInput
    orderBy?: ValidationNumberOrderByWithAggregationInput | ValidationNumberOrderByWithAggregationInput[]
    by: ValidationNumberScalarFieldEnum[] | ValidationNumberScalarFieldEnum
    having?: ValidationNumberScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ValidationNumberCountAggregateInputType | true
    _avg?: ValidationNumberAvgAggregateInputType
    _sum?: ValidationNumberSumAggregateInputType
    _min?: ValidationNumberMinAggregateInputType
    _max?: ValidationNumberMaxAggregateInputType
  }

  export type ValidationNumberGroupByOutputType = {
    id: string
    number: string
    createdAt: Date
    expiration: bigint
    isVerified: boolean
    userId: string
    _count: ValidationNumberCountAggregateOutputType | null
    _avg: ValidationNumberAvgAggregateOutputType | null
    _sum: ValidationNumberSumAggregateOutputType | null
    _min: ValidationNumberMinAggregateOutputType | null
    _max: ValidationNumberMaxAggregateOutputType | null
  }

  type GetValidationNumberGroupByPayload<T extends ValidationNumberGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ValidationNumberGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ValidationNumberGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ValidationNumberGroupByOutputType[P]>
            : GetScalarType<T[P], ValidationNumberGroupByOutputType[P]>
        }
      >
    >


  export type ValidationNumberSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    number?: boolean
    createdAt?: boolean
    expiration?: boolean
    isVerified?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["validationNumber"]>

  export type ValidationNumberSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    number?: boolean
    createdAt?: boolean
    expiration?: boolean
    isVerified?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["validationNumber"]>

  export type ValidationNumberSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    number?: boolean
    createdAt?: boolean
    expiration?: boolean
    isVerified?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["validationNumber"]>

  export type ValidationNumberSelectScalar = {
    id?: boolean
    number?: boolean
    createdAt?: boolean
    expiration?: boolean
    isVerified?: boolean
    userId?: boolean
  }

  export type ValidationNumberOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "number" | "createdAt" | "expiration" | "isVerified" | "userId", ExtArgs["result"]["validationNumber"]>
  export type ValidationNumberInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ValidationNumberIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ValidationNumberIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ValidationNumberPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ValidationNumber"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      number: string
      createdAt: Date
      expiration: bigint
      isVerified: boolean
      userId: string
    }, ExtArgs["result"]["validationNumber"]>
    composites: {}
  }

  type ValidationNumberGetPayload<S extends boolean | null | undefined | ValidationNumberDefaultArgs> = $Result.GetResult<Prisma.$ValidationNumberPayload, S>

  type ValidationNumberCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ValidationNumberFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ValidationNumberCountAggregateInputType | true
    }

  export interface ValidationNumberDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ValidationNumber'], meta: { name: 'ValidationNumber' } }
    /**
     * Find zero or one ValidationNumber that matches the filter.
     * @param {ValidationNumberFindUniqueArgs} args - Arguments to find a ValidationNumber
     * @example
     * // Get one ValidationNumber
     * const validationNumber = await prisma.validationNumber.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ValidationNumberFindUniqueArgs>(args: SelectSubset<T, ValidationNumberFindUniqueArgs<ExtArgs>>): Prisma__ValidationNumberClient<$Result.GetResult<Prisma.$ValidationNumberPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one ValidationNumber that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ValidationNumberFindUniqueOrThrowArgs} args - Arguments to find a ValidationNumber
     * @example
     * // Get one ValidationNumber
     * const validationNumber = await prisma.validationNumber.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ValidationNumberFindUniqueOrThrowArgs>(args: SelectSubset<T, ValidationNumberFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ValidationNumberClient<$Result.GetResult<Prisma.$ValidationNumberPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first ValidationNumber that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ValidationNumberFindFirstArgs} args - Arguments to find a ValidationNumber
     * @example
     * // Get one ValidationNumber
     * const validationNumber = await prisma.validationNumber.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ValidationNumberFindFirstArgs>(args?: SelectSubset<T, ValidationNumberFindFirstArgs<ExtArgs>>): Prisma__ValidationNumberClient<$Result.GetResult<Prisma.$ValidationNumberPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first ValidationNumber that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ValidationNumberFindFirstOrThrowArgs} args - Arguments to find a ValidationNumber
     * @example
     * // Get one ValidationNumber
     * const validationNumber = await prisma.validationNumber.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ValidationNumberFindFirstOrThrowArgs>(args?: SelectSubset<T, ValidationNumberFindFirstOrThrowArgs<ExtArgs>>): Prisma__ValidationNumberClient<$Result.GetResult<Prisma.$ValidationNumberPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more ValidationNumbers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ValidationNumberFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ValidationNumbers
     * const validationNumbers = await prisma.validationNumber.findMany()
     * 
     * // Get first 10 ValidationNumbers
     * const validationNumbers = await prisma.validationNumber.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const validationNumberWithIdOnly = await prisma.validationNumber.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ValidationNumberFindManyArgs>(args?: SelectSubset<T, ValidationNumberFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ValidationNumberPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a ValidationNumber.
     * @param {ValidationNumberCreateArgs} args - Arguments to create a ValidationNumber.
     * @example
     * // Create one ValidationNumber
     * const ValidationNumber = await prisma.validationNumber.create({
     *   data: {
     *     // ... data to create a ValidationNumber
     *   }
     * })
     * 
     */
    create<T extends ValidationNumberCreateArgs>(args: SelectSubset<T, ValidationNumberCreateArgs<ExtArgs>>): Prisma__ValidationNumberClient<$Result.GetResult<Prisma.$ValidationNumberPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many ValidationNumbers.
     * @param {ValidationNumberCreateManyArgs} args - Arguments to create many ValidationNumbers.
     * @example
     * // Create many ValidationNumbers
     * const validationNumber = await prisma.validationNumber.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ValidationNumberCreateManyArgs>(args?: SelectSubset<T, ValidationNumberCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ValidationNumbers and returns the data saved in the database.
     * @param {ValidationNumberCreateManyAndReturnArgs} args - Arguments to create many ValidationNumbers.
     * @example
     * // Create many ValidationNumbers
     * const validationNumber = await prisma.validationNumber.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ValidationNumbers and only return the `id`
     * const validationNumberWithIdOnly = await prisma.validationNumber.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ValidationNumberCreateManyAndReturnArgs>(args?: SelectSubset<T, ValidationNumberCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ValidationNumberPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a ValidationNumber.
     * @param {ValidationNumberDeleteArgs} args - Arguments to delete one ValidationNumber.
     * @example
     * // Delete one ValidationNumber
     * const ValidationNumber = await prisma.validationNumber.delete({
     *   where: {
     *     // ... filter to delete one ValidationNumber
     *   }
     * })
     * 
     */
    delete<T extends ValidationNumberDeleteArgs>(args: SelectSubset<T, ValidationNumberDeleteArgs<ExtArgs>>): Prisma__ValidationNumberClient<$Result.GetResult<Prisma.$ValidationNumberPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one ValidationNumber.
     * @param {ValidationNumberUpdateArgs} args - Arguments to update one ValidationNumber.
     * @example
     * // Update one ValidationNumber
     * const validationNumber = await prisma.validationNumber.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ValidationNumberUpdateArgs>(args: SelectSubset<T, ValidationNumberUpdateArgs<ExtArgs>>): Prisma__ValidationNumberClient<$Result.GetResult<Prisma.$ValidationNumberPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more ValidationNumbers.
     * @param {ValidationNumberDeleteManyArgs} args - Arguments to filter ValidationNumbers to delete.
     * @example
     * // Delete a few ValidationNumbers
     * const { count } = await prisma.validationNumber.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ValidationNumberDeleteManyArgs>(args?: SelectSubset<T, ValidationNumberDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ValidationNumbers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ValidationNumberUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ValidationNumbers
     * const validationNumber = await prisma.validationNumber.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ValidationNumberUpdateManyArgs>(args: SelectSubset<T, ValidationNumberUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ValidationNumbers and returns the data updated in the database.
     * @param {ValidationNumberUpdateManyAndReturnArgs} args - Arguments to update many ValidationNumbers.
     * @example
     * // Update many ValidationNumbers
     * const validationNumber = await prisma.validationNumber.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ValidationNumbers and only return the `id`
     * const validationNumberWithIdOnly = await prisma.validationNumber.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ValidationNumberUpdateManyAndReturnArgs>(args: SelectSubset<T, ValidationNumberUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ValidationNumberPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one ValidationNumber.
     * @param {ValidationNumberUpsertArgs} args - Arguments to update or create a ValidationNumber.
     * @example
     * // Update or create a ValidationNumber
     * const validationNumber = await prisma.validationNumber.upsert({
     *   create: {
     *     // ... data to create a ValidationNumber
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ValidationNumber we want to update
     *   }
     * })
     */
    upsert<T extends ValidationNumberUpsertArgs>(args: SelectSubset<T, ValidationNumberUpsertArgs<ExtArgs>>): Prisma__ValidationNumberClient<$Result.GetResult<Prisma.$ValidationNumberPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of ValidationNumbers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ValidationNumberCountArgs} args - Arguments to filter ValidationNumbers to count.
     * @example
     * // Count the number of ValidationNumbers
     * const count = await prisma.validationNumber.count({
     *   where: {
     *     // ... the filter for the ValidationNumbers we want to count
     *   }
     * })
    **/
    count<T extends ValidationNumberCountArgs>(
      args?: Subset<T, ValidationNumberCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ValidationNumberCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ValidationNumber.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ValidationNumberAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ValidationNumberAggregateArgs>(args: Subset<T, ValidationNumberAggregateArgs>): Prisma.PrismaPromise<GetValidationNumberAggregateType<T>>

    /**
     * Group by ValidationNumber.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ValidationNumberGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ValidationNumberGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ValidationNumberGroupByArgs['orderBy'] }
        : { orderBy?: ValidationNumberGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ValidationNumberGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetValidationNumberGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ValidationNumber model
   */
  readonly fields: ValidationNumberFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ValidationNumber.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ValidationNumberClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ValidationNumber model
   */ 
  interface ValidationNumberFieldRefs {
    readonly id: FieldRef<"ValidationNumber", 'String'>
    readonly number: FieldRef<"ValidationNumber", 'String'>
    readonly createdAt: FieldRef<"ValidationNumber", 'DateTime'>
    readonly expiration: FieldRef<"ValidationNumber", 'BigInt'>
    readonly isVerified: FieldRef<"ValidationNumber", 'Boolean'>
    readonly userId: FieldRef<"ValidationNumber", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ValidationNumber findUnique
   */
  export type ValidationNumberFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValidationNumber
     */
    select?: ValidationNumberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ValidationNumber
     */
    omit?: ValidationNumberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationNumberInclude<ExtArgs> | null
    /**
     * Filter, which ValidationNumber to fetch.
     */
    where: ValidationNumberWhereUniqueInput
  }

  /**
   * ValidationNumber findUniqueOrThrow
   */
  export type ValidationNumberFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValidationNumber
     */
    select?: ValidationNumberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ValidationNumber
     */
    omit?: ValidationNumberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationNumberInclude<ExtArgs> | null
    /**
     * Filter, which ValidationNumber to fetch.
     */
    where: ValidationNumberWhereUniqueInput
  }

  /**
   * ValidationNumber findFirst
   */
  export type ValidationNumberFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValidationNumber
     */
    select?: ValidationNumberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ValidationNumber
     */
    omit?: ValidationNumberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationNumberInclude<ExtArgs> | null
    /**
     * Filter, which ValidationNumber to fetch.
     */
    where?: ValidationNumberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ValidationNumbers to fetch.
     */
    orderBy?: ValidationNumberOrderByWithRelationInput | ValidationNumberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ValidationNumbers.
     */
    cursor?: ValidationNumberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ValidationNumbers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ValidationNumbers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ValidationNumbers.
     */
    distinct?: ValidationNumberScalarFieldEnum | ValidationNumberScalarFieldEnum[]
  }

  /**
   * ValidationNumber findFirstOrThrow
   */
  export type ValidationNumberFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValidationNumber
     */
    select?: ValidationNumberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ValidationNumber
     */
    omit?: ValidationNumberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationNumberInclude<ExtArgs> | null
    /**
     * Filter, which ValidationNumber to fetch.
     */
    where?: ValidationNumberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ValidationNumbers to fetch.
     */
    orderBy?: ValidationNumberOrderByWithRelationInput | ValidationNumberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ValidationNumbers.
     */
    cursor?: ValidationNumberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ValidationNumbers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ValidationNumbers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ValidationNumbers.
     */
    distinct?: ValidationNumberScalarFieldEnum | ValidationNumberScalarFieldEnum[]
  }

  /**
   * ValidationNumber findMany
   */
  export type ValidationNumberFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValidationNumber
     */
    select?: ValidationNumberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ValidationNumber
     */
    omit?: ValidationNumberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationNumberInclude<ExtArgs> | null
    /**
     * Filter, which ValidationNumbers to fetch.
     */
    where?: ValidationNumberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ValidationNumbers to fetch.
     */
    orderBy?: ValidationNumberOrderByWithRelationInput | ValidationNumberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ValidationNumbers.
     */
    cursor?: ValidationNumberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ValidationNumbers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ValidationNumbers.
     */
    skip?: number
    distinct?: ValidationNumberScalarFieldEnum | ValidationNumberScalarFieldEnum[]
  }

  /**
   * ValidationNumber create
   */
  export type ValidationNumberCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValidationNumber
     */
    select?: ValidationNumberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ValidationNumber
     */
    omit?: ValidationNumberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationNumberInclude<ExtArgs> | null
    /**
     * The data needed to create a ValidationNumber.
     */
    data: XOR<ValidationNumberCreateInput, ValidationNumberUncheckedCreateInput>
  }

  /**
   * ValidationNumber createMany
   */
  export type ValidationNumberCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ValidationNumbers.
     */
    data: ValidationNumberCreateManyInput | ValidationNumberCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ValidationNumber createManyAndReturn
   */
  export type ValidationNumberCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValidationNumber
     */
    select?: ValidationNumberSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ValidationNumber
     */
    omit?: ValidationNumberOmit<ExtArgs> | null
    /**
     * The data used to create many ValidationNumbers.
     */
    data: ValidationNumberCreateManyInput | ValidationNumberCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationNumberIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ValidationNumber update
   */
  export type ValidationNumberUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValidationNumber
     */
    select?: ValidationNumberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ValidationNumber
     */
    omit?: ValidationNumberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationNumberInclude<ExtArgs> | null
    /**
     * The data needed to update a ValidationNumber.
     */
    data: XOR<ValidationNumberUpdateInput, ValidationNumberUncheckedUpdateInput>
    /**
     * Choose, which ValidationNumber to update.
     */
    where: ValidationNumberWhereUniqueInput
  }

  /**
   * ValidationNumber updateMany
   */
  export type ValidationNumberUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ValidationNumbers.
     */
    data: XOR<ValidationNumberUpdateManyMutationInput, ValidationNumberUncheckedUpdateManyInput>
    /**
     * Filter which ValidationNumbers to update
     */
    where?: ValidationNumberWhereInput
    /**
     * Limit how many ValidationNumbers to update.
     */
    limit?: number
  }

  /**
   * ValidationNumber updateManyAndReturn
   */
  export type ValidationNumberUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValidationNumber
     */
    select?: ValidationNumberSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ValidationNumber
     */
    omit?: ValidationNumberOmit<ExtArgs> | null
    /**
     * The data used to update ValidationNumbers.
     */
    data: XOR<ValidationNumberUpdateManyMutationInput, ValidationNumberUncheckedUpdateManyInput>
    /**
     * Filter which ValidationNumbers to update
     */
    where?: ValidationNumberWhereInput
    /**
     * Limit how many ValidationNumbers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationNumberIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ValidationNumber upsert
   */
  export type ValidationNumberUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValidationNumber
     */
    select?: ValidationNumberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ValidationNumber
     */
    omit?: ValidationNumberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationNumberInclude<ExtArgs> | null
    /**
     * The filter to search for the ValidationNumber to update in case it exists.
     */
    where: ValidationNumberWhereUniqueInput
    /**
     * In case the ValidationNumber found by the `where` argument doesn't exist, create a new ValidationNumber with this data.
     */
    create: XOR<ValidationNumberCreateInput, ValidationNumberUncheckedCreateInput>
    /**
     * In case the ValidationNumber was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ValidationNumberUpdateInput, ValidationNumberUncheckedUpdateInput>
  }

  /**
   * ValidationNumber delete
   */
  export type ValidationNumberDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValidationNumber
     */
    select?: ValidationNumberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ValidationNumber
     */
    omit?: ValidationNumberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationNumberInclude<ExtArgs> | null
    /**
     * Filter which ValidationNumber to delete.
     */
    where: ValidationNumberWhereUniqueInput
  }

  /**
   * ValidationNumber deleteMany
   */
  export type ValidationNumberDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ValidationNumbers to delete
     */
    where?: ValidationNumberWhereInput
    /**
     * Limit how many ValidationNumbers to delete.
     */
    limit?: number
  }

  /**
   * ValidationNumber without action
   */
  export type ValidationNumberDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValidationNumber
     */
    select?: ValidationNumberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ValidationNumber
     */
    omit?: ValidationNumberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationNumberInclude<ExtArgs> | null
  }


  /**
   * Model userForsqlInjection
   */

  export type AggregateUserForsqlInjection = {
    _count: UserForsqlInjectionCountAggregateOutputType | null
    _min: UserForsqlInjectionMinAggregateOutputType | null
    _max: UserForsqlInjectionMaxAggregateOutputType | null
  }

  export type UserForsqlInjectionMinAggregateOutputType = {
    id: string | null
    username: string | null
    password: string | null
  }

  export type UserForsqlInjectionMaxAggregateOutputType = {
    id: string | null
    username: string | null
    password: string | null
  }

  export type UserForsqlInjectionCountAggregateOutputType = {
    id: number
    username: number
    password: number
    _all: number
  }


  export type UserForsqlInjectionMinAggregateInputType = {
    id?: true
    username?: true
    password?: true
  }

  export type UserForsqlInjectionMaxAggregateInputType = {
    id?: true
    username?: true
    password?: true
  }

  export type UserForsqlInjectionCountAggregateInputType = {
    id?: true
    username?: true
    password?: true
    _all?: true
  }

  export type UserForsqlInjectionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which userForsqlInjection to aggregate.
     */
    where?: userForsqlInjectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of userForsqlInjections to fetch.
     */
    orderBy?: userForsqlInjectionOrderByWithRelationInput | userForsqlInjectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: userForsqlInjectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` userForsqlInjections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` userForsqlInjections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned userForsqlInjections
    **/
    _count?: true | UserForsqlInjectionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserForsqlInjectionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserForsqlInjectionMaxAggregateInputType
  }

  export type GetUserForsqlInjectionAggregateType<T extends UserForsqlInjectionAggregateArgs> = {
        [P in keyof T & keyof AggregateUserForsqlInjection]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserForsqlInjection[P]>
      : GetScalarType<T[P], AggregateUserForsqlInjection[P]>
  }




  export type userForsqlInjectionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: userForsqlInjectionWhereInput
    orderBy?: userForsqlInjectionOrderByWithAggregationInput | userForsqlInjectionOrderByWithAggregationInput[]
    by: UserForsqlInjectionScalarFieldEnum[] | UserForsqlInjectionScalarFieldEnum
    having?: userForsqlInjectionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserForsqlInjectionCountAggregateInputType | true
    _min?: UserForsqlInjectionMinAggregateInputType
    _max?: UserForsqlInjectionMaxAggregateInputType
  }

  export type UserForsqlInjectionGroupByOutputType = {
    id: string
    username: string | null
    password: string
    _count: UserForsqlInjectionCountAggregateOutputType | null
    _min: UserForsqlInjectionMinAggregateOutputType | null
    _max: UserForsqlInjectionMaxAggregateOutputType | null
  }

  type GetUserForsqlInjectionGroupByPayload<T extends userForsqlInjectionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserForsqlInjectionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserForsqlInjectionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserForsqlInjectionGroupByOutputType[P]>
            : GetScalarType<T[P], UserForsqlInjectionGroupByOutputType[P]>
        }
      >
    >


  export type userForsqlInjectionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    password?: boolean
  }, ExtArgs["result"]["userForsqlInjection"]>

  export type userForsqlInjectionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    password?: boolean
  }, ExtArgs["result"]["userForsqlInjection"]>

  export type userForsqlInjectionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    password?: boolean
  }, ExtArgs["result"]["userForsqlInjection"]>

  export type userForsqlInjectionSelectScalar = {
    id?: boolean
    username?: boolean
    password?: boolean
  }

  export type userForsqlInjectionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "username" | "password", ExtArgs["result"]["userForsqlInjection"]>

  export type $userForsqlInjectionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "userForsqlInjection"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      username: string | null
      password: string
    }, ExtArgs["result"]["userForsqlInjection"]>
    composites: {}
  }

  type userForsqlInjectionGetPayload<S extends boolean | null | undefined | userForsqlInjectionDefaultArgs> = $Result.GetResult<Prisma.$userForsqlInjectionPayload, S>

  type userForsqlInjectionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<userForsqlInjectionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserForsqlInjectionCountAggregateInputType | true
    }

  export interface userForsqlInjectionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['userForsqlInjection'], meta: { name: 'userForsqlInjection' } }
    /**
     * Find zero or one UserForsqlInjection that matches the filter.
     * @param {userForsqlInjectionFindUniqueArgs} args - Arguments to find a UserForsqlInjection
     * @example
     * // Get one UserForsqlInjection
     * const userForsqlInjection = await prisma.userForsqlInjection.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends userForsqlInjectionFindUniqueArgs>(args: SelectSubset<T, userForsqlInjectionFindUniqueArgs<ExtArgs>>): Prisma__userForsqlInjectionClient<$Result.GetResult<Prisma.$userForsqlInjectionPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one UserForsqlInjection that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {userForsqlInjectionFindUniqueOrThrowArgs} args - Arguments to find a UserForsqlInjection
     * @example
     * // Get one UserForsqlInjection
     * const userForsqlInjection = await prisma.userForsqlInjection.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends userForsqlInjectionFindUniqueOrThrowArgs>(args: SelectSubset<T, userForsqlInjectionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__userForsqlInjectionClient<$Result.GetResult<Prisma.$userForsqlInjectionPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first UserForsqlInjection that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userForsqlInjectionFindFirstArgs} args - Arguments to find a UserForsqlInjection
     * @example
     * // Get one UserForsqlInjection
     * const userForsqlInjection = await prisma.userForsqlInjection.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends userForsqlInjectionFindFirstArgs>(args?: SelectSubset<T, userForsqlInjectionFindFirstArgs<ExtArgs>>): Prisma__userForsqlInjectionClient<$Result.GetResult<Prisma.$userForsqlInjectionPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first UserForsqlInjection that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userForsqlInjectionFindFirstOrThrowArgs} args - Arguments to find a UserForsqlInjection
     * @example
     * // Get one UserForsqlInjection
     * const userForsqlInjection = await prisma.userForsqlInjection.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends userForsqlInjectionFindFirstOrThrowArgs>(args?: SelectSubset<T, userForsqlInjectionFindFirstOrThrowArgs<ExtArgs>>): Prisma__userForsqlInjectionClient<$Result.GetResult<Prisma.$userForsqlInjectionPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more UserForsqlInjections that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userForsqlInjectionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserForsqlInjections
     * const userForsqlInjections = await prisma.userForsqlInjection.findMany()
     * 
     * // Get first 10 UserForsqlInjections
     * const userForsqlInjections = await prisma.userForsqlInjection.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userForsqlInjectionWithIdOnly = await prisma.userForsqlInjection.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends userForsqlInjectionFindManyArgs>(args?: SelectSubset<T, userForsqlInjectionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$userForsqlInjectionPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a UserForsqlInjection.
     * @param {userForsqlInjectionCreateArgs} args - Arguments to create a UserForsqlInjection.
     * @example
     * // Create one UserForsqlInjection
     * const UserForsqlInjection = await prisma.userForsqlInjection.create({
     *   data: {
     *     // ... data to create a UserForsqlInjection
     *   }
     * })
     * 
     */
    create<T extends userForsqlInjectionCreateArgs>(args: SelectSubset<T, userForsqlInjectionCreateArgs<ExtArgs>>): Prisma__userForsqlInjectionClient<$Result.GetResult<Prisma.$userForsqlInjectionPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many UserForsqlInjections.
     * @param {userForsqlInjectionCreateManyArgs} args - Arguments to create many UserForsqlInjections.
     * @example
     * // Create many UserForsqlInjections
     * const userForsqlInjection = await prisma.userForsqlInjection.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends userForsqlInjectionCreateManyArgs>(args?: SelectSubset<T, userForsqlInjectionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserForsqlInjections and returns the data saved in the database.
     * @param {userForsqlInjectionCreateManyAndReturnArgs} args - Arguments to create many UserForsqlInjections.
     * @example
     * // Create many UserForsqlInjections
     * const userForsqlInjection = await prisma.userForsqlInjection.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserForsqlInjections and only return the `id`
     * const userForsqlInjectionWithIdOnly = await prisma.userForsqlInjection.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends userForsqlInjectionCreateManyAndReturnArgs>(args?: SelectSubset<T, userForsqlInjectionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$userForsqlInjectionPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a UserForsqlInjection.
     * @param {userForsqlInjectionDeleteArgs} args - Arguments to delete one UserForsqlInjection.
     * @example
     * // Delete one UserForsqlInjection
     * const UserForsqlInjection = await prisma.userForsqlInjection.delete({
     *   where: {
     *     // ... filter to delete one UserForsqlInjection
     *   }
     * })
     * 
     */
    delete<T extends userForsqlInjectionDeleteArgs>(args: SelectSubset<T, userForsqlInjectionDeleteArgs<ExtArgs>>): Prisma__userForsqlInjectionClient<$Result.GetResult<Prisma.$userForsqlInjectionPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one UserForsqlInjection.
     * @param {userForsqlInjectionUpdateArgs} args - Arguments to update one UserForsqlInjection.
     * @example
     * // Update one UserForsqlInjection
     * const userForsqlInjection = await prisma.userForsqlInjection.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends userForsqlInjectionUpdateArgs>(args: SelectSubset<T, userForsqlInjectionUpdateArgs<ExtArgs>>): Prisma__userForsqlInjectionClient<$Result.GetResult<Prisma.$userForsqlInjectionPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more UserForsqlInjections.
     * @param {userForsqlInjectionDeleteManyArgs} args - Arguments to filter UserForsqlInjections to delete.
     * @example
     * // Delete a few UserForsqlInjections
     * const { count } = await prisma.userForsqlInjection.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends userForsqlInjectionDeleteManyArgs>(args?: SelectSubset<T, userForsqlInjectionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserForsqlInjections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userForsqlInjectionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserForsqlInjections
     * const userForsqlInjection = await prisma.userForsqlInjection.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends userForsqlInjectionUpdateManyArgs>(args: SelectSubset<T, userForsqlInjectionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserForsqlInjections and returns the data updated in the database.
     * @param {userForsqlInjectionUpdateManyAndReturnArgs} args - Arguments to update many UserForsqlInjections.
     * @example
     * // Update many UserForsqlInjections
     * const userForsqlInjection = await prisma.userForsqlInjection.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserForsqlInjections and only return the `id`
     * const userForsqlInjectionWithIdOnly = await prisma.userForsqlInjection.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends userForsqlInjectionUpdateManyAndReturnArgs>(args: SelectSubset<T, userForsqlInjectionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$userForsqlInjectionPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one UserForsqlInjection.
     * @param {userForsqlInjectionUpsertArgs} args - Arguments to update or create a UserForsqlInjection.
     * @example
     * // Update or create a UserForsqlInjection
     * const userForsqlInjection = await prisma.userForsqlInjection.upsert({
     *   create: {
     *     // ... data to create a UserForsqlInjection
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserForsqlInjection we want to update
     *   }
     * })
     */
    upsert<T extends userForsqlInjectionUpsertArgs>(args: SelectSubset<T, userForsqlInjectionUpsertArgs<ExtArgs>>): Prisma__userForsqlInjectionClient<$Result.GetResult<Prisma.$userForsqlInjectionPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of UserForsqlInjections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userForsqlInjectionCountArgs} args - Arguments to filter UserForsqlInjections to count.
     * @example
     * // Count the number of UserForsqlInjections
     * const count = await prisma.userForsqlInjection.count({
     *   where: {
     *     // ... the filter for the UserForsqlInjections we want to count
     *   }
     * })
    **/
    count<T extends userForsqlInjectionCountArgs>(
      args?: Subset<T, userForsqlInjectionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserForsqlInjectionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserForsqlInjection.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserForsqlInjectionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserForsqlInjectionAggregateArgs>(args: Subset<T, UserForsqlInjectionAggregateArgs>): Prisma.PrismaPromise<GetUserForsqlInjectionAggregateType<T>>

    /**
     * Group by UserForsqlInjection.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userForsqlInjectionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends userForsqlInjectionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: userForsqlInjectionGroupByArgs['orderBy'] }
        : { orderBy?: userForsqlInjectionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, userForsqlInjectionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserForsqlInjectionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the userForsqlInjection model
   */
  readonly fields: userForsqlInjectionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for userForsqlInjection.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__userForsqlInjectionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the userForsqlInjection model
   */ 
  interface userForsqlInjectionFieldRefs {
    readonly id: FieldRef<"userForsqlInjection", 'String'>
    readonly username: FieldRef<"userForsqlInjection", 'String'>
    readonly password: FieldRef<"userForsqlInjection", 'String'>
  }
    

  // Custom InputTypes
  /**
   * userForsqlInjection findUnique
   */
  export type userForsqlInjectionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userForsqlInjection
     */
    select?: userForsqlInjectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the userForsqlInjection
     */
    omit?: userForsqlInjectionOmit<ExtArgs> | null
    /**
     * Filter, which userForsqlInjection to fetch.
     */
    where: userForsqlInjectionWhereUniqueInput
  }

  /**
   * userForsqlInjection findUniqueOrThrow
   */
  export type userForsqlInjectionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userForsqlInjection
     */
    select?: userForsqlInjectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the userForsqlInjection
     */
    omit?: userForsqlInjectionOmit<ExtArgs> | null
    /**
     * Filter, which userForsqlInjection to fetch.
     */
    where: userForsqlInjectionWhereUniqueInput
  }

  /**
   * userForsqlInjection findFirst
   */
  export type userForsqlInjectionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userForsqlInjection
     */
    select?: userForsqlInjectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the userForsqlInjection
     */
    omit?: userForsqlInjectionOmit<ExtArgs> | null
    /**
     * Filter, which userForsqlInjection to fetch.
     */
    where?: userForsqlInjectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of userForsqlInjections to fetch.
     */
    orderBy?: userForsqlInjectionOrderByWithRelationInput | userForsqlInjectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for userForsqlInjections.
     */
    cursor?: userForsqlInjectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` userForsqlInjections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` userForsqlInjections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of userForsqlInjections.
     */
    distinct?: UserForsqlInjectionScalarFieldEnum | UserForsqlInjectionScalarFieldEnum[]
  }

  /**
   * userForsqlInjection findFirstOrThrow
   */
  export type userForsqlInjectionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userForsqlInjection
     */
    select?: userForsqlInjectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the userForsqlInjection
     */
    omit?: userForsqlInjectionOmit<ExtArgs> | null
    /**
     * Filter, which userForsqlInjection to fetch.
     */
    where?: userForsqlInjectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of userForsqlInjections to fetch.
     */
    orderBy?: userForsqlInjectionOrderByWithRelationInput | userForsqlInjectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for userForsqlInjections.
     */
    cursor?: userForsqlInjectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` userForsqlInjections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` userForsqlInjections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of userForsqlInjections.
     */
    distinct?: UserForsqlInjectionScalarFieldEnum | UserForsqlInjectionScalarFieldEnum[]
  }

  /**
   * userForsqlInjection findMany
   */
  export type userForsqlInjectionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userForsqlInjection
     */
    select?: userForsqlInjectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the userForsqlInjection
     */
    omit?: userForsqlInjectionOmit<ExtArgs> | null
    /**
     * Filter, which userForsqlInjections to fetch.
     */
    where?: userForsqlInjectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of userForsqlInjections to fetch.
     */
    orderBy?: userForsqlInjectionOrderByWithRelationInput | userForsqlInjectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing userForsqlInjections.
     */
    cursor?: userForsqlInjectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` userForsqlInjections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` userForsqlInjections.
     */
    skip?: number
    distinct?: UserForsqlInjectionScalarFieldEnum | UserForsqlInjectionScalarFieldEnum[]
  }

  /**
   * userForsqlInjection create
   */
  export type userForsqlInjectionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userForsqlInjection
     */
    select?: userForsqlInjectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the userForsqlInjection
     */
    omit?: userForsqlInjectionOmit<ExtArgs> | null
    /**
     * The data needed to create a userForsqlInjection.
     */
    data: XOR<userForsqlInjectionCreateInput, userForsqlInjectionUncheckedCreateInput>
  }

  /**
   * userForsqlInjection createMany
   */
  export type userForsqlInjectionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many userForsqlInjections.
     */
    data: userForsqlInjectionCreateManyInput | userForsqlInjectionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * userForsqlInjection createManyAndReturn
   */
  export type userForsqlInjectionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userForsqlInjection
     */
    select?: userForsqlInjectionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the userForsqlInjection
     */
    omit?: userForsqlInjectionOmit<ExtArgs> | null
    /**
     * The data used to create many userForsqlInjections.
     */
    data: userForsqlInjectionCreateManyInput | userForsqlInjectionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * userForsqlInjection update
   */
  export type userForsqlInjectionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userForsqlInjection
     */
    select?: userForsqlInjectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the userForsqlInjection
     */
    omit?: userForsqlInjectionOmit<ExtArgs> | null
    /**
     * The data needed to update a userForsqlInjection.
     */
    data: XOR<userForsqlInjectionUpdateInput, userForsqlInjectionUncheckedUpdateInput>
    /**
     * Choose, which userForsqlInjection to update.
     */
    where: userForsqlInjectionWhereUniqueInput
  }

  /**
   * userForsqlInjection updateMany
   */
  export type userForsqlInjectionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update userForsqlInjections.
     */
    data: XOR<userForsqlInjectionUpdateManyMutationInput, userForsqlInjectionUncheckedUpdateManyInput>
    /**
     * Filter which userForsqlInjections to update
     */
    where?: userForsqlInjectionWhereInput
    /**
     * Limit how many userForsqlInjections to update.
     */
    limit?: number
  }

  /**
   * userForsqlInjection updateManyAndReturn
   */
  export type userForsqlInjectionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userForsqlInjection
     */
    select?: userForsqlInjectionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the userForsqlInjection
     */
    omit?: userForsqlInjectionOmit<ExtArgs> | null
    /**
     * The data used to update userForsqlInjections.
     */
    data: XOR<userForsqlInjectionUpdateManyMutationInput, userForsqlInjectionUncheckedUpdateManyInput>
    /**
     * Filter which userForsqlInjections to update
     */
    where?: userForsqlInjectionWhereInput
    /**
     * Limit how many userForsqlInjections to update.
     */
    limit?: number
  }

  /**
   * userForsqlInjection upsert
   */
  export type userForsqlInjectionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userForsqlInjection
     */
    select?: userForsqlInjectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the userForsqlInjection
     */
    omit?: userForsqlInjectionOmit<ExtArgs> | null
    /**
     * The filter to search for the userForsqlInjection to update in case it exists.
     */
    where: userForsqlInjectionWhereUniqueInput
    /**
     * In case the userForsqlInjection found by the `where` argument doesn't exist, create a new userForsqlInjection with this data.
     */
    create: XOR<userForsqlInjectionCreateInput, userForsqlInjectionUncheckedCreateInput>
    /**
     * In case the userForsqlInjection was found with the provided `where` argument, update it with this data.
     */
    update: XOR<userForsqlInjectionUpdateInput, userForsqlInjectionUncheckedUpdateInput>
  }

  /**
   * userForsqlInjection delete
   */
  export type userForsqlInjectionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userForsqlInjection
     */
    select?: userForsqlInjectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the userForsqlInjection
     */
    omit?: userForsqlInjectionOmit<ExtArgs> | null
    /**
     * Filter which userForsqlInjection to delete.
     */
    where: userForsqlInjectionWhereUniqueInput
  }

  /**
   * userForsqlInjection deleteMany
   */
  export type userForsqlInjectionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which userForsqlInjections to delete
     */
    where?: userForsqlInjectionWhereInput
    /**
     * Limit how many userForsqlInjections to delete.
     */
    limit?: number
  }

  /**
   * userForsqlInjection without action
   */
  export type userForsqlInjectionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userForsqlInjection
     */
    select?: userForsqlInjectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the userForsqlInjection
     */
    omit?: userForsqlInjectionOmit<ExtArgs> | null
  }


  /**
   * Model userForXSS
   */

  export type AggregateUserForXSS = {
    _count: UserForXSSCountAggregateOutputType | null
    _min: UserForXSSMinAggregateOutputType | null
    _max: UserForXSSMaxAggregateOutputType | null
  }

  export type UserForXSSMinAggregateOutputType = {
    id: string | null
    email: string | null
  }

  export type UserForXSSMaxAggregateOutputType = {
    id: string | null
    email: string | null
  }

  export type UserForXSSCountAggregateOutputType = {
    id: number
    email: number
    _all: number
  }


  export type UserForXSSMinAggregateInputType = {
    id?: true
    email?: true
  }

  export type UserForXSSMaxAggregateInputType = {
    id?: true
    email?: true
  }

  export type UserForXSSCountAggregateInputType = {
    id?: true
    email?: true
    _all?: true
  }

  export type UserForXSSAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which userForXSS to aggregate.
     */
    where?: userForXSSWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of userForXSSES to fetch.
     */
    orderBy?: userForXSSOrderByWithRelationInput | userForXSSOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: userForXSSWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` userForXSSES from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` userForXSSES.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned userForXSSES
    **/
    _count?: true | UserForXSSCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserForXSSMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserForXSSMaxAggregateInputType
  }

  export type GetUserForXSSAggregateType<T extends UserForXSSAggregateArgs> = {
        [P in keyof T & keyof AggregateUserForXSS]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserForXSS[P]>
      : GetScalarType<T[P], AggregateUserForXSS[P]>
  }




  export type userForXSSGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: userForXSSWhereInput
    orderBy?: userForXSSOrderByWithAggregationInput | userForXSSOrderByWithAggregationInput[]
    by: UserForXSSScalarFieldEnum[] | UserForXSSScalarFieldEnum
    having?: userForXSSScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserForXSSCountAggregateInputType | true
    _min?: UserForXSSMinAggregateInputType
    _max?: UserForXSSMaxAggregateInputType
  }

  export type UserForXSSGroupByOutputType = {
    id: string
    email: string
    _count: UserForXSSCountAggregateOutputType | null
    _min: UserForXSSMinAggregateOutputType | null
    _max: UserForXSSMaxAggregateOutputType | null
  }

  type GetUserForXSSGroupByPayload<T extends userForXSSGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserForXSSGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserForXSSGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserForXSSGroupByOutputType[P]>
            : GetScalarType<T[P], UserForXSSGroupByOutputType[P]>
        }
      >
    >


  export type userForXSSSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    posts?: boolean | userForXSS$postsArgs<ExtArgs>
    _count?: boolean | UserForXSSCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userForXSS"]>

  export type userForXSSSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
  }, ExtArgs["result"]["userForXSS"]>

  export type userForXSSSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
  }, ExtArgs["result"]["userForXSS"]>

  export type userForXSSSelectScalar = {
    id?: boolean
    email?: boolean
  }

  export type userForXSSOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email", ExtArgs["result"]["userForXSS"]>
  export type userForXSSInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    posts?: boolean | userForXSS$postsArgs<ExtArgs>
    _count?: boolean | UserForXSSCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type userForXSSIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type userForXSSIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $userForXSSPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "userForXSS"
    objects: {
      posts: Prisma.$PostPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
    }, ExtArgs["result"]["userForXSS"]>
    composites: {}
  }

  type userForXSSGetPayload<S extends boolean | null | undefined | userForXSSDefaultArgs> = $Result.GetResult<Prisma.$userForXSSPayload, S>

  type userForXSSCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<userForXSSFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserForXSSCountAggregateInputType | true
    }

  export interface userForXSSDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['userForXSS'], meta: { name: 'userForXSS' } }
    /**
     * Find zero or one UserForXSS that matches the filter.
     * @param {userForXSSFindUniqueArgs} args - Arguments to find a UserForXSS
     * @example
     * // Get one UserForXSS
     * const userForXSS = await prisma.userForXSS.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends userForXSSFindUniqueArgs>(args: SelectSubset<T, userForXSSFindUniqueArgs<ExtArgs>>): Prisma__userForXSSClient<$Result.GetResult<Prisma.$userForXSSPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one UserForXSS that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {userForXSSFindUniqueOrThrowArgs} args - Arguments to find a UserForXSS
     * @example
     * // Get one UserForXSS
     * const userForXSS = await prisma.userForXSS.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends userForXSSFindUniqueOrThrowArgs>(args: SelectSubset<T, userForXSSFindUniqueOrThrowArgs<ExtArgs>>): Prisma__userForXSSClient<$Result.GetResult<Prisma.$userForXSSPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first UserForXSS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userForXSSFindFirstArgs} args - Arguments to find a UserForXSS
     * @example
     * // Get one UserForXSS
     * const userForXSS = await prisma.userForXSS.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends userForXSSFindFirstArgs>(args?: SelectSubset<T, userForXSSFindFirstArgs<ExtArgs>>): Prisma__userForXSSClient<$Result.GetResult<Prisma.$userForXSSPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first UserForXSS that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userForXSSFindFirstOrThrowArgs} args - Arguments to find a UserForXSS
     * @example
     * // Get one UserForXSS
     * const userForXSS = await prisma.userForXSS.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends userForXSSFindFirstOrThrowArgs>(args?: SelectSubset<T, userForXSSFindFirstOrThrowArgs<ExtArgs>>): Prisma__userForXSSClient<$Result.GetResult<Prisma.$userForXSSPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more UserForXSSES that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userForXSSFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserForXSSES
     * const userForXSSES = await prisma.userForXSS.findMany()
     * 
     * // Get first 10 UserForXSSES
     * const userForXSSES = await prisma.userForXSS.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userForXSSWithIdOnly = await prisma.userForXSS.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends userForXSSFindManyArgs>(args?: SelectSubset<T, userForXSSFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$userForXSSPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a UserForXSS.
     * @param {userForXSSCreateArgs} args - Arguments to create a UserForXSS.
     * @example
     * // Create one UserForXSS
     * const UserForXSS = await prisma.userForXSS.create({
     *   data: {
     *     // ... data to create a UserForXSS
     *   }
     * })
     * 
     */
    create<T extends userForXSSCreateArgs>(args: SelectSubset<T, userForXSSCreateArgs<ExtArgs>>): Prisma__userForXSSClient<$Result.GetResult<Prisma.$userForXSSPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many UserForXSSES.
     * @param {userForXSSCreateManyArgs} args - Arguments to create many UserForXSSES.
     * @example
     * // Create many UserForXSSES
     * const userForXSS = await prisma.userForXSS.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends userForXSSCreateManyArgs>(args?: SelectSubset<T, userForXSSCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserForXSSES and returns the data saved in the database.
     * @param {userForXSSCreateManyAndReturnArgs} args - Arguments to create many UserForXSSES.
     * @example
     * // Create many UserForXSSES
     * const userForXSS = await prisma.userForXSS.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserForXSSES and only return the `id`
     * const userForXSSWithIdOnly = await prisma.userForXSS.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends userForXSSCreateManyAndReturnArgs>(args?: SelectSubset<T, userForXSSCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$userForXSSPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a UserForXSS.
     * @param {userForXSSDeleteArgs} args - Arguments to delete one UserForXSS.
     * @example
     * // Delete one UserForXSS
     * const UserForXSS = await prisma.userForXSS.delete({
     *   where: {
     *     // ... filter to delete one UserForXSS
     *   }
     * })
     * 
     */
    delete<T extends userForXSSDeleteArgs>(args: SelectSubset<T, userForXSSDeleteArgs<ExtArgs>>): Prisma__userForXSSClient<$Result.GetResult<Prisma.$userForXSSPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one UserForXSS.
     * @param {userForXSSUpdateArgs} args - Arguments to update one UserForXSS.
     * @example
     * // Update one UserForXSS
     * const userForXSS = await prisma.userForXSS.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends userForXSSUpdateArgs>(args: SelectSubset<T, userForXSSUpdateArgs<ExtArgs>>): Prisma__userForXSSClient<$Result.GetResult<Prisma.$userForXSSPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more UserForXSSES.
     * @param {userForXSSDeleteManyArgs} args - Arguments to filter UserForXSSES to delete.
     * @example
     * // Delete a few UserForXSSES
     * const { count } = await prisma.userForXSS.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends userForXSSDeleteManyArgs>(args?: SelectSubset<T, userForXSSDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserForXSSES.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userForXSSUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserForXSSES
     * const userForXSS = await prisma.userForXSS.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends userForXSSUpdateManyArgs>(args: SelectSubset<T, userForXSSUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserForXSSES and returns the data updated in the database.
     * @param {userForXSSUpdateManyAndReturnArgs} args - Arguments to update many UserForXSSES.
     * @example
     * // Update many UserForXSSES
     * const userForXSS = await prisma.userForXSS.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserForXSSES and only return the `id`
     * const userForXSSWithIdOnly = await prisma.userForXSS.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends userForXSSUpdateManyAndReturnArgs>(args: SelectSubset<T, userForXSSUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$userForXSSPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one UserForXSS.
     * @param {userForXSSUpsertArgs} args - Arguments to update or create a UserForXSS.
     * @example
     * // Update or create a UserForXSS
     * const userForXSS = await prisma.userForXSS.upsert({
     *   create: {
     *     // ... data to create a UserForXSS
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserForXSS we want to update
     *   }
     * })
     */
    upsert<T extends userForXSSUpsertArgs>(args: SelectSubset<T, userForXSSUpsertArgs<ExtArgs>>): Prisma__userForXSSClient<$Result.GetResult<Prisma.$userForXSSPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of UserForXSSES.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userForXSSCountArgs} args - Arguments to filter UserForXSSES to count.
     * @example
     * // Count the number of UserForXSSES
     * const count = await prisma.userForXSS.count({
     *   where: {
     *     // ... the filter for the UserForXSSES we want to count
     *   }
     * })
    **/
    count<T extends userForXSSCountArgs>(
      args?: Subset<T, userForXSSCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserForXSSCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserForXSS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserForXSSAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserForXSSAggregateArgs>(args: Subset<T, UserForXSSAggregateArgs>): Prisma.PrismaPromise<GetUserForXSSAggregateType<T>>

    /**
     * Group by UserForXSS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userForXSSGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends userForXSSGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: userForXSSGroupByArgs['orderBy'] }
        : { orderBy?: userForXSSGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, userForXSSGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserForXSSGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the userForXSS model
   */
  readonly fields: userForXSSFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for userForXSS.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__userForXSSClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    posts<T extends userForXSS$postsArgs<ExtArgs> = {}>(args?: Subset<T, userForXSS$postsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the userForXSS model
   */ 
  interface userForXSSFieldRefs {
    readonly id: FieldRef<"userForXSS", 'String'>
    readonly email: FieldRef<"userForXSS", 'String'>
  }
    

  // Custom InputTypes
  /**
   * userForXSS findUnique
   */
  export type userForXSSFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userForXSS
     */
    select?: userForXSSSelect<ExtArgs> | null
    /**
     * Omit specific fields from the userForXSS
     */
    omit?: userForXSSOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userForXSSInclude<ExtArgs> | null
    /**
     * Filter, which userForXSS to fetch.
     */
    where: userForXSSWhereUniqueInput
  }

  /**
   * userForXSS findUniqueOrThrow
   */
  export type userForXSSFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userForXSS
     */
    select?: userForXSSSelect<ExtArgs> | null
    /**
     * Omit specific fields from the userForXSS
     */
    omit?: userForXSSOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userForXSSInclude<ExtArgs> | null
    /**
     * Filter, which userForXSS to fetch.
     */
    where: userForXSSWhereUniqueInput
  }

  /**
   * userForXSS findFirst
   */
  export type userForXSSFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userForXSS
     */
    select?: userForXSSSelect<ExtArgs> | null
    /**
     * Omit specific fields from the userForXSS
     */
    omit?: userForXSSOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userForXSSInclude<ExtArgs> | null
    /**
     * Filter, which userForXSS to fetch.
     */
    where?: userForXSSWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of userForXSSES to fetch.
     */
    orderBy?: userForXSSOrderByWithRelationInput | userForXSSOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for userForXSSES.
     */
    cursor?: userForXSSWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` userForXSSES from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` userForXSSES.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of userForXSSES.
     */
    distinct?: UserForXSSScalarFieldEnum | UserForXSSScalarFieldEnum[]
  }

  /**
   * userForXSS findFirstOrThrow
   */
  export type userForXSSFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userForXSS
     */
    select?: userForXSSSelect<ExtArgs> | null
    /**
     * Omit specific fields from the userForXSS
     */
    omit?: userForXSSOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userForXSSInclude<ExtArgs> | null
    /**
     * Filter, which userForXSS to fetch.
     */
    where?: userForXSSWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of userForXSSES to fetch.
     */
    orderBy?: userForXSSOrderByWithRelationInput | userForXSSOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for userForXSSES.
     */
    cursor?: userForXSSWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` userForXSSES from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` userForXSSES.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of userForXSSES.
     */
    distinct?: UserForXSSScalarFieldEnum | UserForXSSScalarFieldEnum[]
  }

  /**
   * userForXSS findMany
   */
  export type userForXSSFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userForXSS
     */
    select?: userForXSSSelect<ExtArgs> | null
    /**
     * Omit specific fields from the userForXSS
     */
    omit?: userForXSSOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userForXSSInclude<ExtArgs> | null
    /**
     * Filter, which userForXSSES to fetch.
     */
    where?: userForXSSWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of userForXSSES to fetch.
     */
    orderBy?: userForXSSOrderByWithRelationInput | userForXSSOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing userForXSSES.
     */
    cursor?: userForXSSWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` userForXSSES from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` userForXSSES.
     */
    skip?: number
    distinct?: UserForXSSScalarFieldEnum | UserForXSSScalarFieldEnum[]
  }

  /**
   * userForXSS create
   */
  export type userForXSSCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userForXSS
     */
    select?: userForXSSSelect<ExtArgs> | null
    /**
     * Omit specific fields from the userForXSS
     */
    omit?: userForXSSOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userForXSSInclude<ExtArgs> | null
    /**
     * The data needed to create a userForXSS.
     */
    data: XOR<userForXSSCreateInput, userForXSSUncheckedCreateInput>
  }

  /**
   * userForXSS createMany
   */
  export type userForXSSCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many userForXSSES.
     */
    data: userForXSSCreateManyInput | userForXSSCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * userForXSS createManyAndReturn
   */
  export type userForXSSCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userForXSS
     */
    select?: userForXSSSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the userForXSS
     */
    omit?: userForXSSOmit<ExtArgs> | null
    /**
     * The data used to create many userForXSSES.
     */
    data: userForXSSCreateManyInput | userForXSSCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * userForXSS update
   */
  export type userForXSSUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userForXSS
     */
    select?: userForXSSSelect<ExtArgs> | null
    /**
     * Omit specific fields from the userForXSS
     */
    omit?: userForXSSOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userForXSSInclude<ExtArgs> | null
    /**
     * The data needed to update a userForXSS.
     */
    data: XOR<userForXSSUpdateInput, userForXSSUncheckedUpdateInput>
    /**
     * Choose, which userForXSS to update.
     */
    where: userForXSSWhereUniqueInput
  }

  /**
   * userForXSS updateMany
   */
  export type userForXSSUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update userForXSSES.
     */
    data: XOR<userForXSSUpdateManyMutationInput, userForXSSUncheckedUpdateManyInput>
    /**
     * Filter which userForXSSES to update
     */
    where?: userForXSSWhereInput
    /**
     * Limit how many userForXSSES to update.
     */
    limit?: number
  }

  /**
   * userForXSS updateManyAndReturn
   */
  export type userForXSSUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userForXSS
     */
    select?: userForXSSSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the userForXSS
     */
    omit?: userForXSSOmit<ExtArgs> | null
    /**
     * The data used to update userForXSSES.
     */
    data: XOR<userForXSSUpdateManyMutationInput, userForXSSUncheckedUpdateManyInput>
    /**
     * Filter which userForXSSES to update
     */
    where?: userForXSSWhereInput
    /**
     * Limit how many userForXSSES to update.
     */
    limit?: number
  }

  /**
   * userForXSS upsert
   */
  export type userForXSSUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userForXSS
     */
    select?: userForXSSSelect<ExtArgs> | null
    /**
     * Omit specific fields from the userForXSS
     */
    omit?: userForXSSOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userForXSSInclude<ExtArgs> | null
    /**
     * The filter to search for the userForXSS to update in case it exists.
     */
    where: userForXSSWhereUniqueInput
    /**
     * In case the userForXSS found by the `where` argument doesn't exist, create a new userForXSS with this data.
     */
    create: XOR<userForXSSCreateInput, userForXSSUncheckedCreateInput>
    /**
     * In case the userForXSS was found with the provided `where` argument, update it with this data.
     */
    update: XOR<userForXSSUpdateInput, userForXSSUncheckedUpdateInput>
  }

  /**
   * userForXSS delete
   */
  export type userForXSSDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userForXSS
     */
    select?: userForXSSSelect<ExtArgs> | null
    /**
     * Omit specific fields from the userForXSS
     */
    omit?: userForXSSOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userForXSSInclude<ExtArgs> | null
    /**
     * Filter which userForXSS to delete.
     */
    where: userForXSSWhereUniqueInput
  }

  /**
   * userForXSS deleteMany
   */
  export type userForXSSDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which userForXSSES to delete
     */
    where?: userForXSSWhereInput
    /**
     * Limit how many userForXSSES to delete.
     */
    limit?: number
  }

  /**
   * userForXSS.posts
   */
  export type userForXSS$postsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    where?: PostWhereInput
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    cursor?: PostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * userForXSS without action
   */
  export type userForXSSDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userForXSS
     */
    select?: userForXSSSelect<ExtArgs> | null
    /**
     * Omit specific fields from the userForXSS
     */
    omit?: userForXSSOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userForXSSInclude<ExtArgs> | null
  }


  /**
   * Model File
   */

  export type AggregateFile = {
    _count: FileCountAggregateOutputType | null
    _min: FileMinAggregateOutputType | null
    _max: FileMaxAggregateOutputType | null
  }

  export type FileMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    name: string | null
    path: string | null
    mimetype: string | null
    userId: string | null
  }

  export type FileMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    name: string | null
    path: string | null
    mimetype: string | null
    userId: string | null
  }

  export type FileCountAggregateOutputType = {
    id: number
    createdAt: number
    name: number
    path: number
    mimetype: number
    userId: number
    _all: number
  }


  export type FileMinAggregateInputType = {
    id?: true
    createdAt?: true
    name?: true
    path?: true
    mimetype?: true
    userId?: true
  }

  export type FileMaxAggregateInputType = {
    id?: true
    createdAt?: true
    name?: true
    path?: true
    mimetype?: true
    userId?: true
  }

  export type FileCountAggregateInputType = {
    id?: true
    createdAt?: true
    name?: true
    path?: true
    mimetype?: true
    userId?: true
    _all?: true
  }

  export type FileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which File to aggregate.
     */
    where?: FileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Files
    **/
    _count?: true | FileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FileMaxAggregateInputType
  }

  export type GetFileAggregateType<T extends FileAggregateArgs> = {
        [P in keyof T & keyof AggregateFile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFile[P]>
      : GetScalarType<T[P], AggregateFile[P]>
  }




  export type FileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FileWhereInput
    orderBy?: FileOrderByWithAggregationInput | FileOrderByWithAggregationInput[]
    by: FileScalarFieldEnum[] | FileScalarFieldEnum
    having?: FileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FileCountAggregateInputType | true
    _min?: FileMinAggregateInputType
    _max?: FileMaxAggregateInputType
  }

  export type FileGroupByOutputType = {
    id: string
    createdAt: Date
    name: string
    path: string
    mimetype: string
    userId: string
    _count: FileCountAggregateOutputType | null
    _min: FileMinAggregateOutputType | null
    _max: FileMaxAggregateOutputType | null
  }

  type GetFileGroupByPayload<T extends FileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FileGroupByOutputType[P]>
            : GetScalarType<T[P], FileGroupByOutputType[P]>
        }
      >
    >


  export type FileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    name?: boolean
    path?: boolean
    mimetype?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["file"]>

  export type FileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    name?: boolean
    path?: boolean
    mimetype?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["file"]>

  export type FileSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    name?: boolean
    path?: boolean
    mimetype?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["file"]>

  export type FileSelectScalar = {
    id?: boolean
    createdAt?: boolean
    name?: boolean
    path?: boolean
    mimetype?: boolean
    userId?: boolean
  }

  export type FileOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "createdAt" | "name" | "path" | "mimetype" | "userId", ExtArgs["result"]["file"]>
  export type FileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type FileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type FileIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $FilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "File"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      name: string
      path: string
      mimetype: string
      userId: string
    }, ExtArgs["result"]["file"]>
    composites: {}
  }

  type FileGetPayload<S extends boolean | null | undefined | FileDefaultArgs> = $Result.GetResult<Prisma.$FilePayload, S>

  type FileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FileCountAggregateInputType | true
    }

  export interface FileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['File'], meta: { name: 'File' } }
    /**
     * Find zero or one File that matches the filter.
     * @param {FileFindUniqueArgs} args - Arguments to find a File
     * @example
     * // Get one File
     * const file = await prisma.file.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FileFindUniqueArgs>(args: SelectSubset<T, FileFindUniqueArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one File that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FileFindUniqueOrThrowArgs} args - Arguments to find a File
     * @example
     * // Get one File
     * const file = await prisma.file.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FileFindUniqueOrThrowArgs>(args: SelectSubset<T, FileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first File that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileFindFirstArgs} args - Arguments to find a File
     * @example
     * // Get one File
     * const file = await prisma.file.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FileFindFirstArgs>(args?: SelectSubset<T, FileFindFirstArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first File that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileFindFirstOrThrowArgs} args - Arguments to find a File
     * @example
     * // Get one File
     * const file = await prisma.file.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FileFindFirstOrThrowArgs>(args?: SelectSubset<T, FileFindFirstOrThrowArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Files that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Files
     * const files = await prisma.file.findMany()
     * 
     * // Get first 10 Files
     * const files = await prisma.file.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fileWithIdOnly = await prisma.file.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FileFindManyArgs>(args?: SelectSubset<T, FileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a File.
     * @param {FileCreateArgs} args - Arguments to create a File.
     * @example
     * // Create one File
     * const File = await prisma.file.create({
     *   data: {
     *     // ... data to create a File
     *   }
     * })
     * 
     */
    create<T extends FileCreateArgs>(args: SelectSubset<T, FileCreateArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Files.
     * @param {FileCreateManyArgs} args - Arguments to create many Files.
     * @example
     * // Create many Files
     * const file = await prisma.file.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FileCreateManyArgs>(args?: SelectSubset<T, FileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Files and returns the data saved in the database.
     * @param {FileCreateManyAndReturnArgs} args - Arguments to create many Files.
     * @example
     * // Create many Files
     * const file = await prisma.file.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Files and only return the `id`
     * const fileWithIdOnly = await prisma.file.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FileCreateManyAndReturnArgs>(args?: SelectSubset<T, FileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a File.
     * @param {FileDeleteArgs} args - Arguments to delete one File.
     * @example
     * // Delete one File
     * const File = await prisma.file.delete({
     *   where: {
     *     // ... filter to delete one File
     *   }
     * })
     * 
     */
    delete<T extends FileDeleteArgs>(args: SelectSubset<T, FileDeleteArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one File.
     * @param {FileUpdateArgs} args - Arguments to update one File.
     * @example
     * // Update one File
     * const file = await prisma.file.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FileUpdateArgs>(args: SelectSubset<T, FileUpdateArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Files.
     * @param {FileDeleteManyArgs} args - Arguments to filter Files to delete.
     * @example
     * // Delete a few Files
     * const { count } = await prisma.file.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FileDeleteManyArgs>(args?: SelectSubset<T, FileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Files.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Files
     * const file = await prisma.file.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FileUpdateManyArgs>(args: SelectSubset<T, FileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Files and returns the data updated in the database.
     * @param {FileUpdateManyAndReturnArgs} args - Arguments to update many Files.
     * @example
     * // Update many Files
     * const file = await prisma.file.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Files and only return the `id`
     * const fileWithIdOnly = await prisma.file.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FileUpdateManyAndReturnArgs>(args: SelectSubset<T, FileUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one File.
     * @param {FileUpsertArgs} args - Arguments to update or create a File.
     * @example
     * // Update or create a File
     * const file = await prisma.file.upsert({
     *   create: {
     *     // ... data to create a File
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the File we want to update
     *   }
     * })
     */
    upsert<T extends FileUpsertArgs>(args: SelectSubset<T, FileUpsertArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Files.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileCountArgs} args - Arguments to filter Files to count.
     * @example
     * // Count the number of Files
     * const count = await prisma.file.count({
     *   where: {
     *     // ... the filter for the Files we want to count
     *   }
     * })
    **/
    count<T extends FileCountArgs>(
      args?: Subset<T, FileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a File.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FileAggregateArgs>(args: Subset<T, FileAggregateArgs>): Prisma.PrismaPromise<GetFileAggregateType<T>>

    /**
     * Group by File.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FileGroupByArgs['orderBy'] }
        : { orderBy?: FileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the File model
   */
  readonly fields: FileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for File.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the File model
   */ 
  interface FileFieldRefs {
    readonly id: FieldRef<"File", 'String'>
    readonly createdAt: FieldRef<"File", 'DateTime'>
    readonly name: FieldRef<"File", 'String'>
    readonly path: FieldRef<"File", 'String'>
    readonly mimetype: FieldRef<"File", 'String'>
    readonly userId: FieldRef<"File", 'String'>
  }
    

  // Custom InputTypes
  /**
   * File findUnique
   */
  export type FileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which File to fetch.
     */
    where: FileWhereUniqueInput
  }

  /**
   * File findUniqueOrThrow
   */
  export type FileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which File to fetch.
     */
    where: FileWhereUniqueInput
  }

  /**
   * File findFirst
   */
  export type FileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which File to fetch.
     */
    where?: FileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Files.
     */
    cursor?: FileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Files.
     */
    distinct?: FileScalarFieldEnum | FileScalarFieldEnum[]
  }

  /**
   * File findFirstOrThrow
   */
  export type FileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which File to fetch.
     */
    where?: FileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Files.
     */
    cursor?: FileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Files.
     */
    distinct?: FileScalarFieldEnum | FileScalarFieldEnum[]
  }

  /**
   * File findMany
   */
  export type FileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which Files to fetch.
     */
    where?: FileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Files.
     */
    cursor?: FileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    distinct?: FileScalarFieldEnum | FileScalarFieldEnum[]
  }

  /**
   * File create
   */
  export type FileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * The data needed to create a File.
     */
    data: XOR<FileCreateInput, FileUncheckedCreateInput>
  }

  /**
   * File createMany
   */
  export type FileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Files.
     */
    data: FileCreateManyInput | FileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * File createManyAndReturn
   */
  export type FileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * The data used to create many Files.
     */
    data: FileCreateManyInput | FileCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * File update
   */
  export type FileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * The data needed to update a File.
     */
    data: XOR<FileUpdateInput, FileUncheckedUpdateInput>
    /**
     * Choose, which File to update.
     */
    where: FileWhereUniqueInput
  }

  /**
   * File updateMany
   */
  export type FileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Files.
     */
    data: XOR<FileUpdateManyMutationInput, FileUncheckedUpdateManyInput>
    /**
     * Filter which Files to update
     */
    where?: FileWhereInput
    /**
     * Limit how many Files to update.
     */
    limit?: number
  }

  /**
   * File updateManyAndReturn
   */
  export type FileUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * The data used to update Files.
     */
    data: XOR<FileUpdateManyMutationInput, FileUncheckedUpdateManyInput>
    /**
     * Filter which Files to update
     */
    where?: FileWhereInput
    /**
     * Limit how many Files to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * File upsert
   */
  export type FileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * The filter to search for the File to update in case it exists.
     */
    where: FileWhereUniqueInput
    /**
     * In case the File found by the `where` argument doesn't exist, create a new File with this data.
     */
    create: XOR<FileCreateInput, FileUncheckedCreateInput>
    /**
     * In case the File was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FileUpdateInput, FileUncheckedUpdateInput>
  }

  /**
   * File delete
   */
  export type FileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter which File to delete.
     */
    where: FileWhereUniqueInput
  }

  /**
   * File deleteMany
   */
  export type FileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Files to delete
     */
    where?: FileWhereInput
    /**
     * Limit how many Files to delete.
     */
    limit?: number
  }

  /**
   * File without action
   */
  export type FileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
  }


  /**
   * Model Lab1IDORS
   */

  export type AggregateLab1IDORS = {
    _count: Lab1IDORSCountAggregateOutputType | null
    _avg: Lab1IDORSAvgAggregateOutputType | null
    _sum: Lab1IDORSSumAggregateOutputType | null
    _min: Lab1IDORSMinAggregateOutputType | null
    _max: Lab1IDORSMaxAggregateOutputType | null
  }

  export type Lab1IDORSAvgAggregateOutputType = {
    id: number | null
  }

  export type Lab1IDORSSumAggregateOutputType = {
    id: number | null
  }

  export type Lab1IDORSMinAggregateOutputType = {
    id: number | null
    path: string | null
  }

  export type Lab1IDORSMaxAggregateOutputType = {
    id: number | null
    path: string | null
  }

  export type Lab1IDORSCountAggregateOutputType = {
    id: number
    path: number
    _all: number
  }


  export type Lab1IDORSAvgAggregateInputType = {
    id?: true
  }

  export type Lab1IDORSSumAggregateInputType = {
    id?: true
  }

  export type Lab1IDORSMinAggregateInputType = {
    id?: true
    path?: true
  }

  export type Lab1IDORSMaxAggregateInputType = {
    id?: true
    path?: true
  }

  export type Lab1IDORSCountAggregateInputType = {
    id?: true
    path?: true
    _all?: true
  }

  export type Lab1IDORSAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Lab1IDORS to aggregate.
     */
    where?: Lab1IDORSWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lab1IDORS to fetch.
     */
    orderBy?: Lab1IDORSOrderByWithRelationInput | Lab1IDORSOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Lab1IDORSWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lab1IDORS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lab1IDORS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Lab1IDORS
    **/
    _count?: true | Lab1IDORSCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Lab1IDORSAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Lab1IDORSSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Lab1IDORSMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Lab1IDORSMaxAggregateInputType
  }

  export type GetLab1IDORSAggregateType<T extends Lab1IDORSAggregateArgs> = {
        [P in keyof T & keyof AggregateLab1IDORS]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLab1IDORS[P]>
      : GetScalarType<T[P], AggregateLab1IDORS[P]>
  }




  export type Lab1IDORSGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Lab1IDORSWhereInput
    orderBy?: Lab1IDORSOrderByWithAggregationInput | Lab1IDORSOrderByWithAggregationInput[]
    by: Lab1IDORSScalarFieldEnum[] | Lab1IDORSScalarFieldEnum
    having?: Lab1IDORSScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Lab1IDORSCountAggregateInputType | true
    _avg?: Lab1IDORSAvgAggregateInputType
    _sum?: Lab1IDORSSumAggregateInputType
    _min?: Lab1IDORSMinAggregateInputType
    _max?: Lab1IDORSMaxAggregateInputType
  }

  export type Lab1IDORSGroupByOutputType = {
    id: number
    path: string | null
    _count: Lab1IDORSCountAggregateOutputType | null
    _avg: Lab1IDORSAvgAggregateOutputType | null
    _sum: Lab1IDORSSumAggregateOutputType | null
    _min: Lab1IDORSMinAggregateOutputType | null
    _max: Lab1IDORSMaxAggregateOutputType | null
  }

  type GetLab1IDORSGroupByPayload<T extends Lab1IDORSGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Lab1IDORSGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Lab1IDORSGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Lab1IDORSGroupByOutputType[P]>
            : GetScalarType<T[P], Lab1IDORSGroupByOutputType[P]>
        }
      >
    >


  export type Lab1IDORSSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    path?: boolean
  }, ExtArgs["result"]["lab1IDORS"]>

  export type Lab1IDORSSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    path?: boolean
  }, ExtArgs["result"]["lab1IDORS"]>

  export type Lab1IDORSSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    path?: boolean
  }, ExtArgs["result"]["lab1IDORS"]>

  export type Lab1IDORSSelectScalar = {
    id?: boolean
    path?: boolean
  }

  export type Lab1IDORSOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "path", ExtArgs["result"]["lab1IDORS"]>

  export type $Lab1IDORSPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Lab1IDORS"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      path: string | null
    }, ExtArgs["result"]["lab1IDORS"]>
    composites: {}
  }

  type Lab1IDORSGetPayload<S extends boolean | null | undefined | Lab1IDORSDefaultArgs> = $Result.GetResult<Prisma.$Lab1IDORSPayload, S>

  type Lab1IDORSCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<Lab1IDORSFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Lab1IDORSCountAggregateInputType | true
    }

  export interface Lab1IDORSDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Lab1IDORS'], meta: { name: 'Lab1IDORS' } }
    /**
     * Find zero or one Lab1IDORS that matches the filter.
     * @param {Lab1IDORSFindUniqueArgs} args - Arguments to find a Lab1IDORS
     * @example
     * // Get one Lab1IDORS
     * const lab1IDORS = await prisma.lab1IDORS.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends Lab1IDORSFindUniqueArgs>(args: SelectSubset<T, Lab1IDORSFindUniqueArgs<ExtArgs>>): Prisma__Lab1IDORSClient<$Result.GetResult<Prisma.$Lab1IDORSPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Lab1IDORS that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {Lab1IDORSFindUniqueOrThrowArgs} args - Arguments to find a Lab1IDORS
     * @example
     * // Get one Lab1IDORS
     * const lab1IDORS = await prisma.lab1IDORS.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends Lab1IDORSFindUniqueOrThrowArgs>(args: SelectSubset<T, Lab1IDORSFindUniqueOrThrowArgs<ExtArgs>>): Prisma__Lab1IDORSClient<$Result.GetResult<Prisma.$Lab1IDORSPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Lab1IDORS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Lab1IDORSFindFirstArgs} args - Arguments to find a Lab1IDORS
     * @example
     * // Get one Lab1IDORS
     * const lab1IDORS = await prisma.lab1IDORS.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends Lab1IDORSFindFirstArgs>(args?: SelectSubset<T, Lab1IDORSFindFirstArgs<ExtArgs>>): Prisma__Lab1IDORSClient<$Result.GetResult<Prisma.$Lab1IDORSPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Lab1IDORS that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Lab1IDORSFindFirstOrThrowArgs} args - Arguments to find a Lab1IDORS
     * @example
     * // Get one Lab1IDORS
     * const lab1IDORS = await prisma.lab1IDORS.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends Lab1IDORSFindFirstOrThrowArgs>(args?: SelectSubset<T, Lab1IDORSFindFirstOrThrowArgs<ExtArgs>>): Prisma__Lab1IDORSClient<$Result.GetResult<Prisma.$Lab1IDORSPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Lab1IDORS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Lab1IDORSFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Lab1IDORS
     * const lab1IDORS = await prisma.lab1IDORS.findMany()
     * 
     * // Get first 10 Lab1IDORS
     * const lab1IDORS = await prisma.lab1IDORS.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const lab1IDORSWithIdOnly = await prisma.lab1IDORS.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends Lab1IDORSFindManyArgs>(args?: SelectSubset<T, Lab1IDORSFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Lab1IDORSPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Lab1IDORS.
     * @param {Lab1IDORSCreateArgs} args - Arguments to create a Lab1IDORS.
     * @example
     * // Create one Lab1IDORS
     * const Lab1IDORS = await prisma.lab1IDORS.create({
     *   data: {
     *     // ... data to create a Lab1IDORS
     *   }
     * })
     * 
     */
    create<T extends Lab1IDORSCreateArgs>(args: SelectSubset<T, Lab1IDORSCreateArgs<ExtArgs>>): Prisma__Lab1IDORSClient<$Result.GetResult<Prisma.$Lab1IDORSPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Lab1IDORS.
     * @param {Lab1IDORSCreateManyArgs} args - Arguments to create many Lab1IDORS.
     * @example
     * // Create many Lab1IDORS
     * const lab1IDORS = await prisma.lab1IDORS.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends Lab1IDORSCreateManyArgs>(args?: SelectSubset<T, Lab1IDORSCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Lab1IDORS and returns the data saved in the database.
     * @param {Lab1IDORSCreateManyAndReturnArgs} args - Arguments to create many Lab1IDORS.
     * @example
     * // Create many Lab1IDORS
     * const lab1IDORS = await prisma.lab1IDORS.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Lab1IDORS and only return the `id`
     * const lab1IDORSWithIdOnly = await prisma.lab1IDORS.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends Lab1IDORSCreateManyAndReturnArgs>(args?: SelectSubset<T, Lab1IDORSCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Lab1IDORSPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Lab1IDORS.
     * @param {Lab1IDORSDeleteArgs} args - Arguments to delete one Lab1IDORS.
     * @example
     * // Delete one Lab1IDORS
     * const Lab1IDORS = await prisma.lab1IDORS.delete({
     *   where: {
     *     // ... filter to delete one Lab1IDORS
     *   }
     * })
     * 
     */
    delete<T extends Lab1IDORSDeleteArgs>(args: SelectSubset<T, Lab1IDORSDeleteArgs<ExtArgs>>): Prisma__Lab1IDORSClient<$Result.GetResult<Prisma.$Lab1IDORSPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Lab1IDORS.
     * @param {Lab1IDORSUpdateArgs} args - Arguments to update one Lab1IDORS.
     * @example
     * // Update one Lab1IDORS
     * const lab1IDORS = await prisma.lab1IDORS.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends Lab1IDORSUpdateArgs>(args: SelectSubset<T, Lab1IDORSUpdateArgs<ExtArgs>>): Prisma__Lab1IDORSClient<$Result.GetResult<Prisma.$Lab1IDORSPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Lab1IDORS.
     * @param {Lab1IDORSDeleteManyArgs} args - Arguments to filter Lab1IDORS to delete.
     * @example
     * // Delete a few Lab1IDORS
     * const { count } = await prisma.lab1IDORS.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends Lab1IDORSDeleteManyArgs>(args?: SelectSubset<T, Lab1IDORSDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Lab1IDORS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Lab1IDORSUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Lab1IDORS
     * const lab1IDORS = await prisma.lab1IDORS.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends Lab1IDORSUpdateManyArgs>(args: SelectSubset<T, Lab1IDORSUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Lab1IDORS and returns the data updated in the database.
     * @param {Lab1IDORSUpdateManyAndReturnArgs} args - Arguments to update many Lab1IDORS.
     * @example
     * // Update many Lab1IDORS
     * const lab1IDORS = await prisma.lab1IDORS.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Lab1IDORS and only return the `id`
     * const lab1IDORSWithIdOnly = await prisma.lab1IDORS.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends Lab1IDORSUpdateManyAndReturnArgs>(args: SelectSubset<T, Lab1IDORSUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Lab1IDORSPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Lab1IDORS.
     * @param {Lab1IDORSUpsertArgs} args - Arguments to update or create a Lab1IDORS.
     * @example
     * // Update or create a Lab1IDORS
     * const lab1IDORS = await prisma.lab1IDORS.upsert({
     *   create: {
     *     // ... data to create a Lab1IDORS
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Lab1IDORS we want to update
     *   }
     * })
     */
    upsert<T extends Lab1IDORSUpsertArgs>(args: SelectSubset<T, Lab1IDORSUpsertArgs<ExtArgs>>): Prisma__Lab1IDORSClient<$Result.GetResult<Prisma.$Lab1IDORSPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Lab1IDORS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Lab1IDORSCountArgs} args - Arguments to filter Lab1IDORS to count.
     * @example
     * // Count the number of Lab1IDORS
     * const count = await prisma.lab1IDORS.count({
     *   where: {
     *     // ... the filter for the Lab1IDORS we want to count
     *   }
     * })
    **/
    count<T extends Lab1IDORSCountArgs>(
      args?: Subset<T, Lab1IDORSCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Lab1IDORSCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Lab1IDORS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Lab1IDORSAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Lab1IDORSAggregateArgs>(args: Subset<T, Lab1IDORSAggregateArgs>): Prisma.PrismaPromise<GetLab1IDORSAggregateType<T>>

    /**
     * Group by Lab1IDORS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Lab1IDORSGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Lab1IDORSGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Lab1IDORSGroupByArgs['orderBy'] }
        : { orderBy?: Lab1IDORSGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Lab1IDORSGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLab1IDORSGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Lab1IDORS model
   */
  readonly fields: Lab1IDORSFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Lab1IDORS.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Lab1IDORSClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Lab1IDORS model
   */ 
  interface Lab1IDORSFieldRefs {
    readonly id: FieldRef<"Lab1IDORS", 'Int'>
    readonly path: FieldRef<"Lab1IDORS", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Lab1IDORS findUnique
   */
  export type Lab1IDORSFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lab1IDORS
     */
    select?: Lab1IDORSSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lab1IDORS
     */
    omit?: Lab1IDORSOmit<ExtArgs> | null
    /**
     * Filter, which Lab1IDORS to fetch.
     */
    where: Lab1IDORSWhereUniqueInput
  }

  /**
   * Lab1IDORS findUniqueOrThrow
   */
  export type Lab1IDORSFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lab1IDORS
     */
    select?: Lab1IDORSSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lab1IDORS
     */
    omit?: Lab1IDORSOmit<ExtArgs> | null
    /**
     * Filter, which Lab1IDORS to fetch.
     */
    where: Lab1IDORSWhereUniqueInput
  }

  /**
   * Lab1IDORS findFirst
   */
  export type Lab1IDORSFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lab1IDORS
     */
    select?: Lab1IDORSSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lab1IDORS
     */
    omit?: Lab1IDORSOmit<ExtArgs> | null
    /**
     * Filter, which Lab1IDORS to fetch.
     */
    where?: Lab1IDORSWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lab1IDORS to fetch.
     */
    orderBy?: Lab1IDORSOrderByWithRelationInput | Lab1IDORSOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Lab1IDORS.
     */
    cursor?: Lab1IDORSWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lab1IDORS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lab1IDORS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Lab1IDORS.
     */
    distinct?: Lab1IDORSScalarFieldEnum | Lab1IDORSScalarFieldEnum[]
  }

  /**
   * Lab1IDORS findFirstOrThrow
   */
  export type Lab1IDORSFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lab1IDORS
     */
    select?: Lab1IDORSSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lab1IDORS
     */
    omit?: Lab1IDORSOmit<ExtArgs> | null
    /**
     * Filter, which Lab1IDORS to fetch.
     */
    where?: Lab1IDORSWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lab1IDORS to fetch.
     */
    orderBy?: Lab1IDORSOrderByWithRelationInput | Lab1IDORSOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Lab1IDORS.
     */
    cursor?: Lab1IDORSWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lab1IDORS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lab1IDORS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Lab1IDORS.
     */
    distinct?: Lab1IDORSScalarFieldEnum | Lab1IDORSScalarFieldEnum[]
  }

  /**
   * Lab1IDORS findMany
   */
  export type Lab1IDORSFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lab1IDORS
     */
    select?: Lab1IDORSSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lab1IDORS
     */
    omit?: Lab1IDORSOmit<ExtArgs> | null
    /**
     * Filter, which Lab1IDORS to fetch.
     */
    where?: Lab1IDORSWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lab1IDORS to fetch.
     */
    orderBy?: Lab1IDORSOrderByWithRelationInput | Lab1IDORSOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Lab1IDORS.
     */
    cursor?: Lab1IDORSWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lab1IDORS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lab1IDORS.
     */
    skip?: number
    distinct?: Lab1IDORSScalarFieldEnum | Lab1IDORSScalarFieldEnum[]
  }

  /**
   * Lab1IDORS create
   */
  export type Lab1IDORSCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lab1IDORS
     */
    select?: Lab1IDORSSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lab1IDORS
     */
    omit?: Lab1IDORSOmit<ExtArgs> | null
    /**
     * The data needed to create a Lab1IDORS.
     */
    data?: XOR<Lab1IDORSCreateInput, Lab1IDORSUncheckedCreateInput>
  }

  /**
   * Lab1IDORS createMany
   */
  export type Lab1IDORSCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Lab1IDORS.
     */
    data: Lab1IDORSCreateManyInput | Lab1IDORSCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Lab1IDORS createManyAndReturn
   */
  export type Lab1IDORSCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lab1IDORS
     */
    select?: Lab1IDORSSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Lab1IDORS
     */
    omit?: Lab1IDORSOmit<ExtArgs> | null
    /**
     * The data used to create many Lab1IDORS.
     */
    data: Lab1IDORSCreateManyInput | Lab1IDORSCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Lab1IDORS update
   */
  export type Lab1IDORSUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lab1IDORS
     */
    select?: Lab1IDORSSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lab1IDORS
     */
    omit?: Lab1IDORSOmit<ExtArgs> | null
    /**
     * The data needed to update a Lab1IDORS.
     */
    data: XOR<Lab1IDORSUpdateInput, Lab1IDORSUncheckedUpdateInput>
    /**
     * Choose, which Lab1IDORS to update.
     */
    where: Lab1IDORSWhereUniqueInput
  }

  /**
   * Lab1IDORS updateMany
   */
  export type Lab1IDORSUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Lab1IDORS.
     */
    data: XOR<Lab1IDORSUpdateManyMutationInput, Lab1IDORSUncheckedUpdateManyInput>
    /**
     * Filter which Lab1IDORS to update
     */
    where?: Lab1IDORSWhereInput
    /**
     * Limit how many Lab1IDORS to update.
     */
    limit?: number
  }

  /**
   * Lab1IDORS updateManyAndReturn
   */
  export type Lab1IDORSUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lab1IDORS
     */
    select?: Lab1IDORSSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Lab1IDORS
     */
    omit?: Lab1IDORSOmit<ExtArgs> | null
    /**
     * The data used to update Lab1IDORS.
     */
    data: XOR<Lab1IDORSUpdateManyMutationInput, Lab1IDORSUncheckedUpdateManyInput>
    /**
     * Filter which Lab1IDORS to update
     */
    where?: Lab1IDORSWhereInput
    /**
     * Limit how many Lab1IDORS to update.
     */
    limit?: number
  }

  /**
   * Lab1IDORS upsert
   */
  export type Lab1IDORSUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lab1IDORS
     */
    select?: Lab1IDORSSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lab1IDORS
     */
    omit?: Lab1IDORSOmit<ExtArgs> | null
    /**
     * The filter to search for the Lab1IDORS to update in case it exists.
     */
    where: Lab1IDORSWhereUniqueInput
    /**
     * In case the Lab1IDORS found by the `where` argument doesn't exist, create a new Lab1IDORS with this data.
     */
    create: XOR<Lab1IDORSCreateInput, Lab1IDORSUncheckedCreateInput>
    /**
     * In case the Lab1IDORS was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Lab1IDORSUpdateInput, Lab1IDORSUncheckedUpdateInput>
  }

  /**
   * Lab1IDORS delete
   */
  export type Lab1IDORSDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lab1IDORS
     */
    select?: Lab1IDORSSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lab1IDORS
     */
    omit?: Lab1IDORSOmit<ExtArgs> | null
    /**
     * Filter which Lab1IDORS to delete.
     */
    where: Lab1IDORSWhereUniqueInput
  }

  /**
   * Lab1IDORS deleteMany
   */
  export type Lab1IDORSDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Lab1IDORS to delete
     */
    where?: Lab1IDORSWhereInput
    /**
     * Limit how many Lab1IDORS to delete.
     */
    limit?: number
  }

  /**
   * Lab1IDORS without action
   */
  export type Lab1IDORSDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lab1IDORS
     */
    select?: Lab1IDORSSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lab1IDORS
     */
    omit?: Lab1IDORSOmit<ExtArgs> | null
  }


  /**
   * Model Lab2IDORS
   */

  export type AggregateLab2IDORS = {
    _count: Lab2IDORSCountAggregateOutputType | null
    _avg: Lab2IDORSAvgAggregateOutputType | null
    _sum: Lab2IDORSSumAggregateOutputType | null
    _min: Lab2IDORSMinAggregateOutputType | null
    _max: Lab2IDORSMaxAggregateOutputType | null
  }

  export type Lab2IDORSAvgAggregateOutputType = {
    id: number | null
    balance: number | null
  }

  export type Lab2IDORSSumAggregateOutputType = {
    id: number | null
    balance: number | null
  }

  export type Lab2IDORSMinAggregateOutputType = {
    id: number | null
    balance: number | null
  }

  export type Lab2IDORSMaxAggregateOutputType = {
    id: number | null
    balance: number | null
  }

  export type Lab2IDORSCountAggregateOutputType = {
    id: number
    balance: number
    _all: number
  }


  export type Lab2IDORSAvgAggregateInputType = {
    id?: true
    balance?: true
  }

  export type Lab2IDORSSumAggregateInputType = {
    id?: true
    balance?: true
  }

  export type Lab2IDORSMinAggregateInputType = {
    id?: true
    balance?: true
  }

  export type Lab2IDORSMaxAggregateInputType = {
    id?: true
    balance?: true
  }

  export type Lab2IDORSCountAggregateInputType = {
    id?: true
    balance?: true
    _all?: true
  }

  export type Lab2IDORSAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Lab2IDORS to aggregate.
     */
    where?: Lab2IDORSWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lab2IDORS to fetch.
     */
    orderBy?: Lab2IDORSOrderByWithRelationInput | Lab2IDORSOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Lab2IDORSWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lab2IDORS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lab2IDORS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Lab2IDORS
    **/
    _count?: true | Lab2IDORSCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Lab2IDORSAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Lab2IDORSSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Lab2IDORSMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Lab2IDORSMaxAggregateInputType
  }

  export type GetLab2IDORSAggregateType<T extends Lab2IDORSAggregateArgs> = {
        [P in keyof T & keyof AggregateLab2IDORS]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLab2IDORS[P]>
      : GetScalarType<T[P], AggregateLab2IDORS[P]>
  }




  export type Lab2IDORSGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Lab2IDORSWhereInput
    orderBy?: Lab2IDORSOrderByWithAggregationInput | Lab2IDORSOrderByWithAggregationInput[]
    by: Lab2IDORSScalarFieldEnum[] | Lab2IDORSScalarFieldEnum
    having?: Lab2IDORSScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Lab2IDORSCountAggregateInputType | true
    _avg?: Lab2IDORSAvgAggregateInputType
    _sum?: Lab2IDORSSumAggregateInputType
    _min?: Lab2IDORSMinAggregateInputType
    _max?: Lab2IDORSMaxAggregateInputType
  }

  export type Lab2IDORSGroupByOutputType = {
    id: number
    balance: number
    _count: Lab2IDORSCountAggregateOutputType | null
    _avg: Lab2IDORSAvgAggregateOutputType | null
    _sum: Lab2IDORSSumAggregateOutputType | null
    _min: Lab2IDORSMinAggregateOutputType | null
    _max: Lab2IDORSMaxAggregateOutputType | null
  }

  type GetLab2IDORSGroupByPayload<T extends Lab2IDORSGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Lab2IDORSGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Lab2IDORSGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Lab2IDORSGroupByOutputType[P]>
            : GetScalarType<T[P], Lab2IDORSGroupByOutputType[P]>
        }
      >
    >


  export type Lab2IDORSSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    balance?: boolean
  }, ExtArgs["result"]["lab2IDORS"]>

  export type Lab2IDORSSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    balance?: boolean
  }, ExtArgs["result"]["lab2IDORS"]>

  export type Lab2IDORSSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    balance?: boolean
  }, ExtArgs["result"]["lab2IDORS"]>

  export type Lab2IDORSSelectScalar = {
    id?: boolean
    balance?: boolean
  }

  export type Lab2IDORSOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "balance", ExtArgs["result"]["lab2IDORS"]>

  export type $Lab2IDORSPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Lab2IDORS"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      balance: number
    }, ExtArgs["result"]["lab2IDORS"]>
    composites: {}
  }

  type Lab2IDORSGetPayload<S extends boolean | null | undefined | Lab2IDORSDefaultArgs> = $Result.GetResult<Prisma.$Lab2IDORSPayload, S>

  type Lab2IDORSCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<Lab2IDORSFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Lab2IDORSCountAggregateInputType | true
    }

  export interface Lab2IDORSDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Lab2IDORS'], meta: { name: 'Lab2IDORS' } }
    /**
     * Find zero or one Lab2IDORS that matches the filter.
     * @param {Lab2IDORSFindUniqueArgs} args - Arguments to find a Lab2IDORS
     * @example
     * // Get one Lab2IDORS
     * const lab2IDORS = await prisma.lab2IDORS.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends Lab2IDORSFindUniqueArgs>(args: SelectSubset<T, Lab2IDORSFindUniqueArgs<ExtArgs>>): Prisma__Lab2IDORSClient<$Result.GetResult<Prisma.$Lab2IDORSPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Lab2IDORS that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {Lab2IDORSFindUniqueOrThrowArgs} args - Arguments to find a Lab2IDORS
     * @example
     * // Get one Lab2IDORS
     * const lab2IDORS = await prisma.lab2IDORS.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends Lab2IDORSFindUniqueOrThrowArgs>(args: SelectSubset<T, Lab2IDORSFindUniqueOrThrowArgs<ExtArgs>>): Prisma__Lab2IDORSClient<$Result.GetResult<Prisma.$Lab2IDORSPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Lab2IDORS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Lab2IDORSFindFirstArgs} args - Arguments to find a Lab2IDORS
     * @example
     * // Get one Lab2IDORS
     * const lab2IDORS = await prisma.lab2IDORS.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends Lab2IDORSFindFirstArgs>(args?: SelectSubset<T, Lab2IDORSFindFirstArgs<ExtArgs>>): Prisma__Lab2IDORSClient<$Result.GetResult<Prisma.$Lab2IDORSPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Lab2IDORS that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Lab2IDORSFindFirstOrThrowArgs} args - Arguments to find a Lab2IDORS
     * @example
     * // Get one Lab2IDORS
     * const lab2IDORS = await prisma.lab2IDORS.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends Lab2IDORSFindFirstOrThrowArgs>(args?: SelectSubset<T, Lab2IDORSFindFirstOrThrowArgs<ExtArgs>>): Prisma__Lab2IDORSClient<$Result.GetResult<Prisma.$Lab2IDORSPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Lab2IDORS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Lab2IDORSFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Lab2IDORS
     * const lab2IDORS = await prisma.lab2IDORS.findMany()
     * 
     * // Get first 10 Lab2IDORS
     * const lab2IDORS = await prisma.lab2IDORS.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const lab2IDORSWithIdOnly = await prisma.lab2IDORS.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends Lab2IDORSFindManyArgs>(args?: SelectSubset<T, Lab2IDORSFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Lab2IDORSPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Lab2IDORS.
     * @param {Lab2IDORSCreateArgs} args - Arguments to create a Lab2IDORS.
     * @example
     * // Create one Lab2IDORS
     * const Lab2IDORS = await prisma.lab2IDORS.create({
     *   data: {
     *     // ... data to create a Lab2IDORS
     *   }
     * })
     * 
     */
    create<T extends Lab2IDORSCreateArgs>(args: SelectSubset<T, Lab2IDORSCreateArgs<ExtArgs>>): Prisma__Lab2IDORSClient<$Result.GetResult<Prisma.$Lab2IDORSPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Lab2IDORS.
     * @param {Lab2IDORSCreateManyArgs} args - Arguments to create many Lab2IDORS.
     * @example
     * // Create many Lab2IDORS
     * const lab2IDORS = await prisma.lab2IDORS.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends Lab2IDORSCreateManyArgs>(args?: SelectSubset<T, Lab2IDORSCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Lab2IDORS and returns the data saved in the database.
     * @param {Lab2IDORSCreateManyAndReturnArgs} args - Arguments to create many Lab2IDORS.
     * @example
     * // Create many Lab2IDORS
     * const lab2IDORS = await prisma.lab2IDORS.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Lab2IDORS and only return the `id`
     * const lab2IDORSWithIdOnly = await prisma.lab2IDORS.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends Lab2IDORSCreateManyAndReturnArgs>(args?: SelectSubset<T, Lab2IDORSCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Lab2IDORSPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Lab2IDORS.
     * @param {Lab2IDORSDeleteArgs} args - Arguments to delete one Lab2IDORS.
     * @example
     * // Delete one Lab2IDORS
     * const Lab2IDORS = await prisma.lab2IDORS.delete({
     *   where: {
     *     // ... filter to delete one Lab2IDORS
     *   }
     * })
     * 
     */
    delete<T extends Lab2IDORSDeleteArgs>(args: SelectSubset<T, Lab2IDORSDeleteArgs<ExtArgs>>): Prisma__Lab2IDORSClient<$Result.GetResult<Prisma.$Lab2IDORSPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Lab2IDORS.
     * @param {Lab2IDORSUpdateArgs} args - Arguments to update one Lab2IDORS.
     * @example
     * // Update one Lab2IDORS
     * const lab2IDORS = await prisma.lab2IDORS.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends Lab2IDORSUpdateArgs>(args: SelectSubset<T, Lab2IDORSUpdateArgs<ExtArgs>>): Prisma__Lab2IDORSClient<$Result.GetResult<Prisma.$Lab2IDORSPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Lab2IDORS.
     * @param {Lab2IDORSDeleteManyArgs} args - Arguments to filter Lab2IDORS to delete.
     * @example
     * // Delete a few Lab2IDORS
     * const { count } = await prisma.lab2IDORS.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends Lab2IDORSDeleteManyArgs>(args?: SelectSubset<T, Lab2IDORSDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Lab2IDORS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Lab2IDORSUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Lab2IDORS
     * const lab2IDORS = await prisma.lab2IDORS.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends Lab2IDORSUpdateManyArgs>(args: SelectSubset<T, Lab2IDORSUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Lab2IDORS and returns the data updated in the database.
     * @param {Lab2IDORSUpdateManyAndReturnArgs} args - Arguments to update many Lab2IDORS.
     * @example
     * // Update many Lab2IDORS
     * const lab2IDORS = await prisma.lab2IDORS.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Lab2IDORS and only return the `id`
     * const lab2IDORSWithIdOnly = await prisma.lab2IDORS.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends Lab2IDORSUpdateManyAndReturnArgs>(args: SelectSubset<T, Lab2IDORSUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Lab2IDORSPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Lab2IDORS.
     * @param {Lab2IDORSUpsertArgs} args - Arguments to update or create a Lab2IDORS.
     * @example
     * // Update or create a Lab2IDORS
     * const lab2IDORS = await prisma.lab2IDORS.upsert({
     *   create: {
     *     // ... data to create a Lab2IDORS
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Lab2IDORS we want to update
     *   }
     * })
     */
    upsert<T extends Lab2IDORSUpsertArgs>(args: SelectSubset<T, Lab2IDORSUpsertArgs<ExtArgs>>): Prisma__Lab2IDORSClient<$Result.GetResult<Prisma.$Lab2IDORSPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Lab2IDORS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Lab2IDORSCountArgs} args - Arguments to filter Lab2IDORS to count.
     * @example
     * // Count the number of Lab2IDORS
     * const count = await prisma.lab2IDORS.count({
     *   where: {
     *     // ... the filter for the Lab2IDORS we want to count
     *   }
     * })
    **/
    count<T extends Lab2IDORSCountArgs>(
      args?: Subset<T, Lab2IDORSCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Lab2IDORSCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Lab2IDORS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Lab2IDORSAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Lab2IDORSAggregateArgs>(args: Subset<T, Lab2IDORSAggregateArgs>): Prisma.PrismaPromise<GetLab2IDORSAggregateType<T>>

    /**
     * Group by Lab2IDORS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Lab2IDORSGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Lab2IDORSGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Lab2IDORSGroupByArgs['orderBy'] }
        : { orderBy?: Lab2IDORSGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Lab2IDORSGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLab2IDORSGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Lab2IDORS model
   */
  readonly fields: Lab2IDORSFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Lab2IDORS.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Lab2IDORSClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Lab2IDORS model
   */ 
  interface Lab2IDORSFieldRefs {
    readonly id: FieldRef<"Lab2IDORS", 'Int'>
    readonly balance: FieldRef<"Lab2IDORS", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Lab2IDORS findUnique
   */
  export type Lab2IDORSFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lab2IDORS
     */
    select?: Lab2IDORSSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lab2IDORS
     */
    omit?: Lab2IDORSOmit<ExtArgs> | null
    /**
     * Filter, which Lab2IDORS to fetch.
     */
    where: Lab2IDORSWhereUniqueInput
  }

  /**
   * Lab2IDORS findUniqueOrThrow
   */
  export type Lab2IDORSFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lab2IDORS
     */
    select?: Lab2IDORSSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lab2IDORS
     */
    omit?: Lab2IDORSOmit<ExtArgs> | null
    /**
     * Filter, which Lab2IDORS to fetch.
     */
    where: Lab2IDORSWhereUniqueInput
  }

  /**
   * Lab2IDORS findFirst
   */
  export type Lab2IDORSFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lab2IDORS
     */
    select?: Lab2IDORSSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lab2IDORS
     */
    omit?: Lab2IDORSOmit<ExtArgs> | null
    /**
     * Filter, which Lab2IDORS to fetch.
     */
    where?: Lab2IDORSWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lab2IDORS to fetch.
     */
    orderBy?: Lab2IDORSOrderByWithRelationInput | Lab2IDORSOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Lab2IDORS.
     */
    cursor?: Lab2IDORSWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lab2IDORS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lab2IDORS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Lab2IDORS.
     */
    distinct?: Lab2IDORSScalarFieldEnum | Lab2IDORSScalarFieldEnum[]
  }

  /**
   * Lab2IDORS findFirstOrThrow
   */
  export type Lab2IDORSFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lab2IDORS
     */
    select?: Lab2IDORSSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lab2IDORS
     */
    omit?: Lab2IDORSOmit<ExtArgs> | null
    /**
     * Filter, which Lab2IDORS to fetch.
     */
    where?: Lab2IDORSWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lab2IDORS to fetch.
     */
    orderBy?: Lab2IDORSOrderByWithRelationInput | Lab2IDORSOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Lab2IDORS.
     */
    cursor?: Lab2IDORSWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lab2IDORS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lab2IDORS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Lab2IDORS.
     */
    distinct?: Lab2IDORSScalarFieldEnum | Lab2IDORSScalarFieldEnum[]
  }

  /**
   * Lab2IDORS findMany
   */
  export type Lab2IDORSFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lab2IDORS
     */
    select?: Lab2IDORSSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lab2IDORS
     */
    omit?: Lab2IDORSOmit<ExtArgs> | null
    /**
     * Filter, which Lab2IDORS to fetch.
     */
    where?: Lab2IDORSWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lab2IDORS to fetch.
     */
    orderBy?: Lab2IDORSOrderByWithRelationInput | Lab2IDORSOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Lab2IDORS.
     */
    cursor?: Lab2IDORSWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lab2IDORS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lab2IDORS.
     */
    skip?: number
    distinct?: Lab2IDORSScalarFieldEnum | Lab2IDORSScalarFieldEnum[]
  }

  /**
   * Lab2IDORS create
   */
  export type Lab2IDORSCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lab2IDORS
     */
    select?: Lab2IDORSSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lab2IDORS
     */
    omit?: Lab2IDORSOmit<ExtArgs> | null
    /**
     * The data needed to create a Lab2IDORS.
     */
    data?: XOR<Lab2IDORSCreateInput, Lab2IDORSUncheckedCreateInput>
  }

  /**
   * Lab2IDORS createMany
   */
  export type Lab2IDORSCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Lab2IDORS.
     */
    data: Lab2IDORSCreateManyInput | Lab2IDORSCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Lab2IDORS createManyAndReturn
   */
  export type Lab2IDORSCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lab2IDORS
     */
    select?: Lab2IDORSSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Lab2IDORS
     */
    omit?: Lab2IDORSOmit<ExtArgs> | null
    /**
     * The data used to create many Lab2IDORS.
     */
    data: Lab2IDORSCreateManyInput | Lab2IDORSCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Lab2IDORS update
   */
  export type Lab2IDORSUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lab2IDORS
     */
    select?: Lab2IDORSSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lab2IDORS
     */
    omit?: Lab2IDORSOmit<ExtArgs> | null
    /**
     * The data needed to update a Lab2IDORS.
     */
    data: XOR<Lab2IDORSUpdateInput, Lab2IDORSUncheckedUpdateInput>
    /**
     * Choose, which Lab2IDORS to update.
     */
    where: Lab2IDORSWhereUniqueInput
  }

  /**
   * Lab2IDORS updateMany
   */
  export type Lab2IDORSUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Lab2IDORS.
     */
    data: XOR<Lab2IDORSUpdateManyMutationInput, Lab2IDORSUncheckedUpdateManyInput>
    /**
     * Filter which Lab2IDORS to update
     */
    where?: Lab2IDORSWhereInput
    /**
     * Limit how many Lab2IDORS to update.
     */
    limit?: number
  }

  /**
   * Lab2IDORS updateManyAndReturn
   */
  export type Lab2IDORSUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lab2IDORS
     */
    select?: Lab2IDORSSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Lab2IDORS
     */
    omit?: Lab2IDORSOmit<ExtArgs> | null
    /**
     * The data used to update Lab2IDORS.
     */
    data: XOR<Lab2IDORSUpdateManyMutationInput, Lab2IDORSUncheckedUpdateManyInput>
    /**
     * Filter which Lab2IDORS to update
     */
    where?: Lab2IDORSWhereInput
    /**
     * Limit how many Lab2IDORS to update.
     */
    limit?: number
  }

  /**
   * Lab2IDORS upsert
   */
  export type Lab2IDORSUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lab2IDORS
     */
    select?: Lab2IDORSSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lab2IDORS
     */
    omit?: Lab2IDORSOmit<ExtArgs> | null
    /**
     * The filter to search for the Lab2IDORS to update in case it exists.
     */
    where: Lab2IDORSWhereUniqueInput
    /**
     * In case the Lab2IDORS found by the `where` argument doesn't exist, create a new Lab2IDORS with this data.
     */
    create: XOR<Lab2IDORSCreateInput, Lab2IDORSUncheckedCreateInput>
    /**
     * In case the Lab2IDORS was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Lab2IDORSUpdateInput, Lab2IDORSUncheckedUpdateInput>
  }

  /**
   * Lab2IDORS delete
   */
  export type Lab2IDORSDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lab2IDORS
     */
    select?: Lab2IDORSSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lab2IDORS
     */
    omit?: Lab2IDORSOmit<ExtArgs> | null
    /**
     * Filter which Lab2IDORS to delete.
     */
    where: Lab2IDORSWhereUniqueInput
  }

  /**
   * Lab2IDORS deleteMany
   */
  export type Lab2IDORSDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Lab2IDORS to delete
     */
    where?: Lab2IDORSWhereInput
    /**
     * Limit how many Lab2IDORS to delete.
     */
    limit?: number
  }

  /**
   * Lab2IDORS without action
   */
  export type Lab2IDORSDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lab2IDORS
     */
    select?: Lab2IDORSSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lab2IDORS
     */
    omit?: Lab2IDORSOmit<ExtArgs> | null
  }


  /**
   * Model Lab3IDORS
   */

  export type AggregateLab3IDORS = {
    _count: Lab3IDORSCountAggregateOutputType | null
    _avg: Lab3IDORSAvgAggregateOutputType | null
    _sum: Lab3IDORSSumAggregateOutputType | null
    _min: Lab3IDORSMinAggregateOutputType | null
    _max: Lab3IDORSMaxAggregateOutputType | null
  }

  export type Lab3IDORSAvgAggregateOutputType = {
    id: number | null
    balance: number | null
  }

  export type Lab3IDORSSumAggregateOutputType = {
    id: number | null
    balance: number | null
  }

  export type Lab3IDORSMinAggregateOutputType = {
    id: number | null
    name: string | null
    balance: number | null
  }

  export type Lab3IDORSMaxAggregateOutputType = {
    id: number | null
    name: string | null
    balance: number | null
  }

  export type Lab3IDORSCountAggregateOutputType = {
    id: number
    name: number
    balance: number
    _all: number
  }


  export type Lab3IDORSAvgAggregateInputType = {
    id?: true
    balance?: true
  }

  export type Lab3IDORSSumAggregateInputType = {
    id?: true
    balance?: true
  }

  export type Lab3IDORSMinAggregateInputType = {
    id?: true
    name?: true
    balance?: true
  }

  export type Lab3IDORSMaxAggregateInputType = {
    id?: true
    name?: true
    balance?: true
  }

  export type Lab3IDORSCountAggregateInputType = {
    id?: true
    name?: true
    balance?: true
    _all?: true
  }

  export type Lab3IDORSAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Lab3IDORS to aggregate.
     */
    where?: Lab3IDORSWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lab3IDORS to fetch.
     */
    orderBy?: Lab3IDORSOrderByWithRelationInput | Lab3IDORSOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Lab3IDORSWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lab3IDORS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lab3IDORS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Lab3IDORS
    **/
    _count?: true | Lab3IDORSCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Lab3IDORSAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Lab3IDORSSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Lab3IDORSMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Lab3IDORSMaxAggregateInputType
  }

  export type GetLab3IDORSAggregateType<T extends Lab3IDORSAggregateArgs> = {
        [P in keyof T & keyof AggregateLab3IDORS]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLab3IDORS[P]>
      : GetScalarType<T[P], AggregateLab3IDORS[P]>
  }




  export type Lab3IDORSGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Lab3IDORSWhereInput
    orderBy?: Lab3IDORSOrderByWithAggregationInput | Lab3IDORSOrderByWithAggregationInput[]
    by: Lab3IDORSScalarFieldEnum[] | Lab3IDORSScalarFieldEnum
    having?: Lab3IDORSScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Lab3IDORSCountAggregateInputType | true
    _avg?: Lab3IDORSAvgAggregateInputType
    _sum?: Lab3IDORSSumAggregateInputType
    _min?: Lab3IDORSMinAggregateInputType
    _max?: Lab3IDORSMaxAggregateInputType
  }

  export type Lab3IDORSGroupByOutputType = {
    id: number
    name: string
    balance: number
    _count: Lab3IDORSCountAggregateOutputType | null
    _avg: Lab3IDORSAvgAggregateOutputType | null
    _sum: Lab3IDORSSumAggregateOutputType | null
    _min: Lab3IDORSMinAggregateOutputType | null
    _max: Lab3IDORSMaxAggregateOutputType | null
  }

  type GetLab3IDORSGroupByPayload<T extends Lab3IDORSGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Lab3IDORSGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Lab3IDORSGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Lab3IDORSGroupByOutputType[P]>
            : GetScalarType<T[P], Lab3IDORSGroupByOutputType[P]>
        }
      >
    >


  export type Lab3IDORSSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    balance?: boolean
  }, ExtArgs["result"]["lab3IDORS"]>

  export type Lab3IDORSSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    balance?: boolean
  }, ExtArgs["result"]["lab3IDORS"]>

  export type Lab3IDORSSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    balance?: boolean
  }, ExtArgs["result"]["lab3IDORS"]>

  export type Lab3IDORSSelectScalar = {
    id?: boolean
    name?: boolean
    balance?: boolean
  }

  export type Lab3IDORSOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "balance", ExtArgs["result"]["lab3IDORS"]>

  export type $Lab3IDORSPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Lab3IDORS"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      balance: number
    }, ExtArgs["result"]["lab3IDORS"]>
    composites: {}
  }

  type Lab3IDORSGetPayload<S extends boolean | null | undefined | Lab3IDORSDefaultArgs> = $Result.GetResult<Prisma.$Lab3IDORSPayload, S>

  type Lab3IDORSCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<Lab3IDORSFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Lab3IDORSCountAggregateInputType | true
    }

  export interface Lab3IDORSDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Lab3IDORS'], meta: { name: 'Lab3IDORS' } }
    /**
     * Find zero or one Lab3IDORS that matches the filter.
     * @param {Lab3IDORSFindUniqueArgs} args - Arguments to find a Lab3IDORS
     * @example
     * // Get one Lab3IDORS
     * const lab3IDORS = await prisma.lab3IDORS.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends Lab3IDORSFindUniqueArgs>(args: SelectSubset<T, Lab3IDORSFindUniqueArgs<ExtArgs>>): Prisma__Lab3IDORSClient<$Result.GetResult<Prisma.$Lab3IDORSPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Lab3IDORS that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {Lab3IDORSFindUniqueOrThrowArgs} args - Arguments to find a Lab3IDORS
     * @example
     * // Get one Lab3IDORS
     * const lab3IDORS = await prisma.lab3IDORS.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends Lab3IDORSFindUniqueOrThrowArgs>(args: SelectSubset<T, Lab3IDORSFindUniqueOrThrowArgs<ExtArgs>>): Prisma__Lab3IDORSClient<$Result.GetResult<Prisma.$Lab3IDORSPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Lab3IDORS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Lab3IDORSFindFirstArgs} args - Arguments to find a Lab3IDORS
     * @example
     * // Get one Lab3IDORS
     * const lab3IDORS = await prisma.lab3IDORS.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends Lab3IDORSFindFirstArgs>(args?: SelectSubset<T, Lab3IDORSFindFirstArgs<ExtArgs>>): Prisma__Lab3IDORSClient<$Result.GetResult<Prisma.$Lab3IDORSPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Lab3IDORS that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Lab3IDORSFindFirstOrThrowArgs} args - Arguments to find a Lab3IDORS
     * @example
     * // Get one Lab3IDORS
     * const lab3IDORS = await prisma.lab3IDORS.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends Lab3IDORSFindFirstOrThrowArgs>(args?: SelectSubset<T, Lab3IDORSFindFirstOrThrowArgs<ExtArgs>>): Prisma__Lab3IDORSClient<$Result.GetResult<Prisma.$Lab3IDORSPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Lab3IDORS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Lab3IDORSFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Lab3IDORS
     * const lab3IDORS = await prisma.lab3IDORS.findMany()
     * 
     * // Get first 10 Lab3IDORS
     * const lab3IDORS = await prisma.lab3IDORS.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const lab3IDORSWithIdOnly = await prisma.lab3IDORS.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends Lab3IDORSFindManyArgs>(args?: SelectSubset<T, Lab3IDORSFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Lab3IDORSPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Lab3IDORS.
     * @param {Lab3IDORSCreateArgs} args - Arguments to create a Lab3IDORS.
     * @example
     * // Create one Lab3IDORS
     * const Lab3IDORS = await prisma.lab3IDORS.create({
     *   data: {
     *     // ... data to create a Lab3IDORS
     *   }
     * })
     * 
     */
    create<T extends Lab3IDORSCreateArgs>(args: SelectSubset<T, Lab3IDORSCreateArgs<ExtArgs>>): Prisma__Lab3IDORSClient<$Result.GetResult<Prisma.$Lab3IDORSPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Lab3IDORS.
     * @param {Lab3IDORSCreateManyArgs} args - Arguments to create many Lab3IDORS.
     * @example
     * // Create many Lab3IDORS
     * const lab3IDORS = await prisma.lab3IDORS.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends Lab3IDORSCreateManyArgs>(args?: SelectSubset<T, Lab3IDORSCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Lab3IDORS and returns the data saved in the database.
     * @param {Lab3IDORSCreateManyAndReturnArgs} args - Arguments to create many Lab3IDORS.
     * @example
     * // Create many Lab3IDORS
     * const lab3IDORS = await prisma.lab3IDORS.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Lab3IDORS and only return the `id`
     * const lab3IDORSWithIdOnly = await prisma.lab3IDORS.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends Lab3IDORSCreateManyAndReturnArgs>(args?: SelectSubset<T, Lab3IDORSCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Lab3IDORSPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Lab3IDORS.
     * @param {Lab3IDORSDeleteArgs} args - Arguments to delete one Lab3IDORS.
     * @example
     * // Delete one Lab3IDORS
     * const Lab3IDORS = await prisma.lab3IDORS.delete({
     *   where: {
     *     // ... filter to delete one Lab3IDORS
     *   }
     * })
     * 
     */
    delete<T extends Lab3IDORSDeleteArgs>(args: SelectSubset<T, Lab3IDORSDeleteArgs<ExtArgs>>): Prisma__Lab3IDORSClient<$Result.GetResult<Prisma.$Lab3IDORSPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Lab3IDORS.
     * @param {Lab3IDORSUpdateArgs} args - Arguments to update one Lab3IDORS.
     * @example
     * // Update one Lab3IDORS
     * const lab3IDORS = await prisma.lab3IDORS.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends Lab3IDORSUpdateArgs>(args: SelectSubset<T, Lab3IDORSUpdateArgs<ExtArgs>>): Prisma__Lab3IDORSClient<$Result.GetResult<Prisma.$Lab3IDORSPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Lab3IDORS.
     * @param {Lab3IDORSDeleteManyArgs} args - Arguments to filter Lab3IDORS to delete.
     * @example
     * // Delete a few Lab3IDORS
     * const { count } = await prisma.lab3IDORS.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends Lab3IDORSDeleteManyArgs>(args?: SelectSubset<T, Lab3IDORSDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Lab3IDORS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Lab3IDORSUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Lab3IDORS
     * const lab3IDORS = await prisma.lab3IDORS.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends Lab3IDORSUpdateManyArgs>(args: SelectSubset<T, Lab3IDORSUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Lab3IDORS and returns the data updated in the database.
     * @param {Lab3IDORSUpdateManyAndReturnArgs} args - Arguments to update many Lab3IDORS.
     * @example
     * // Update many Lab3IDORS
     * const lab3IDORS = await prisma.lab3IDORS.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Lab3IDORS and only return the `id`
     * const lab3IDORSWithIdOnly = await prisma.lab3IDORS.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends Lab3IDORSUpdateManyAndReturnArgs>(args: SelectSubset<T, Lab3IDORSUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Lab3IDORSPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Lab3IDORS.
     * @param {Lab3IDORSUpsertArgs} args - Arguments to update or create a Lab3IDORS.
     * @example
     * // Update or create a Lab3IDORS
     * const lab3IDORS = await prisma.lab3IDORS.upsert({
     *   create: {
     *     // ... data to create a Lab3IDORS
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Lab3IDORS we want to update
     *   }
     * })
     */
    upsert<T extends Lab3IDORSUpsertArgs>(args: SelectSubset<T, Lab3IDORSUpsertArgs<ExtArgs>>): Prisma__Lab3IDORSClient<$Result.GetResult<Prisma.$Lab3IDORSPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Lab3IDORS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Lab3IDORSCountArgs} args - Arguments to filter Lab3IDORS to count.
     * @example
     * // Count the number of Lab3IDORS
     * const count = await prisma.lab3IDORS.count({
     *   where: {
     *     // ... the filter for the Lab3IDORS we want to count
     *   }
     * })
    **/
    count<T extends Lab3IDORSCountArgs>(
      args?: Subset<T, Lab3IDORSCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Lab3IDORSCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Lab3IDORS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Lab3IDORSAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Lab3IDORSAggregateArgs>(args: Subset<T, Lab3IDORSAggregateArgs>): Prisma.PrismaPromise<GetLab3IDORSAggregateType<T>>

    /**
     * Group by Lab3IDORS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Lab3IDORSGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Lab3IDORSGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Lab3IDORSGroupByArgs['orderBy'] }
        : { orderBy?: Lab3IDORSGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Lab3IDORSGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLab3IDORSGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Lab3IDORS model
   */
  readonly fields: Lab3IDORSFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Lab3IDORS.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Lab3IDORSClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Lab3IDORS model
   */ 
  interface Lab3IDORSFieldRefs {
    readonly id: FieldRef<"Lab3IDORS", 'Int'>
    readonly name: FieldRef<"Lab3IDORS", 'String'>
    readonly balance: FieldRef<"Lab3IDORS", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Lab3IDORS findUnique
   */
  export type Lab3IDORSFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lab3IDORS
     */
    select?: Lab3IDORSSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lab3IDORS
     */
    omit?: Lab3IDORSOmit<ExtArgs> | null
    /**
     * Filter, which Lab3IDORS to fetch.
     */
    where: Lab3IDORSWhereUniqueInput
  }

  /**
   * Lab3IDORS findUniqueOrThrow
   */
  export type Lab3IDORSFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lab3IDORS
     */
    select?: Lab3IDORSSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lab3IDORS
     */
    omit?: Lab3IDORSOmit<ExtArgs> | null
    /**
     * Filter, which Lab3IDORS to fetch.
     */
    where: Lab3IDORSWhereUniqueInput
  }

  /**
   * Lab3IDORS findFirst
   */
  export type Lab3IDORSFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lab3IDORS
     */
    select?: Lab3IDORSSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lab3IDORS
     */
    omit?: Lab3IDORSOmit<ExtArgs> | null
    /**
     * Filter, which Lab3IDORS to fetch.
     */
    where?: Lab3IDORSWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lab3IDORS to fetch.
     */
    orderBy?: Lab3IDORSOrderByWithRelationInput | Lab3IDORSOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Lab3IDORS.
     */
    cursor?: Lab3IDORSWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lab3IDORS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lab3IDORS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Lab3IDORS.
     */
    distinct?: Lab3IDORSScalarFieldEnum | Lab3IDORSScalarFieldEnum[]
  }

  /**
   * Lab3IDORS findFirstOrThrow
   */
  export type Lab3IDORSFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lab3IDORS
     */
    select?: Lab3IDORSSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lab3IDORS
     */
    omit?: Lab3IDORSOmit<ExtArgs> | null
    /**
     * Filter, which Lab3IDORS to fetch.
     */
    where?: Lab3IDORSWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lab3IDORS to fetch.
     */
    orderBy?: Lab3IDORSOrderByWithRelationInput | Lab3IDORSOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Lab3IDORS.
     */
    cursor?: Lab3IDORSWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lab3IDORS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lab3IDORS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Lab3IDORS.
     */
    distinct?: Lab3IDORSScalarFieldEnum | Lab3IDORSScalarFieldEnum[]
  }

  /**
   * Lab3IDORS findMany
   */
  export type Lab3IDORSFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lab3IDORS
     */
    select?: Lab3IDORSSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lab3IDORS
     */
    omit?: Lab3IDORSOmit<ExtArgs> | null
    /**
     * Filter, which Lab3IDORS to fetch.
     */
    where?: Lab3IDORSWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lab3IDORS to fetch.
     */
    orderBy?: Lab3IDORSOrderByWithRelationInput | Lab3IDORSOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Lab3IDORS.
     */
    cursor?: Lab3IDORSWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lab3IDORS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lab3IDORS.
     */
    skip?: number
    distinct?: Lab3IDORSScalarFieldEnum | Lab3IDORSScalarFieldEnum[]
  }

  /**
   * Lab3IDORS create
   */
  export type Lab3IDORSCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lab3IDORS
     */
    select?: Lab3IDORSSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lab3IDORS
     */
    omit?: Lab3IDORSOmit<ExtArgs> | null
    /**
     * The data needed to create a Lab3IDORS.
     */
    data?: XOR<Lab3IDORSCreateInput, Lab3IDORSUncheckedCreateInput>
  }

  /**
   * Lab3IDORS createMany
   */
  export type Lab3IDORSCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Lab3IDORS.
     */
    data: Lab3IDORSCreateManyInput | Lab3IDORSCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Lab3IDORS createManyAndReturn
   */
  export type Lab3IDORSCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lab3IDORS
     */
    select?: Lab3IDORSSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Lab3IDORS
     */
    omit?: Lab3IDORSOmit<ExtArgs> | null
    /**
     * The data used to create many Lab3IDORS.
     */
    data: Lab3IDORSCreateManyInput | Lab3IDORSCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Lab3IDORS update
   */
  export type Lab3IDORSUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lab3IDORS
     */
    select?: Lab3IDORSSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lab3IDORS
     */
    omit?: Lab3IDORSOmit<ExtArgs> | null
    /**
     * The data needed to update a Lab3IDORS.
     */
    data: XOR<Lab3IDORSUpdateInput, Lab3IDORSUncheckedUpdateInput>
    /**
     * Choose, which Lab3IDORS to update.
     */
    where: Lab3IDORSWhereUniqueInput
  }

  /**
   * Lab3IDORS updateMany
   */
  export type Lab3IDORSUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Lab3IDORS.
     */
    data: XOR<Lab3IDORSUpdateManyMutationInput, Lab3IDORSUncheckedUpdateManyInput>
    /**
     * Filter which Lab3IDORS to update
     */
    where?: Lab3IDORSWhereInput
    /**
     * Limit how many Lab3IDORS to update.
     */
    limit?: number
  }

  /**
   * Lab3IDORS updateManyAndReturn
   */
  export type Lab3IDORSUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lab3IDORS
     */
    select?: Lab3IDORSSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Lab3IDORS
     */
    omit?: Lab3IDORSOmit<ExtArgs> | null
    /**
     * The data used to update Lab3IDORS.
     */
    data: XOR<Lab3IDORSUpdateManyMutationInput, Lab3IDORSUncheckedUpdateManyInput>
    /**
     * Filter which Lab3IDORS to update
     */
    where?: Lab3IDORSWhereInput
    /**
     * Limit how many Lab3IDORS to update.
     */
    limit?: number
  }

  /**
   * Lab3IDORS upsert
   */
  export type Lab3IDORSUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lab3IDORS
     */
    select?: Lab3IDORSSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lab3IDORS
     */
    omit?: Lab3IDORSOmit<ExtArgs> | null
    /**
     * The filter to search for the Lab3IDORS to update in case it exists.
     */
    where: Lab3IDORSWhereUniqueInput
    /**
     * In case the Lab3IDORS found by the `where` argument doesn't exist, create a new Lab3IDORS with this data.
     */
    create: XOR<Lab3IDORSCreateInput, Lab3IDORSUncheckedCreateInput>
    /**
     * In case the Lab3IDORS was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Lab3IDORSUpdateInput, Lab3IDORSUncheckedUpdateInput>
  }

  /**
   * Lab3IDORS delete
   */
  export type Lab3IDORSDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lab3IDORS
     */
    select?: Lab3IDORSSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lab3IDORS
     */
    omit?: Lab3IDORSOmit<ExtArgs> | null
    /**
     * Filter which Lab3IDORS to delete.
     */
    where: Lab3IDORSWhereUniqueInput
  }

  /**
   * Lab3IDORS deleteMany
   */
  export type Lab3IDORSDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Lab3IDORS to delete
     */
    where?: Lab3IDORSWhereInput
    /**
     * Limit how many Lab3IDORS to delete.
     */
    limit?: number
  }

  /**
   * Lab3IDORS without action
   */
  export type Lab3IDORSDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lab3IDORS
     */
    select?: Lab3IDORSSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lab3IDORS
     */
    omit?: Lab3IDORSOmit<ExtArgs> | null
  }


  /**
   * Model Post
   */

  export type AggregatePost = {
    _count: PostCountAggregateOutputType | null
    _min: PostMinAggregateOutputType | null
    _max: PostMaxAggregateOutputType | null
  }

  export type PostMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    content: string | null
    userId: string | null
  }

  export type PostMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    content: string | null
    userId: string | null
  }

  export type PostCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    content: number
    userId: number
    _all: number
  }


  export type PostMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    content?: true
    userId?: true
  }

  export type PostMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    content?: true
    userId?: true
  }

  export type PostCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    content?: true
    userId?: true
    _all?: true
  }

  export type PostAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Post to aggregate.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Posts
    **/
    _count?: true | PostCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PostMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PostMaxAggregateInputType
  }

  export type GetPostAggregateType<T extends PostAggregateArgs> = {
        [P in keyof T & keyof AggregatePost]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePost[P]>
      : GetScalarType<T[P], AggregatePost[P]>
  }




  export type PostGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostWhereInput
    orderBy?: PostOrderByWithAggregationInput | PostOrderByWithAggregationInput[]
    by: PostScalarFieldEnum[] | PostScalarFieldEnum
    having?: PostScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PostCountAggregateInputType | true
    _min?: PostMinAggregateInputType
    _max?: PostMaxAggregateInputType
  }

  export type PostGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    content: string
    userId: string
    _count: PostCountAggregateOutputType | null
    _min: PostMinAggregateOutputType | null
    _max: PostMaxAggregateOutputType | null
  }

  type GetPostGroupByPayload<T extends PostGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PostGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PostGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PostGroupByOutputType[P]>
            : GetScalarType<T[P], PostGroupByOutputType[P]>
        }
      >
    >


  export type PostSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    content?: boolean
    userId?: boolean
    user?: boolean | userForXSSDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["post"]>

  export type PostSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    content?: boolean
    userId?: boolean
    user?: boolean | userForXSSDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["post"]>

  export type PostSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    content?: boolean
    userId?: boolean
    user?: boolean | userForXSSDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["post"]>

  export type PostSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    content?: boolean
    userId?: boolean
  }

  export type PostOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "content" | "userId", ExtArgs["result"]["post"]>
  export type PostInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | userForXSSDefaultArgs<ExtArgs>
  }
  export type PostIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | userForXSSDefaultArgs<ExtArgs>
  }
  export type PostIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | userForXSSDefaultArgs<ExtArgs>
  }

  export type $PostPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Post"
    objects: {
      user: Prisma.$userForXSSPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      updatedAt: Date
      content: string
      userId: string
    }, ExtArgs["result"]["post"]>
    composites: {}
  }

  type PostGetPayload<S extends boolean | null | undefined | PostDefaultArgs> = $Result.GetResult<Prisma.$PostPayload, S>

  type PostCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PostFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PostCountAggregateInputType | true
    }

  export interface PostDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Post'], meta: { name: 'Post' } }
    /**
     * Find zero or one Post that matches the filter.
     * @param {PostFindUniqueArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PostFindUniqueArgs>(args: SelectSubset<T, PostFindUniqueArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Post that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PostFindUniqueOrThrowArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PostFindUniqueOrThrowArgs>(args: SelectSubset<T, PostFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Post that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindFirstArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PostFindFirstArgs>(args?: SelectSubset<T, PostFindFirstArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Post that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindFirstOrThrowArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PostFindFirstOrThrowArgs>(args?: SelectSubset<T, PostFindFirstOrThrowArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Posts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Posts
     * const posts = await prisma.post.findMany()
     * 
     * // Get first 10 Posts
     * const posts = await prisma.post.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const postWithIdOnly = await prisma.post.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PostFindManyArgs>(args?: SelectSubset<T, PostFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Post.
     * @param {PostCreateArgs} args - Arguments to create a Post.
     * @example
     * // Create one Post
     * const Post = await prisma.post.create({
     *   data: {
     *     // ... data to create a Post
     *   }
     * })
     * 
     */
    create<T extends PostCreateArgs>(args: SelectSubset<T, PostCreateArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Posts.
     * @param {PostCreateManyArgs} args - Arguments to create many Posts.
     * @example
     * // Create many Posts
     * const post = await prisma.post.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PostCreateManyArgs>(args?: SelectSubset<T, PostCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Posts and returns the data saved in the database.
     * @param {PostCreateManyAndReturnArgs} args - Arguments to create many Posts.
     * @example
     * // Create many Posts
     * const post = await prisma.post.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Posts and only return the `id`
     * const postWithIdOnly = await prisma.post.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PostCreateManyAndReturnArgs>(args?: SelectSubset<T, PostCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Post.
     * @param {PostDeleteArgs} args - Arguments to delete one Post.
     * @example
     * // Delete one Post
     * const Post = await prisma.post.delete({
     *   where: {
     *     // ... filter to delete one Post
     *   }
     * })
     * 
     */
    delete<T extends PostDeleteArgs>(args: SelectSubset<T, PostDeleteArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Post.
     * @param {PostUpdateArgs} args - Arguments to update one Post.
     * @example
     * // Update one Post
     * const post = await prisma.post.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PostUpdateArgs>(args: SelectSubset<T, PostUpdateArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Posts.
     * @param {PostDeleteManyArgs} args - Arguments to filter Posts to delete.
     * @example
     * // Delete a few Posts
     * const { count } = await prisma.post.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PostDeleteManyArgs>(args?: SelectSubset<T, PostDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Posts
     * const post = await prisma.post.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PostUpdateManyArgs>(args: SelectSubset<T, PostUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Posts and returns the data updated in the database.
     * @param {PostUpdateManyAndReturnArgs} args - Arguments to update many Posts.
     * @example
     * // Update many Posts
     * const post = await prisma.post.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Posts and only return the `id`
     * const postWithIdOnly = await prisma.post.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PostUpdateManyAndReturnArgs>(args: SelectSubset<T, PostUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Post.
     * @param {PostUpsertArgs} args - Arguments to update or create a Post.
     * @example
     * // Update or create a Post
     * const post = await prisma.post.upsert({
     *   create: {
     *     // ... data to create a Post
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Post we want to update
     *   }
     * })
     */
    upsert<T extends PostUpsertArgs>(args: SelectSubset<T, PostUpsertArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostCountArgs} args - Arguments to filter Posts to count.
     * @example
     * // Count the number of Posts
     * const count = await prisma.post.count({
     *   where: {
     *     // ... the filter for the Posts we want to count
     *   }
     * })
    **/
    count<T extends PostCountArgs>(
      args?: Subset<T, PostCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PostCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Post.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PostAggregateArgs>(args: Subset<T, PostAggregateArgs>): Prisma.PrismaPromise<GetPostAggregateType<T>>

    /**
     * Group by Post.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PostGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PostGroupByArgs['orderBy'] }
        : { orderBy?: PostGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PostGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPostGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Post model
   */
  readonly fields: PostFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Post.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PostClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends userForXSSDefaultArgs<ExtArgs> = {}>(args?: Subset<T, userForXSSDefaultArgs<ExtArgs>>): Prisma__userForXSSClient<$Result.GetResult<Prisma.$userForXSSPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Post model
   */ 
  interface PostFieldRefs {
    readonly id: FieldRef<"Post", 'String'>
    readonly createdAt: FieldRef<"Post", 'DateTime'>
    readonly updatedAt: FieldRef<"Post", 'DateTime'>
    readonly content: FieldRef<"Post", 'String'>
    readonly userId: FieldRef<"Post", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Post findUnique
   */
  export type PostFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Post to fetch.
     */
    where: PostWhereUniqueInput
  }

  /**
   * Post findUniqueOrThrow
   */
  export type PostFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Post to fetch.
     */
    where: PostWhereUniqueInput
  }

  /**
   * Post findFirst
   */
  export type PostFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Post to fetch.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Posts.
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Posts.
     */
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * Post findFirstOrThrow
   */
  export type PostFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Post to fetch.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Posts.
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Posts.
     */
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * Post findMany
   */
  export type PostFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Posts to fetch.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Posts.
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * Post create
   */
  export type PostCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * The data needed to create a Post.
     */
    data: XOR<PostCreateInput, PostUncheckedCreateInput>
  }

  /**
   * Post createMany
   */
  export type PostCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Posts.
     */
    data: PostCreateManyInput | PostCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Post createManyAndReturn
   */
  export type PostCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * The data used to create many Posts.
     */
    data: PostCreateManyInput | PostCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Post update
   */
  export type PostUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * The data needed to update a Post.
     */
    data: XOR<PostUpdateInput, PostUncheckedUpdateInput>
    /**
     * Choose, which Post to update.
     */
    where: PostWhereUniqueInput
  }

  /**
   * Post updateMany
   */
  export type PostUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Posts.
     */
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyInput>
    /**
     * Filter which Posts to update
     */
    where?: PostWhereInput
    /**
     * Limit how many Posts to update.
     */
    limit?: number
  }

  /**
   * Post updateManyAndReturn
   */
  export type PostUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * The data used to update Posts.
     */
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyInput>
    /**
     * Filter which Posts to update
     */
    where?: PostWhereInput
    /**
     * Limit how many Posts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Post upsert
   */
  export type PostUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * The filter to search for the Post to update in case it exists.
     */
    where: PostWhereUniqueInput
    /**
     * In case the Post found by the `where` argument doesn't exist, create a new Post with this data.
     */
    create: XOR<PostCreateInput, PostUncheckedCreateInput>
    /**
     * In case the Post was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PostUpdateInput, PostUncheckedUpdateInput>
  }

  /**
   * Post delete
   */
  export type PostDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter which Post to delete.
     */
    where: PostWhereUniqueInput
  }

  /**
   * Post deleteMany
   */
  export type PostDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Posts to delete
     */
    where?: PostWhereInput
    /**
     * Limit how many Posts to delete.
     */
    limit?: number
  }

  /**
   * Post without action
   */
  export type PostDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
  }


  /**
   * Model lab2sql
   */

  export type AggregateLab2sql = {
    _count: Lab2sqlCountAggregateOutputType | null
    _min: Lab2sqlMinAggregateOutputType | null
    _max: Lab2sqlMaxAggregateOutputType | null
  }

  export type Lab2sqlMinAggregateOutputType = {
    id: string | null
    category: string | null
    released: string | null
  }

  export type Lab2sqlMaxAggregateOutputType = {
    id: string | null
    category: string | null
    released: string | null
  }

  export type Lab2sqlCountAggregateOutputType = {
    id: number
    category: number
    released: number
    _all: number
  }


  export type Lab2sqlMinAggregateInputType = {
    id?: true
    category?: true
    released?: true
  }

  export type Lab2sqlMaxAggregateInputType = {
    id?: true
    category?: true
    released?: true
  }

  export type Lab2sqlCountAggregateInputType = {
    id?: true
    category?: true
    released?: true
    _all?: true
  }

  export type Lab2sqlAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which lab2sql to aggregate.
     */
    where?: lab2sqlWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of lab2sqls to fetch.
     */
    orderBy?: lab2sqlOrderByWithRelationInput | lab2sqlOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: lab2sqlWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` lab2sqls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` lab2sqls.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned lab2sqls
    **/
    _count?: true | Lab2sqlCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Lab2sqlMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Lab2sqlMaxAggregateInputType
  }

  export type GetLab2sqlAggregateType<T extends Lab2sqlAggregateArgs> = {
        [P in keyof T & keyof AggregateLab2sql]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLab2sql[P]>
      : GetScalarType<T[P], AggregateLab2sql[P]>
  }




  export type lab2sqlGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: lab2sqlWhereInput
    orderBy?: lab2sqlOrderByWithAggregationInput | lab2sqlOrderByWithAggregationInput[]
    by: Lab2sqlScalarFieldEnum[] | Lab2sqlScalarFieldEnum
    having?: lab2sqlScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Lab2sqlCountAggregateInputType | true
    _min?: Lab2sqlMinAggregateInputType
    _max?: Lab2sqlMaxAggregateInputType
  }

  export type Lab2sqlGroupByOutputType = {
    id: string
    category: string | null
    released: string | null
    _count: Lab2sqlCountAggregateOutputType | null
    _min: Lab2sqlMinAggregateOutputType | null
    _max: Lab2sqlMaxAggregateOutputType | null
  }

  type GetLab2sqlGroupByPayload<T extends lab2sqlGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Lab2sqlGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Lab2sqlGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Lab2sqlGroupByOutputType[P]>
            : GetScalarType<T[P], Lab2sqlGroupByOutputType[P]>
        }
      >
    >


  export type lab2sqlSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    category?: boolean
    released?: boolean
  }, ExtArgs["result"]["lab2sql"]>

  export type lab2sqlSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    category?: boolean
    released?: boolean
  }, ExtArgs["result"]["lab2sql"]>

  export type lab2sqlSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    category?: boolean
    released?: boolean
  }, ExtArgs["result"]["lab2sql"]>

  export type lab2sqlSelectScalar = {
    id?: boolean
    category?: boolean
    released?: boolean
  }

  export type lab2sqlOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "category" | "released", ExtArgs["result"]["lab2sql"]>

  export type $lab2sqlPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "lab2sql"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      category: string | null
      released: string | null
    }, ExtArgs["result"]["lab2sql"]>
    composites: {}
  }

  type lab2sqlGetPayload<S extends boolean | null | undefined | lab2sqlDefaultArgs> = $Result.GetResult<Prisma.$lab2sqlPayload, S>

  type lab2sqlCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<lab2sqlFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Lab2sqlCountAggregateInputType | true
    }

  export interface lab2sqlDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['lab2sql'], meta: { name: 'lab2sql' } }
    /**
     * Find zero or one Lab2sql that matches the filter.
     * @param {lab2sqlFindUniqueArgs} args - Arguments to find a Lab2sql
     * @example
     * // Get one Lab2sql
     * const lab2sql = await prisma.lab2sql.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends lab2sqlFindUniqueArgs>(args: SelectSubset<T, lab2sqlFindUniqueArgs<ExtArgs>>): Prisma__lab2sqlClient<$Result.GetResult<Prisma.$lab2sqlPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Lab2sql that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {lab2sqlFindUniqueOrThrowArgs} args - Arguments to find a Lab2sql
     * @example
     * // Get one Lab2sql
     * const lab2sql = await prisma.lab2sql.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends lab2sqlFindUniqueOrThrowArgs>(args: SelectSubset<T, lab2sqlFindUniqueOrThrowArgs<ExtArgs>>): Prisma__lab2sqlClient<$Result.GetResult<Prisma.$lab2sqlPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Lab2sql that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {lab2sqlFindFirstArgs} args - Arguments to find a Lab2sql
     * @example
     * // Get one Lab2sql
     * const lab2sql = await prisma.lab2sql.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends lab2sqlFindFirstArgs>(args?: SelectSubset<T, lab2sqlFindFirstArgs<ExtArgs>>): Prisma__lab2sqlClient<$Result.GetResult<Prisma.$lab2sqlPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Lab2sql that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {lab2sqlFindFirstOrThrowArgs} args - Arguments to find a Lab2sql
     * @example
     * // Get one Lab2sql
     * const lab2sql = await prisma.lab2sql.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends lab2sqlFindFirstOrThrowArgs>(args?: SelectSubset<T, lab2sqlFindFirstOrThrowArgs<ExtArgs>>): Prisma__lab2sqlClient<$Result.GetResult<Prisma.$lab2sqlPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Lab2sqls that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {lab2sqlFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Lab2sqls
     * const lab2sqls = await prisma.lab2sql.findMany()
     * 
     * // Get first 10 Lab2sqls
     * const lab2sqls = await prisma.lab2sql.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const lab2sqlWithIdOnly = await prisma.lab2sql.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends lab2sqlFindManyArgs>(args?: SelectSubset<T, lab2sqlFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$lab2sqlPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Lab2sql.
     * @param {lab2sqlCreateArgs} args - Arguments to create a Lab2sql.
     * @example
     * // Create one Lab2sql
     * const Lab2sql = await prisma.lab2sql.create({
     *   data: {
     *     // ... data to create a Lab2sql
     *   }
     * })
     * 
     */
    create<T extends lab2sqlCreateArgs>(args: SelectSubset<T, lab2sqlCreateArgs<ExtArgs>>): Prisma__lab2sqlClient<$Result.GetResult<Prisma.$lab2sqlPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Lab2sqls.
     * @param {lab2sqlCreateManyArgs} args - Arguments to create many Lab2sqls.
     * @example
     * // Create many Lab2sqls
     * const lab2sql = await prisma.lab2sql.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends lab2sqlCreateManyArgs>(args?: SelectSubset<T, lab2sqlCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Lab2sqls and returns the data saved in the database.
     * @param {lab2sqlCreateManyAndReturnArgs} args - Arguments to create many Lab2sqls.
     * @example
     * // Create many Lab2sqls
     * const lab2sql = await prisma.lab2sql.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Lab2sqls and only return the `id`
     * const lab2sqlWithIdOnly = await prisma.lab2sql.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends lab2sqlCreateManyAndReturnArgs>(args?: SelectSubset<T, lab2sqlCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$lab2sqlPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Lab2sql.
     * @param {lab2sqlDeleteArgs} args - Arguments to delete one Lab2sql.
     * @example
     * // Delete one Lab2sql
     * const Lab2sql = await prisma.lab2sql.delete({
     *   where: {
     *     // ... filter to delete one Lab2sql
     *   }
     * })
     * 
     */
    delete<T extends lab2sqlDeleteArgs>(args: SelectSubset<T, lab2sqlDeleteArgs<ExtArgs>>): Prisma__lab2sqlClient<$Result.GetResult<Prisma.$lab2sqlPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Lab2sql.
     * @param {lab2sqlUpdateArgs} args - Arguments to update one Lab2sql.
     * @example
     * // Update one Lab2sql
     * const lab2sql = await prisma.lab2sql.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends lab2sqlUpdateArgs>(args: SelectSubset<T, lab2sqlUpdateArgs<ExtArgs>>): Prisma__lab2sqlClient<$Result.GetResult<Prisma.$lab2sqlPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Lab2sqls.
     * @param {lab2sqlDeleteManyArgs} args - Arguments to filter Lab2sqls to delete.
     * @example
     * // Delete a few Lab2sqls
     * const { count } = await prisma.lab2sql.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends lab2sqlDeleteManyArgs>(args?: SelectSubset<T, lab2sqlDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Lab2sqls.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {lab2sqlUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Lab2sqls
     * const lab2sql = await prisma.lab2sql.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends lab2sqlUpdateManyArgs>(args: SelectSubset<T, lab2sqlUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Lab2sqls and returns the data updated in the database.
     * @param {lab2sqlUpdateManyAndReturnArgs} args - Arguments to update many Lab2sqls.
     * @example
     * // Update many Lab2sqls
     * const lab2sql = await prisma.lab2sql.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Lab2sqls and only return the `id`
     * const lab2sqlWithIdOnly = await prisma.lab2sql.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends lab2sqlUpdateManyAndReturnArgs>(args: SelectSubset<T, lab2sqlUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$lab2sqlPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Lab2sql.
     * @param {lab2sqlUpsertArgs} args - Arguments to update or create a Lab2sql.
     * @example
     * // Update or create a Lab2sql
     * const lab2sql = await prisma.lab2sql.upsert({
     *   create: {
     *     // ... data to create a Lab2sql
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Lab2sql we want to update
     *   }
     * })
     */
    upsert<T extends lab2sqlUpsertArgs>(args: SelectSubset<T, lab2sqlUpsertArgs<ExtArgs>>): Prisma__lab2sqlClient<$Result.GetResult<Prisma.$lab2sqlPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Lab2sqls.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {lab2sqlCountArgs} args - Arguments to filter Lab2sqls to count.
     * @example
     * // Count the number of Lab2sqls
     * const count = await prisma.lab2sql.count({
     *   where: {
     *     // ... the filter for the Lab2sqls we want to count
     *   }
     * })
    **/
    count<T extends lab2sqlCountArgs>(
      args?: Subset<T, lab2sqlCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Lab2sqlCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Lab2sql.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Lab2sqlAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Lab2sqlAggregateArgs>(args: Subset<T, Lab2sqlAggregateArgs>): Prisma.PrismaPromise<GetLab2sqlAggregateType<T>>

    /**
     * Group by Lab2sql.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {lab2sqlGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends lab2sqlGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: lab2sqlGroupByArgs['orderBy'] }
        : { orderBy?: lab2sqlGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, lab2sqlGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLab2sqlGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the lab2sql model
   */
  readonly fields: lab2sqlFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for lab2sql.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__lab2sqlClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the lab2sql model
   */ 
  interface lab2sqlFieldRefs {
    readonly id: FieldRef<"lab2sql", 'String'>
    readonly category: FieldRef<"lab2sql", 'String'>
    readonly released: FieldRef<"lab2sql", 'String'>
  }
    

  // Custom InputTypes
  /**
   * lab2sql findUnique
   */
  export type lab2sqlFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lab2sql
     */
    select?: lab2sqlSelect<ExtArgs> | null
    /**
     * Omit specific fields from the lab2sql
     */
    omit?: lab2sqlOmit<ExtArgs> | null
    /**
     * Filter, which lab2sql to fetch.
     */
    where: lab2sqlWhereUniqueInput
  }

  /**
   * lab2sql findUniqueOrThrow
   */
  export type lab2sqlFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lab2sql
     */
    select?: lab2sqlSelect<ExtArgs> | null
    /**
     * Omit specific fields from the lab2sql
     */
    omit?: lab2sqlOmit<ExtArgs> | null
    /**
     * Filter, which lab2sql to fetch.
     */
    where: lab2sqlWhereUniqueInput
  }

  /**
   * lab2sql findFirst
   */
  export type lab2sqlFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lab2sql
     */
    select?: lab2sqlSelect<ExtArgs> | null
    /**
     * Omit specific fields from the lab2sql
     */
    omit?: lab2sqlOmit<ExtArgs> | null
    /**
     * Filter, which lab2sql to fetch.
     */
    where?: lab2sqlWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of lab2sqls to fetch.
     */
    orderBy?: lab2sqlOrderByWithRelationInput | lab2sqlOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for lab2sqls.
     */
    cursor?: lab2sqlWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` lab2sqls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` lab2sqls.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of lab2sqls.
     */
    distinct?: Lab2sqlScalarFieldEnum | Lab2sqlScalarFieldEnum[]
  }

  /**
   * lab2sql findFirstOrThrow
   */
  export type lab2sqlFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lab2sql
     */
    select?: lab2sqlSelect<ExtArgs> | null
    /**
     * Omit specific fields from the lab2sql
     */
    omit?: lab2sqlOmit<ExtArgs> | null
    /**
     * Filter, which lab2sql to fetch.
     */
    where?: lab2sqlWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of lab2sqls to fetch.
     */
    orderBy?: lab2sqlOrderByWithRelationInput | lab2sqlOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for lab2sqls.
     */
    cursor?: lab2sqlWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` lab2sqls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` lab2sqls.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of lab2sqls.
     */
    distinct?: Lab2sqlScalarFieldEnum | Lab2sqlScalarFieldEnum[]
  }

  /**
   * lab2sql findMany
   */
  export type lab2sqlFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lab2sql
     */
    select?: lab2sqlSelect<ExtArgs> | null
    /**
     * Omit specific fields from the lab2sql
     */
    omit?: lab2sqlOmit<ExtArgs> | null
    /**
     * Filter, which lab2sqls to fetch.
     */
    where?: lab2sqlWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of lab2sqls to fetch.
     */
    orderBy?: lab2sqlOrderByWithRelationInput | lab2sqlOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing lab2sqls.
     */
    cursor?: lab2sqlWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` lab2sqls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` lab2sqls.
     */
    skip?: number
    distinct?: Lab2sqlScalarFieldEnum | Lab2sqlScalarFieldEnum[]
  }

  /**
   * lab2sql create
   */
  export type lab2sqlCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lab2sql
     */
    select?: lab2sqlSelect<ExtArgs> | null
    /**
     * Omit specific fields from the lab2sql
     */
    omit?: lab2sqlOmit<ExtArgs> | null
    /**
     * The data needed to create a lab2sql.
     */
    data?: XOR<lab2sqlCreateInput, lab2sqlUncheckedCreateInput>
  }

  /**
   * lab2sql createMany
   */
  export type lab2sqlCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many lab2sqls.
     */
    data: lab2sqlCreateManyInput | lab2sqlCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * lab2sql createManyAndReturn
   */
  export type lab2sqlCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lab2sql
     */
    select?: lab2sqlSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the lab2sql
     */
    omit?: lab2sqlOmit<ExtArgs> | null
    /**
     * The data used to create many lab2sqls.
     */
    data: lab2sqlCreateManyInput | lab2sqlCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * lab2sql update
   */
  export type lab2sqlUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lab2sql
     */
    select?: lab2sqlSelect<ExtArgs> | null
    /**
     * Omit specific fields from the lab2sql
     */
    omit?: lab2sqlOmit<ExtArgs> | null
    /**
     * The data needed to update a lab2sql.
     */
    data: XOR<lab2sqlUpdateInput, lab2sqlUncheckedUpdateInput>
    /**
     * Choose, which lab2sql to update.
     */
    where: lab2sqlWhereUniqueInput
  }

  /**
   * lab2sql updateMany
   */
  export type lab2sqlUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update lab2sqls.
     */
    data: XOR<lab2sqlUpdateManyMutationInput, lab2sqlUncheckedUpdateManyInput>
    /**
     * Filter which lab2sqls to update
     */
    where?: lab2sqlWhereInput
    /**
     * Limit how many lab2sqls to update.
     */
    limit?: number
  }

  /**
   * lab2sql updateManyAndReturn
   */
  export type lab2sqlUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lab2sql
     */
    select?: lab2sqlSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the lab2sql
     */
    omit?: lab2sqlOmit<ExtArgs> | null
    /**
     * The data used to update lab2sqls.
     */
    data: XOR<lab2sqlUpdateManyMutationInput, lab2sqlUncheckedUpdateManyInput>
    /**
     * Filter which lab2sqls to update
     */
    where?: lab2sqlWhereInput
    /**
     * Limit how many lab2sqls to update.
     */
    limit?: number
  }

  /**
   * lab2sql upsert
   */
  export type lab2sqlUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lab2sql
     */
    select?: lab2sqlSelect<ExtArgs> | null
    /**
     * Omit specific fields from the lab2sql
     */
    omit?: lab2sqlOmit<ExtArgs> | null
    /**
     * The filter to search for the lab2sql to update in case it exists.
     */
    where: lab2sqlWhereUniqueInput
    /**
     * In case the lab2sql found by the `where` argument doesn't exist, create a new lab2sql with this data.
     */
    create: XOR<lab2sqlCreateInput, lab2sqlUncheckedCreateInput>
    /**
     * In case the lab2sql was found with the provided `where` argument, update it with this data.
     */
    update: XOR<lab2sqlUpdateInput, lab2sqlUncheckedUpdateInput>
  }

  /**
   * lab2sql delete
   */
  export type lab2sqlDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lab2sql
     */
    select?: lab2sqlSelect<ExtArgs> | null
    /**
     * Omit specific fields from the lab2sql
     */
    omit?: lab2sqlOmit<ExtArgs> | null
    /**
     * Filter which lab2sql to delete.
     */
    where: lab2sqlWhereUniqueInput
  }

  /**
   * lab2sql deleteMany
   */
  export type lab2sqlDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which lab2sqls to delete
     */
    where?: lab2sqlWhereInput
    /**
     * Limit how many lab2sqls to delete.
     */
    limit?: number
  }

  /**
   * lab2sql without action
   */
  export type lab2sqlDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lab2sql
     */
    select?: lab2sqlSelect<ExtArgs> | null
    /**
     * Omit specific fields from the lab2sql
     */
    omit?: lab2sqlOmit<ExtArgs> | null
  }


  /**
   * Model lab3sql
   */

  export type AggregateLab3sql = {
    _count: Lab3sqlCountAggregateOutputType | null
    _min: Lab3sqlMinAggregateOutputType | null
    _max: Lab3sqlMaxAggregateOutputType | null
  }

  export type Lab3sqlMinAggregateOutputType = {
    id: string | null
    name: string | null
    price: string | null
    category: string | null
  }

  export type Lab3sqlMaxAggregateOutputType = {
    id: string | null
    name: string | null
    price: string | null
    category: string | null
  }

  export type Lab3sqlCountAggregateOutputType = {
    id: number
    name: number
    price: number
    category: number
    _all: number
  }


  export type Lab3sqlMinAggregateInputType = {
    id?: true
    name?: true
    price?: true
    category?: true
  }

  export type Lab3sqlMaxAggregateInputType = {
    id?: true
    name?: true
    price?: true
    category?: true
  }

  export type Lab3sqlCountAggregateInputType = {
    id?: true
    name?: true
    price?: true
    category?: true
    _all?: true
  }

  export type Lab3sqlAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which lab3sql to aggregate.
     */
    where?: lab3sqlWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of lab3sqls to fetch.
     */
    orderBy?: lab3sqlOrderByWithRelationInput | lab3sqlOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: lab3sqlWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` lab3sqls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` lab3sqls.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned lab3sqls
    **/
    _count?: true | Lab3sqlCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Lab3sqlMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Lab3sqlMaxAggregateInputType
  }

  export type GetLab3sqlAggregateType<T extends Lab3sqlAggregateArgs> = {
        [P in keyof T & keyof AggregateLab3sql]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLab3sql[P]>
      : GetScalarType<T[P], AggregateLab3sql[P]>
  }




  export type lab3sqlGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: lab3sqlWhereInput
    orderBy?: lab3sqlOrderByWithAggregationInput | lab3sqlOrderByWithAggregationInput[]
    by: Lab3sqlScalarFieldEnum[] | Lab3sqlScalarFieldEnum
    having?: lab3sqlScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Lab3sqlCountAggregateInputType | true
    _min?: Lab3sqlMinAggregateInputType
    _max?: Lab3sqlMaxAggregateInputType
  }

  export type Lab3sqlGroupByOutputType = {
    id: string
    name: string | null
    price: string | null
    category: string | null
    _count: Lab3sqlCountAggregateOutputType | null
    _min: Lab3sqlMinAggregateOutputType | null
    _max: Lab3sqlMaxAggregateOutputType | null
  }

  type GetLab3sqlGroupByPayload<T extends lab3sqlGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Lab3sqlGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Lab3sqlGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Lab3sqlGroupByOutputType[P]>
            : GetScalarType<T[P], Lab3sqlGroupByOutputType[P]>
        }
      >
    >


  export type lab3sqlSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    price?: boolean
    category?: boolean
  }, ExtArgs["result"]["lab3sql"]>

  export type lab3sqlSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    price?: boolean
    category?: boolean
  }, ExtArgs["result"]["lab3sql"]>

  export type lab3sqlSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    price?: boolean
    category?: boolean
  }, ExtArgs["result"]["lab3sql"]>

  export type lab3sqlSelectScalar = {
    id?: boolean
    name?: boolean
    price?: boolean
    category?: boolean
  }

  export type lab3sqlOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "price" | "category", ExtArgs["result"]["lab3sql"]>

  export type $lab3sqlPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "lab3sql"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string | null
      price: string | null
      category: string | null
    }, ExtArgs["result"]["lab3sql"]>
    composites: {}
  }

  type lab3sqlGetPayload<S extends boolean | null | undefined | lab3sqlDefaultArgs> = $Result.GetResult<Prisma.$lab3sqlPayload, S>

  type lab3sqlCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<lab3sqlFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Lab3sqlCountAggregateInputType | true
    }

  export interface lab3sqlDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['lab3sql'], meta: { name: 'lab3sql' } }
    /**
     * Find zero or one Lab3sql that matches the filter.
     * @param {lab3sqlFindUniqueArgs} args - Arguments to find a Lab3sql
     * @example
     * // Get one Lab3sql
     * const lab3sql = await prisma.lab3sql.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends lab3sqlFindUniqueArgs>(args: SelectSubset<T, lab3sqlFindUniqueArgs<ExtArgs>>): Prisma__lab3sqlClient<$Result.GetResult<Prisma.$lab3sqlPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Lab3sql that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {lab3sqlFindUniqueOrThrowArgs} args - Arguments to find a Lab3sql
     * @example
     * // Get one Lab3sql
     * const lab3sql = await prisma.lab3sql.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends lab3sqlFindUniqueOrThrowArgs>(args: SelectSubset<T, lab3sqlFindUniqueOrThrowArgs<ExtArgs>>): Prisma__lab3sqlClient<$Result.GetResult<Prisma.$lab3sqlPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Lab3sql that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {lab3sqlFindFirstArgs} args - Arguments to find a Lab3sql
     * @example
     * // Get one Lab3sql
     * const lab3sql = await prisma.lab3sql.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends lab3sqlFindFirstArgs>(args?: SelectSubset<T, lab3sqlFindFirstArgs<ExtArgs>>): Prisma__lab3sqlClient<$Result.GetResult<Prisma.$lab3sqlPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Lab3sql that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {lab3sqlFindFirstOrThrowArgs} args - Arguments to find a Lab3sql
     * @example
     * // Get one Lab3sql
     * const lab3sql = await prisma.lab3sql.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends lab3sqlFindFirstOrThrowArgs>(args?: SelectSubset<T, lab3sqlFindFirstOrThrowArgs<ExtArgs>>): Prisma__lab3sqlClient<$Result.GetResult<Prisma.$lab3sqlPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Lab3sqls that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {lab3sqlFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Lab3sqls
     * const lab3sqls = await prisma.lab3sql.findMany()
     * 
     * // Get first 10 Lab3sqls
     * const lab3sqls = await prisma.lab3sql.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const lab3sqlWithIdOnly = await prisma.lab3sql.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends lab3sqlFindManyArgs>(args?: SelectSubset<T, lab3sqlFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$lab3sqlPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Lab3sql.
     * @param {lab3sqlCreateArgs} args - Arguments to create a Lab3sql.
     * @example
     * // Create one Lab3sql
     * const Lab3sql = await prisma.lab3sql.create({
     *   data: {
     *     // ... data to create a Lab3sql
     *   }
     * })
     * 
     */
    create<T extends lab3sqlCreateArgs>(args: SelectSubset<T, lab3sqlCreateArgs<ExtArgs>>): Prisma__lab3sqlClient<$Result.GetResult<Prisma.$lab3sqlPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Lab3sqls.
     * @param {lab3sqlCreateManyArgs} args - Arguments to create many Lab3sqls.
     * @example
     * // Create many Lab3sqls
     * const lab3sql = await prisma.lab3sql.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends lab3sqlCreateManyArgs>(args?: SelectSubset<T, lab3sqlCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Lab3sqls and returns the data saved in the database.
     * @param {lab3sqlCreateManyAndReturnArgs} args - Arguments to create many Lab3sqls.
     * @example
     * // Create many Lab3sqls
     * const lab3sql = await prisma.lab3sql.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Lab3sqls and only return the `id`
     * const lab3sqlWithIdOnly = await prisma.lab3sql.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends lab3sqlCreateManyAndReturnArgs>(args?: SelectSubset<T, lab3sqlCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$lab3sqlPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Lab3sql.
     * @param {lab3sqlDeleteArgs} args - Arguments to delete one Lab3sql.
     * @example
     * // Delete one Lab3sql
     * const Lab3sql = await prisma.lab3sql.delete({
     *   where: {
     *     // ... filter to delete one Lab3sql
     *   }
     * })
     * 
     */
    delete<T extends lab3sqlDeleteArgs>(args: SelectSubset<T, lab3sqlDeleteArgs<ExtArgs>>): Prisma__lab3sqlClient<$Result.GetResult<Prisma.$lab3sqlPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Lab3sql.
     * @param {lab3sqlUpdateArgs} args - Arguments to update one Lab3sql.
     * @example
     * // Update one Lab3sql
     * const lab3sql = await prisma.lab3sql.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends lab3sqlUpdateArgs>(args: SelectSubset<T, lab3sqlUpdateArgs<ExtArgs>>): Prisma__lab3sqlClient<$Result.GetResult<Prisma.$lab3sqlPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Lab3sqls.
     * @param {lab3sqlDeleteManyArgs} args - Arguments to filter Lab3sqls to delete.
     * @example
     * // Delete a few Lab3sqls
     * const { count } = await prisma.lab3sql.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends lab3sqlDeleteManyArgs>(args?: SelectSubset<T, lab3sqlDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Lab3sqls.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {lab3sqlUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Lab3sqls
     * const lab3sql = await prisma.lab3sql.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends lab3sqlUpdateManyArgs>(args: SelectSubset<T, lab3sqlUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Lab3sqls and returns the data updated in the database.
     * @param {lab3sqlUpdateManyAndReturnArgs} args - Arguments to update many Lab3sqls.
     * @example
     * // Update many Lab3sqls
     * const lab3sql = await prisma.lab3sql.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Lab3sqls and only return the `id`
     * const lab3sqlWithIdOnly = await prisma.lab3sql.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends lab3sqlUpdateManyAndReturnArgs>(args: SelectSubset<T, lab3sqlUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$lab3sqlPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Lab3sql.
     * @param {lab3sqlUpsertArgs} args - Arguments to update or create a Lab3sql.
     * @example
     * // Update or create a Lab3sql
     * const lab3sql = await prisma.lab3sql.upsert({
     *   create: {
     *     // ... data to create a Lab3sql
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Lab3sql we want to update
     *   }
     * })
     */
    upsert<T extends lab3sqlUpsertArgs>(args: SelectSubset<T, lab3sqlUpsertArgs<ExtArgs>>): Prisma__lab3sqlClient<$Result.GetResult<Prisma.$lab3sqlPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Lab3sqls.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {lab3sqlCountArgs} args - Arguments to filter Lab3sqls to count.
     * @example
     * // Count the number of Lab3sqls
     * const count = await prisma.lab3sql.count({
     *   where: {
     *     // ... the filter for the Lab3sqls we want to count
     *   }
     * })
    **/
    count<T extends lab3sqlCountArgs>(
      args?: Subset<T, lab3sqlCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Lab3sqlCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Lab3sql.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Lab3sqlAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Lab3sqlAggregateArgs>(args: Subset<T, Lab3sqlAggregateArgs>): Prisma.PrismaPromise<GetLab3sqlAggregateType<T>>

    /**
     * Group by Lab3sql.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {lab3sqlGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends lab3sqlGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: lab3sqlGroupByArgs['orderBy'] }
        : { orderBy?: lab3sqlGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, lab3sqlGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLab3sqlGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the lab3sql model
   */
  readonly fields: lab3sqlFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for lab3sql.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__lab3sqlClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the lab3sql model
   */ 
  interface lab3sqlFieldRefs {
    readonly id: FieldRef<"lab3sql", 'String'>
    readonly name: FieldRef<"lab3sql", 'String'>
    readonly price: FieldRef<"lab3sql", 'String'>
    readonly category: FieldRef<"lab3sql", 'String'>
  }
    

  // Custom InputTypes
  /**
   * lab3sql findUnique
   */
  export type lab3sqlFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lab3sql
     */
    select?: lab3sqlSelect<ExtArgs> | null
    /**
     * Omit specific fields from the lab3sql
     */
    omit?: lab3sqlOmit<ExtArgs> | null
    /**
     * Filter, which lab3sql to fetch.
     */
    where: lab3sqlWhereUniqueInput
  }

  /**
   * lab3sql findUniqueOrThrow
   */
  export type lab3sqlFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lab3sql
     */
    select?: lab3sqlSelect<ExtArgs> | null
    /**
     * Omit specific fields from the lab3sql
     */
    omit?: lab3sqlOmit<ExtArgs> | null
    /**
     * Filter, which lab3sql to fetch.
     */
    where: lab3sqlWhereUniqueInput
  }

  /**
   * lab3sql findFirst
   */
  export type lab3sqlFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lab3sql
     */
    select?: lab3sqlSelect<ExtArgs> | null
    /**
     * Omit specific fields from the lab3sql
     */
    omit?: lab3sqlOmit<ExtArgs> | null
    /**
     * Filter, which lab3sql to fetch.
     */
    where?: lab3sqlWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of lab3sqls to fetch.
     */
    orderBy?: lab3sqlOrderByWithRelationInput | lab3sqlOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for lab3sqls.
     */
    cursor?: lab3sqlWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` lab3sqls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` lab3sqls.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of lab3sqls.
     */
    distinct?: Lab3sqlScalarFieldEnum | Lab3sqlScalarFieldEnum[]
  }

  /**
   * lab3sql findFirstOrThrow
   */
  export type lab3sqlFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lab3sql
     */
    select?: lab3sqlSelect<ExtArgs> | null
    /**
     * Omit specific fields from the lab3sql
     */
    omit?: lab3sqlOmit<ExtArgs> | null
    /**
     * Filter, which lab3sql to fetch.
     */
    where?: lab3sqlWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of lab3sqls to fetch.
     */
    orderBy?: lab3sqlOrderByWithRelationInput | lab3sqlOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for lab3sqls.
     */
    cursor?: lab3sqlWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` lab3sqls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` lab3sqls.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of lab3sqls.
     */
    distinct?: Lab3sqlScalarFieldEnum | Lab3sqlScalarFieldEnum[]
  }

  /**
   * lab3sql findMany
   */
  export type lab3sqlFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lab3sql
     */
    select?: lab3sqlSelect<ExtArgs> | null
    /**
     * Omit specific fields from the lab3sql
     */
    omit?: lab3sqlOmit<ExtArgs> | null
    /**
     * Filter, which lab3sqls to fetch.
     */
    where?: lab3sqlWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of lab3sqls to fetch.
     */
    orderBy?: lab3sqlOrderByWithRelationInput | lab3sqlOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing lab3sqls.
     */
    cursor?: lab3sqlWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` lab3sqls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` lab3sqls.
     */
    skip?: number
    distinct?: Lab3sqlScalarFieldEnum | Lab3sqlScalarFieldEnum[]
  }

  /**
   * lab3sql create
   */
  export type lab3sqlCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lab3sql
     */
    select?: lab3sqlSelect<ExtArgs> | null
    /**
     * Omit specific fields from the lab3sql
     */
    omit?: lab3sqlOmit<ExtArgs> | null
    /**
     * The data needed to create a lab3sql.
     */
    data?: XOR<lab3sqlCreateInput, lab3sqlUncheckedCreateInput>
  }

  /**
   * lab3sql createMany
   */
  export type lab3sqlCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many lab3sqls.
     */
    data: lab3sqlCreateManyInput | lab3sqlCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * lab3sql createManyAndReturn
   */
  export type lab3sqlCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lab3sql
     */
    select?: lab3sqlSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the lab3sql
     */
    omit?: lab3sqlOmit<ExtArgs> | null
    /**
     * The data used to create many lab3sqls.
     */
    data: lab3sqlCreateManyInput | lab3sqlCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * lab3sql update
   */
  export type lab3sqlUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lab3sql
     */
    select?: lab3sqlSelect<ExtArgs> | null
    /**
     * Omit specific fields from the lab3sql
     */
    omit?: lab3sqlOmit<ExtArgs> | null
    /**
     * The data needed to update a lab3sql.
     */
    data: XOR<lab3sqlUpdateInput, lab3sqlUncheckedUpdateInput>
    /**
     * Choose, which lab3sql to update.
     */
    where: lab3sqlWhereUniqueInput
  }

  /**
   * lab3sql updateMany
   */
  export type lab3sqlUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update lab3sqls.
     */
    data: XOR<lab3sqlUpdateManyMutationInput, lab3sqlUncheckedUpdateManyInput>
    /**
     * Filter which lab3sqls to update
     */
    where?: lab3sqlWhereInput
    /**
     * Limit how many lab3sqls to update.
     */
    limit?: number
  }

  /**
   * lab3sql updateManyAndReturn
   */
  export type lab3sqlUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lab3sql
     */
    select?: lab3sqlSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the lab3sql
     */
    omit?: lab3sqlOmit<ExtArgs> | null
    /**
     * The data used to update lab3sqls.
     */
    data: XOR<lab3sqlUpdateManyMutationInput, lab3sqlUncheckedUpdateManyInput>
    /**
     * Filter which lab3sqls to update
     */
    where?: lab3sqlWhereInput
    /**
     * Limit how many lab3sqls to update.
     */
    limit?: number
  }

  /**
   * lab3sql upsert
   */
  export type lab3sqlUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lab3sql
     */
    select?: lab3sqlSelect<ExtArgs> | null
    /**
     * Omit specific fields from the lab3sql
     */
    omit?: lab3sqlOmit<ExtArgs> | null
    /**
     * The filter to search for the lab3sql to update in case it exists.
     */
    where: lab3sqlWhereUniqueInput
    /**
     * In case the lab3sql found by the `where` argument doesn't exist, create a new lab3sql with this data.
     */
    create: XOR<lab3sqlCreateInput, lab3sqlUncheckedCreateInput>
    /**
     * In case the lab3sql was found with the provided `where` argument, update it with this data.
     */
    update: XOR<lab3sqlUpdateInput, lab3sqlUncheckedUpdateInput>
  }

  /**
   * lab3sql delete
   */
  export type lab3sqlDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lab3sql
     */
    select?: lab3sqlSelect<ExtArgs> | null
    /**
     * Omit specific fields from the lab3sql
     */
    omit?: lab3sqlOmit<ExtArgs> | null
    /**
     * Filter which lab3sql to delete.
     */
    where: lab3sqlWhereUniqueInput
  }

  /**
   * lab3sql deleteMany
   */
  export type lab3sqlDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which lab3sqls to delete
     */
    where?: lab3sqlWhereInput
    /**
     * Limit how many lab3sqls to delete.
     */
    limit?: number
  }

  /**
   * lab3sql without action
   */
  export type lab3sqlDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lab3sql
     */
    select?: lab3sqlSelect<ExtArgs> | null
    /**
     * Omit specific fields from the lab3sql
     */
    omit?: lab3sqlOmit<ExtArgs> | null
  }


  /**
   * Model ACUser
   */

  export type AggregateACUser = {
    _count: ACUserCountAggregateOutputType | null
    _avg: ACUserAvgAggregateOutputType | null
    _sum: ACUserSumAggregateOutputType | null
    _min: ACUserMinAggregateOutputType | null
    _max: ACUserMaxAggregateOutputType | null
  }

  export type ACUserAvgAggregateOutputType = {
    id: number | null
  }

  export type ACUserSumAggregateOutputType = {
    id: number | null
  }

  export type ACUserMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type ACUserMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type ACUserCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type ACUserAvgAggregateInputType = {
    id?: true
  }

  export type ACUserSumAggregateInputType = {
    id?: true
  }

  export type ACUserMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type ACUserMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type ACUserCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type ACUserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ACUser to aggregate.
     */
    where?: ACUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ACUsers to fetch.
     */
    orderBy?: ACUserOrderByWithRelationInput | ACUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ACUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ACUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ACUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ACUsers
    **/
    _count?: true | ACUserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ACUserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ACUserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ACUserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ACUserMaxAggregateInputType
  }

  export type GetACUserAggregateType<T extends ACUserAggregateArgs> = {
        [P in keyof T & keyof AggregateACUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateACUser[P]>
      : GetScalarType<T[P], AggregateACUser[P]>
  }




  export type ACUserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ACUserWhereInput
    orderBy?: ACUserOrderByWithAggregationInput | ACUserOrderByWithAggregationInput[]
    by: ACUserScalarFieldEnum[] | ACUserScalarFieldEnum
    having?: ACUserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ACUserCountAggregateInputType | true
    _avg?: ACUserAvgAggregateInputType
    _sum?: ACUserSumAggregateInputType
    _min?: ACUserMinAggregateInputType
    _max?: ACUserMaxAggregateInputType
  }

  export type ACUserGroupByOutputType = {
    id: number
    name: string
    _count: ACUserCountAggregateOutputType | null
    _avg: ACUserAvgAggregateOutputType | null
    _sum: ACUserSumAggregateOutputType | null
    _min: ACUserMinAggregateOutputType | null
    _max: ACUserMaxAggregateOutputType | null
  }

  type GetACUserGroupByPayload<T extends ACUserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ACUserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ACUserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ACUserGroupByOutputType[P]>
            : GetScalarType<T[P], ACUserGroupByOutputType[P]>
        }
      >
    >


  export type ACUserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["aCUser"]>

  export type ACUserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["aCUser"]>

  export type ACUserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["aCUser"]>

  export type ACUserSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type ACUserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name", ExtArgs["result"]["aCUser"]>

  export type $ACUserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ACUser"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["aCUser"]>
    composites: {}
  }

  type ACUserGetPayload<S extends boolean | null | undefined | ACUserDefaultArgs> = $Result.GetResult<Prisma.$ACUserPayload, S>

  type ACUserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ACUserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ACUserCountAggregateInputType | true
    }

  export interface ACUserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ACUser'], meta: { name: 'ACUser' } }
    /**
     * Find zero or one ACUser that matches the filter.
     * @param {ACUserFindUniqueArgs} args - Arguments to find a ACUser
     * @example
     * // Get one ACUser
     * const aCUser = await prisma.aCUser.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ACUserFindUniqueArgs>(args: SelectSubset<T, ACUserFindUniqueArgs<ExtArgs>>): Prisma__ACUserClient<$Result.GetResult<Prisma.$ACUserPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one ACUser that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ACUserFindUniqueOrThrowArgs} args - Arguments to find a ACUser
     * @example
     * // Get one ACUser
     * const aCUser = await prisma.aCUser.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ACUserFindUniqueOrThrowArgs>(args: SelectSubset<T, ACUserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ACUserClient<$Result.GetResult<Prisma.$ACUserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first ACUser that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ACUserFindFirstArgs} args - Arguments to find a ACUser
     * @example
     * // Get one ACUser
     * const aCUser = await prisma.aCUser.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ACUserFindFirstArgs>(args?: SelectSubset<T, ACUserFindFirstArgs<ExtArgs>>): Prisma__ACUserClient<$Result.GetResult<Prisma.$ACUserPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first ACUser that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ACUserFindFirstOrThrowArgs} args - Arguments to find a ACUser
     * @example
     * // Get one ACUser
     * const aCUser = await prisma.aCUser.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ACUserFindFirstOrThrowArgs>(args?: SelectSubset<T, ACUserFindFirstOrThrowArgs<ExtArgs>>): Prisma__ACUserClient<$Result.GetResult<Prisma.$ACUserPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more ACUsers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ACUserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ACUsers
     * const aCUsers = await prisma.aCUser.findMany()
     * 
     * // Get first 10 ACUsers
     * const aCUsers = await prisma.aCUser.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const aCUserWithIdOnly = await prisma.aCUser.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ACUserFindManyArgs>(args?: SelectSubset<T, ACUserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ACUserPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a ACUser.
     * @param {ACUserCreateArgs} args - Arguments to create a ACUser.
     * @example
     * // Create one ACUser
     * const ACUser = await prisma.aCUser.create({
     *   data: {
     *     // ... data to create a ACUser
     *   }
     * })
     * 
     */
    create<T extends ACUserCreateArgs>(args: SelectSubset<T, ACUserCreateArgs<ExtArgs>>): Prisma__ACUserClient<$Result.GetResult<Prisma.$ACUserPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many ACUsers.
     * @param {ACUserCreateManyArgs} args - Arguments to create many ACUsers.
     * @example
     * // Create many ACUsers
     * const aCUser = await prisma.aCUser.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ACUserCreateManyArgs>(args?: SelectSubset<T, ACUserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ACUsers and returns the data saved in the database.
     * @param {ACUserCreateManyAndReturnArgs} args - Arguments to create many ACUsers.
     * @example
     * // Create many ACUsers
     * const aCUser = await prisma.aCUser.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ACUsers and only return the `id`
     * const aCUserWithIdOnly = await prisma.aCUser.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ACUserCreateManyAndReturnArgs>(args?: SelectSubset<T, ACUserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ACUserPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a ACUser.
     * @param {ACUserDeleteArgs} args - Arguments to delete one ACUser.
     * @example
     * // Delete one ACUser
     * const ACUser = await prisma.aCUser.delete({
     *   where: {
     *     // ... filter to delete one ACUser
     *   }
     * })
     * 
     */
    delete<T extends ACUserDeleteArgs>(args: SelectSubset<T, ACUserDeleteArgs<ExtArgs>>): Prisma__ACUserClient<$Result.GetResult<Prisma.$ACUserPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one ACUser.
     * @param {ACUserUpdateArgs} args - Arguments to update one ACUser.
     * @example
     * // Update one ACUser
     * const aCUser = await prisma.aCUser.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ACUserUpdateArgs>(args: SelectSubset<T, ACUserUpdateArgs<ExtArgs>>): Prisma__ACUserClient<$Result.GetResult<Prisma.$ACUserPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more ACUsers.
     * @param {ACUserDeleteManyArgs} args - Arguments to filter ACUsers to delete.
     * @example
     * // Delete a few ACUsers
     * const { count } = await prisma.aCUser.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ACUserDeleteManyArgs>(args?: SelectSubset<T, ACUserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ACUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ACUserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ACUsers
     * const aCUser = await prisma.aCUser.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ACUserUpdateManyArgs>(args: SelectSubset<T, ACUserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ACUsers and returns the data updated in the database.
     * @param {ACUserUpdateManyAndReturnArgs} args - Arguments to update many ACUsers.
     * @example
     * // Update many ACUsers
     * const aCUser = await prisma.aCUser.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ACUsers and only return the `id`
     * const aCUserWithIdOnly = await prisma.aCUser.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ACUserUpdateManyAndReturnArgs>(args: SelectSubset<T, ACUserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ACUserPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one ACUser.
     * @param {ACUserUpsertArgs} args - Arguments to update or create a ACUser.
     * @example
     * // Update or create a ACUser
     * const aCUser = await prisma.aCUser.upsert({
     *   create: {
     *     // ... data to create a ACUser
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ACUser we want to update
     *   }
     * })
     */
    upsert<T extends ACUserUpsertArgs>(args: SelectSubset<T, ACUserUpsertArgs<ExtArgs>>): Prisma__ACUserClient<$Result.GetResult<Prisma.$ACUserPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of ACUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ACUserCountArgs} args - Arguments to filter ACUsers to count.
     * @example
     * // Count the number of ACUsers
     * const count = await prisma.aCUser.count({
     *   where: {
     *     // ... the filter for the ACUsers we want to count
     *   }
     * })
    **/
    count<T extends ACUserCountArgs>(
      args?: Subset<T, ACUserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ACUserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ACUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ACUserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ACUserAggregateArgs>(args: Subset<T, ACUserAggregateArgs>): Prisma.PrismaPromise<GetACUserAggregateType<T>>

    /**
     * Group by ACUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ACUserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ACUserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ACUserGroupByArgs['orderBy'] }
        : { orderBy?: ACUserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ACUserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetACUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ACUser model
   */
  readonly fields: ACUserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ACUser.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ACUserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ACUser model
   */ 
  interface ACUserFieldRefs {
    readonly id: FieldRef<"ACUser", 'Int'>
    readonly name: FieldRef<"ACUser", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ACUser findUnique
   */
  export type ACUserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ACUser
     */
    select?: ACUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ACUser
     */
    omit?: ACUserOmit<ExtArgs> | null
    /**
     * Filter, which ACUser to fetch.
     */
    where: ACUserWhereUniqueInput
  }

  /**
   * ACUser findUniqueOrThrow
   */
  export type ACUserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ACUser
     */
    select?: ACUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ACUser
     */
    omit?: ACUserOmit<ExtArgs> | null
    /**
     * Filter, which ACUser to fetch.
     */
    where: ACUserWhereUniqueInput
  }

  /**
   * ACUser findFirst
   */
  export type ACUserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ACUser
     */
    select?: ACUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ACUser
     */
    omit?: ACUserOmit<ExtArgs> | null
    /**
     * Filter, which ACUser to fetch.
     */
    where?: ACUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ACUsers to fetch.
     */
    orderBy?: ACUserOrderByWithRelationInput | ACUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ACUsers.
     */
    cursor?: ACUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ACUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ACUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ACUsers.
     */
    distinct?: ACUserScalarFieldEnum | ACUserScalarFieldEnum[]
  }

  /**
   * ACUser findFirstOrThrow
   */
  export type ACUserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ACUser
     */
    select?: ACUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ACUser
     */
    omit?: ACUserOmit<ExtArgs> | null
    /**
     * Filter, which ACUser to fetch.
     */
    where?: ACUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ACUsers to fetch.
     */
    orderBy?: ACUserOrderByWithRelationInput | ACUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ACUsers.
     */
    cursor?: ACUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ACUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ACUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ACUsers.
     */
    distinct?: ACUserScalarFieldEnum | ACUserScalarFieldEnum[]
  }

  /**
   * ACUser findMany
   */
  export type ACUserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ACUser
     */
    select?: ACUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ACUser
     */
    omit?: ACUserOmit<ExtArgs> | null
    /**
     * Filter, which ACUsers to fetch.
     */
    where?: ACUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ACUsers to fetch.
     */
    orderBy?: ACUserOrderByWithRelationInput | ACUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ACUsers.
     */
    cursor?: ACUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ACUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ACUsers.
     */
    skip?: number
    distinct?: ACUserScalarFieldEnum | ACUserScalarFieldEnum[]
  }

  /**
   * ACUser create
   */
  export type ACUserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ACUser
     */
    select?: ACUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ACUser
     */
    omit?: ACUserOmit<ExtArgs> | null
    /**
     * The data needed to create a ACUser.
     */
    data: XOR<ACUserCreateInput, ACUserUncheckedCreateInput>
  }

  /**
   * ACUser createMany
   */
  export type ACUserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ACUsers.
     */
    data: ACUserCreateManyInput | ACUserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ACUser createManyAndReturn
   */
  export type ACUserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ACUser
     */
    select?: ACUserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ACUser
     */
    omit?: ACUserOmit<ExtArgs> | null
    /**
     * The data used to create many ACUsers.
     */
    data: ACUserCreateManyInput | ACUserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ACUser update
   */
  export type ACUserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ACUser
     */
    select?: ACUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ACUser
     */
    omit?: ACUserOmit<ExtArgs> | null
    /**
     * The data needed to update a ACUser.
     */
    data: XOR<ACUserUpdateInput, ACUserUncheckedUpdateInput>
    /**
     * Choose, which ACUser to update.
     */
    where: ACUserWhereUniqueInput
  }

  /**
   * ACUser updateMany
   */
  export type ACUserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ACUsers.
     */
    data: XOR<ACUserUpdateManyMutationInput, ACUserUncheckedUpdateManyInput>
    /**
     * Filter which ACUsers to update
     */
    where?: ACUserWhereInput
    /**
     * Limit how many ACUsers to update.
     */
    limit?: number
  }

  /**
   * ACUser updateManyAndReturn
   */
  export type ACUserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ACUser
     */
    select?: ACUserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ACUser
     */
    omit?: ACUserOmit<ExtArgs> | null
    /**
     * The data used to update ACUsers.
     */
    data: XOR<ACUserUpdateManyMutationInput, ACUserUncheckedUpdateManyInput>
    /**
     * Filter which ACUsers to update
     */
    where?: ACUserWhereInput
    /**
     * Limit how many ACUsers to update.
     */
    limit?: number
  }

  /**
   * ACUser upsert
   */
  export type ACUserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ACUser
     */
    select?: ACUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ACUser
     */
    omit?: ACUserOmit<ExtArgs> | null
    /**
     * The filter to search for the ACUser to update in case it exists.
     */
    where: ACUserWhereUniqueInput
    /**
     * In case the ACUser found by the `where` argument doesn't exist, create a new ACUser with this data.
     */
    create: XOR<ACUserCreateInput, ACUserUncheckedCreateInput>
    /**
     * In case the ACUser was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ACUserUpdateInput, ACUserUncheckedUpdateInput>
  }

  /**
   * ACUser delete
   */
  export type ACUserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ACUser
     */
    select?: ACUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ACUser
     */
    omit?: ACUserOmit<ExtArgs> | null
    /**
     * Filter which ACUser to delete.
     */
    where: ACUserWhereUniqueInput
  }

  /**
   * ACUser deleteMany
   */
  export type ACUserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ACUsers to delete
     */
    where?: ACUserWhereInput
    /**
     * Limit how many ACUsers to delete.
     */
    limit?: number
  }

  /**
   * ACUser without action
   */
  export type ACUserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ACUser
     */
    select?: ACUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ACUser
     */
    omit?: ACUserOmit<ExtArgs> | null
  }


  /**
   * Model apiHackingLab
   */

  export type AggregateApiHackingLab = {
    _count: ApiHackingLabCountAggregateOutputType | null
    _avg: ApiHackingLabAvgAggregateOutputType | null
    _sum: ApiHackingLabSumAggregateOutputType | null
    _min: ApiHackingLabMinAggregateOutputType | null
    _max: ApiHackingLabMaxAggregateOutputType | null
  }

  export type ApiHackingLabAvgAggregateOutputType = {
    id: number | null
  }

  export type ApiHackingLabSumAggregateOutputType = {
    id: number | null
  }

  export type ApiHackingLabMinAggregateOutputType = {
    id: number | null
    username: string | null
    password: string | null
  }

  export type ApiHackingLabMaxAggregateOutputType = {
    id: number | null
    username: string | null
    password: string | null
  }

  export type ApiHackingLabCountAggregateOutputType = {
    id: number
    username: number
    password: number
    _all: number
  }


  export type ApiHackingLabAvgAggregateInputType = {
    id?: true
  }

  export type ApiHackingLabSumAggregateInputType = {
    id?: true
  }

  export type ApiHackingLabMinAggregateInputType = {
    id?: true
    username?: true
    password?: true
  }

  export type ApiHackingLabMaxAggregateInputType = {
    id?: true
    username?: true
    password?: true
  }

  export type ApiHackingLabCountAggregateInputType = {
    id?: true
    username?: true
    password?: true
    _all?: true
  }

  export type ApiHackingLabAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which apiHackingLab to aggregate.
     */
    where?: apiHackingLabWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of apiHackingLabs to fetch.
     */
    orderBy?: apiHackingLabOrderByWithRelationInput | apiHackingLabOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: apiHackingLabWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` apiHackingLabs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` apiHackingLabs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned apiHackingLabs
    **/
    _count?: true | ApiHackingLabCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ApiHackingLabAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ApiHackingLabSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ApiHackingLabMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ApiHackingLabMaxAggregateInputType
  }

  export type GetApiHackingLabAggregateType<T extends ApiHackingLabAggregateArgs> = {
        [P in keyof T & keyof AggregateApiHackingLab]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateApiHackingLab[P]>
      : GetScalarType<T[P], AggregateApiHackingLab[P]>
  }




  export type apiHackingLabGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: apiHackingLabWhereInput
    orderBy?: apiHackingLabOrderByWithAggregationInput | apiHackingLabOrderByWithAggregationInput[]
    by: ApiHackingLabScalarFieldEnum[] | ApiHackingLabScalarFieldEnum
    having?: apiHackingLabScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ApiHackingLabCountAggregateInputType | true
    _avg?: ApiHackingLabAvgAggregateInputType
    _sum?: ApiHackingLabSumAggregateInputType
    _min?: ApiHackingLabMinAggregateInputType
    _max?: ApiHackingLabMaxAggregateInputType
  }

  export type ApiHackingLabGroupByOutputType = {
    id: number
    username: string
    password: string
    _count: ApiHackingLabCountAggregateOutputType | null
    _avg: ApiHackingLabAvgAggregateOutputType | null
    _sum: ApiHackingLabSumAggregateOutputType | null
    _min: ApiHackingLabMinAggregateOutputType | null
    _max: ApiHackingLabMaxAggregateOutputType | null
  }

  type GetApiHackingLabGroupByPayload<T extends apiHackingLabGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ApiHackingLabGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ApiHackingLabGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ApiHackingLabGroupByOutputType[P]>
            : GetScalarType<T[P], ApiHackingLabGroupByOutputType[P]>
        }
      >
    >


  export type apiHackingLabSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    password?: boolean
    image?: boolean | apiHackingLab$imageArgs<ExtArgs>
    _count?: boolean | ApiHackingLabCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["apiHackingLab"]>

  export type apiHackingLabSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    password?: boolean
  }, ExtArgs["result"]["apiHackingLab"]>

  export type apiHackingLabSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    password?: boolean
  }, ExtArgs["result"]["apiHackingLab"]>

  export type apiHackingLabSelectScalar = {
    id?: boolean
    username?: boolean
    password?: boolean
  }

  export type apiHackingLabOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "username" | "password", ExtArgs["result"]["apiHackingLab"]>
  export type apiHackingLabInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    image?: boolean | apiHackingLab$imageArgs<ExtArgs>
    _count?: boolean | ApiHackingLabCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type apiHackingLabIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type apiHackingLabIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $apiHackingLabPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "apiHackingLab"
    objects: {
      image: Prisma.$imageForApiHackingPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      username: string
      password: string
    }, ExtArgs["result"]["apiHackingLab"]>
    composites: {}
  }

  type apiHackingLabGetPayload<S extends boolean | null | undefined | apiHackingLabDefaultArgs> = $Result.GetResult<Prisma.$apiHackingLabPayload, S>

  type apiHackingLabCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<apiHackingLabFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ApiHackingLabCountAggregateInputType | true
    }

  export interface apiHackingLabDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['apiHackingLab'], meta: { name: 'apiHackingLab' } }
    /**
     * Find zero or one ApiHackingLab that matches the filter.
     * @param {apiHackingLabFindUniqueArgs} args - Arguments to find a ApiHackingLab
     * @example
     * // Get one ApiHackingLab
     * const apiHackingLab = await prisma.apiHackingLab.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends apiHackingLabFindUniqueArgs>(args: SelectSubset<T, apiHackingLabFindUniqueArgs<ExtArgs>>): Prisma__apiHackingLabClient<$Result.GetResult<Prisma.$apiHackingLabPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one ApiHackingLab that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {apiHackingLabFindUniqueOrThrowArgs} args - Arguments to find a ApiHackingLab
     * @example
     * // Get one ApiHackingLab
     * const apiHackingLab = await prisma.apiHackingLab.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends apiHackingLabFindUniqueOrThrowArgs>(args: SelectSubset<T, apiHackingLabFindUniqueOrThrowArgs<ExtArgs>>): Prisma__apiHackingLabClient<$Result.GetResult<Prisma.$apiHackingLabPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first ApiHackingLab that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {apiHackingLabFindFirstArgs} args - Arguments to find a ApiHackingLab
     * @example
     * // Get one ApiHackingLab
     * const apiHackingLab = await prisma.apiHackingLab.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends apiHackingLabFindFirstArgs>(args?: SelectSubset<T, apiHackingLabFindFirstArgs<ExtArgs>>): Prisma__apiHackingLabClient<$Result.GetResult<Prisma.$apiHackingLabPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first ApiHackingLab that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {apiHackingLabFindFirstOrThrowArgs} args - Arguments to find a ApiHackingLab
     * @example
     * // Get one ApiHackingLab
     * const apiHackingLab = await prisma.apiHackingLab.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends apiHackingLabFindFirstOrThrowArgs>(args?: SelectSubset<T, apiHackingLabFindFirstOrThrowArgs<ExtArgs>>): Prisma__apiHackingLabClient<$Result.GetResult<Prisma.$apiHackingLabPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more ApiHackingLabs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {apiHackingLabFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ApiHackingLabs
     * const apiHackingLabs = await prisma.apiHackingLab.findMany()
     * 
     * // Get first 10 ApiHackingLabs
     * const apiHackingLabs = await prisma.apiHackingLab.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const apiHackingLabWithIdOnly = await prisma.apiHackingLab.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends apiHackingLabFindManyArgs>(args?: SelectSubset<T, apiHackingLabFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$apiHackingLabPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a ApiHackingLab.
     * @param {apiHackingLabCreateArgs} args - Arguments to create a ApiHackingLab.
     * @example
     * // Create one ApiHackingLab
     * const ApiHackingLab = await prisma.apiHackingLab.create({
     *   data: {
     *     // ... data to create a ApiHackingLab
     *   }
     * })
     * 
     */
    create<T extends apiHackingLabCreateArgs>(args: SelectSubset<T, apiHackingLabCreateArgs<ExtArgs>>): Prisma__apiHackingLabClient<$Result.GetResult<Prisma.$apiHackingLabPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many ApiHackingLabs.
     * @param {apiHackingLabCreateManyArgs} args - Arguments to create many ApiHackingLabs.
     * @example
     * // Create many ApiHackingLabs
     * const apiHackingLab = await prisma.apiHackingLab.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends apiHackingLabCreateManyArgs>(args?: SelectSubset<T, apiHackingLabCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ApiHackingLabs and returns the data saved in the database.
     * @param {apiHackingLabCreateManyAndReturnArgs} args - Arguments to create many ApiHackingLabs.
     * @example
     * // Create many ApiHackingLabs
     * const apiHackingLab = await prisma.apiHackingLab.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ApiHackingLabs and only return the `id`
     * const apiHackingLabWithIdOnly = await prisma.apiHackingLab.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends apiHackingLabCreateManyAndReturnArgs>(args?: SelectSubset<T, apiHackingLabCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$apiHackingLabPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a ApiHackingLab.
     * @param {apiHackingLabDeleteArgs} args - Arguments to delete one ApiHackingLab.
     * @example
     * // Delete one ApiHackingLab
     * const ApiHackingLab = await prisma.apiHackingLab.delete({
     *   where: {
     *     // ... filter to delete one ApiHackingLab
     *   }
     * })
     * 
     */
    delete<T extends apiHackingLabDeleteArgs>(args: SelectSubset<T, apiHackingLabDeleteArgs<ExtArgs>>): Prisma__apiHackingLabClient<$Result.GetResult<Prisma.$apiHackingLabPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one ApiHackingLab.
     * @param {apiHackingLabUpdateArgs} args - Arguments to update one ApiHackingLab.
     * @example
     * // Update one ApiHackingLab
     * const apiHackingLab = await prisma.apiHackingLab.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends apiHackingLabUpdateArgs>(args: SelectSubset<T, apiHackingLabUpdateArgs<ExtArgs>>): Prisma__apiHackingLabClient<$Result.GetResult<Prisma.$apiHackingLabPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more ApiHackingLabs.
     * @param {apiHackingLabDeleteManyArgs} args - Arguments to filter ApiHackingLabs to delete.
     * @example
     * // Delete a few ApiHackingLabs
     * const { count } = await prisma.apiHackingLab.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends apiHackingLabDeleteManyArgs>(args?: SelectSubset<T, apiHackingLabDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ApiHackingLabs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {apiHackingLabUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ApiHackingLabs
     * const apiHackingLab = await prisma.apiHackingLab.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends apiHackingLabUpdateManyArgs>(args: SelectSubset<T, apiHackingLabUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ApiHackingLabs and returns the data updated in the database.
     * @param {apiHackingLabUpdateManyAndReturnArgs} args - Arguments to update many ApiHackingLabs.
     * @example
     * // Update many ApiHackingLabs
     * const apiHackingLab = await prisma.apiHackingLab.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ApiHackingLabs and only return the `id`
     * const apiHackingLabWithIdOnly = await prisma.apiHackingLab.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends apiHackingLabUpdateManyAndReturnArgs>(args: SelectSubset<T, apiHackingLabUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$apiHackingLabPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one ApiHackingLab.
     * @param {apiHackingLabUpsertArgs} args - Arguments to update or create a ApiHackingLab.
     * @example
     * // Update or create a ApiHackingLab
     * const apiHackingLab = await prisma.apiHackingLab.upsert({
     *   create: {
     *     // ... data to create a ApiHackingLab
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ApiHackingLab we want to update
     *   }
     * })
     */
    upsert<T extends apiHackingLabUpsertArgs>(args: SelectSubset<T, apiHackingLabUpsertArgs<ExtArgs>>): Prisma__apiHackingLabClient<$Result.GetResult<Prisma.$apiHackingLabPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of ApiHackingLabs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {apiHackingLabCountArgs} args - Arguments to filter ApiHackingLabs to count.
     * @example
     * // Count the number of ApiHackingLabs
     * const count = await prisma.apiHackingLab.count({
     *   where: {
     *     // ... the filter for the ApiHackingLabs we want to count
     *   }
     * })
    **/
    count<T extends apiHackingLabCountArgs>(
      args?: Subset<T, apiHackingLabCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ApiHackingLabCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ApiHackingLab.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiHackingLabAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ApiHackingLabAggregateArgs>(args: Subset<T, ApiHackingLabAggregateArgs>): Prisma.PrismaPromise<GetApiHackingLabAggregateType<T>>

    /**
     * Group by ApiHackingLab.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {apiHackingLabGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends apiHackingLabGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: apiHackingLabGroupByArgs['orderBy'] }
        : { orderBy?: apiHackingLabGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, apiHackingLabGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetApiHackingLabGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the apiHackingLab model
   */
  readonly fields: apiHackingLabFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for apiHackingLab.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__apiHackingLabClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    image<T extends apiHackingLab$imageArgs<ExtArgs> = {}>(args?: Subset<T, apiHackingLab$imageArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$imageForApiHackingPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the apiHackingLab model
   */ 
  interface apiHackingLabFieldRefs {
    readonly id: FieldRef<"apiHackingLab", 'Int'>
    readonly username: FieldRef<"apiHackingLab", 'String'>
    readonly password: FieldRef<"apiHackingLab", 'String'>
  }
    

  // Custom InputTypes
  /**
   * apiHackingLab findUnique
   */
  export type apiHackingLabFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the apiHackingLab
     */
    select?: apiHackingLabSelect<ExtArgs> | null
    /**
     * Omit specific fields from the apiHackingLab
     */
    omit?: apiHackingLabOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: apiHackingLabInclude<ExtArgs> | null
    /**
     * Filter, which apiHackingLab to fetch.
     */
    where: apiHackingLabWhereUniqueInput
  }

  /**
   * apiHackingLab findUniqueOrThrow
   */
  export type apiHackingLabFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the apiHackingLab
     */
    select?: apiHackingLabSelect<ExtArgs> | null
    /**
     * Omit specific fields from the apiHackingLab
     */
    omit?: apiHackingLabOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: apiHackingLabInclude<ExtArgs> | null
    /**
     * Filter, which apiHackingLab to fetch.
     */
    where: apiHackingLabWhereUniqueInput
  }

  /**
   * apiHackingLab findFirst
   */
  export type apiHackingLabFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the apiHackingLab
     */
    select?: apiHackingLabSelect<ExtArgs> | null
    /**
     * Omit specific fields from the apiHackingLab
     */
    omit?: apiHackingLabOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: apiHackingLabInclude<ExtArgs> | null
    /**
     * Filter, which apiHackingLab to fetch.
     */
    where?: apiHackingLabWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of apiHackingLabs to fetch.
     */
    orderBy?: apiHackingLabOrderByWithRelationInput | apiHackingLabOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for apiHackingLabs.
     */
    cursor?: apiHackingLabWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` apiHackingLabs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` apiHackingLabs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of apiHackingLabs.
     */
    distinct?: ApiHackingLabScalarFieldEnum | ApiHackingLabScalarFieldEnum[]
  }

  /**
   * apiHackingLab findFirstOrThrow
   */
  export type apiHackingLabFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the apiHackingLab
     */
    select?: apiHackingLabSelect<ExtArgs> | null
    /**
     * Omit specific fields from the apiHackingLab
     */
    omit?: apiHackingLabOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: apiHackingLabInclude<ExtArgs> | null
    /**
     * Filter, which apiHackingLab to fetch.
     */
    where?: apiHackingLabWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of apiHackingLabs to fetch.
     */
    orderBy?: apiHackingLabOrderByWithRelationInput | apiHackingLabOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for apiHackingLabs.
     */
    cursor?: apiHackingLabWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` apiHackingLabs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` apiHackingLabs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of apiHackingLabs.
     */
    distinct?: ApiHackingLabScalarFieldEnum | ApiHackingLabScalarFieldEnum[]
  }

  /**
   * apiHackingLab findMany
   */
  export type apiHackingLabFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the apiHackingLab
     */
    select?: apiHackingLabSelect<ExtArgs> | null
    /**
     * Omit specific fields from the apiHackingLab
     */
    omit?: apiHackingLabOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: apiHackingLabInclude<ExtArgs> | null
    /**
     * Filter, which apiHackingLabs to fetch.
     */
    where?: apiHackingLabWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of apiHackingLabs to fetch.
     */
    orderBy?: apiHackingLabOrderByWithRelationInput | apiHackingLabOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing apiHackingLabs.
     */
    cursor?: apiHackingLabWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` apiHackingLabs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` apiHackingLabs.
     */
    skip?: number
    distinct?: ApiHackingLabScalarFieldEnum | ApiHackingLabScalarFieldEnum[]
  }

  /**
   * apiHackingLab create
   */
  export type apiHackingLabCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the apiHackingLab
     */
    select?: apiHackingLabSelect<ExtArgs> | null
    /**
     * Omit specific fields from the apiHackingLab
     */
    omit?: apiHackingLabOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: apiHackingLabInclude<ExtArgs> | null
    /**
     * The data needed to create a apiHackingLab.
     */
    data: XOR<apiHackingLabCreateInput, apiHackingLabUncheckedCreateInput>
  }

  /**
   * apiHackingLab createMany
   */
  export type apiHackingLabCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many apiHackingLabs.
     */
    data: apiHackingLabCreateManyInput | apiHackingLabCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * apiHackingLab createManyAndReturn
   */
  export type apiHackingLabCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the apiHackingLab
     */
    select?: apiHackingLabSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the apiHackingLab
     */
    omit?: apiHackingLabOmit<ExtArgs> | null
    /**
     * The data used to create many apiHackingLabs.
     */
    data: apiHackingLabCreateManyInput | apiHackingLabCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * apiHackingLab update
   */
  export type apiHackingLabUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the apiHackingLab
     */
    select?: apiHackingLabSelect<ExtArgs> | null
    /**
     * Omit specific fields from the apiHackingLab
     */
    omit?: apiHackingLabOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: apiHackingLabInclude<ExtArgs> | null
    /**
     * The data needed to update a apiHackingLab.
     */
    data: XOR<apiHackingLabUpdateInput, apiHackingLabUncheckedUpdateInput>
    /**
     * Choose, which apiHackingLab to update.
     */
    where: apiHackingLabWhereUniqueInput
  }

  /**
   * apiHackingLab updateMany
   */
  export type apiHackingLabUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update apiHackingLabs.
     */
    data: XOR<apiHackingLabUpdateManyMutationInput, apiHackingLabUncheckedUpdateManyInput>
    /**
     * Filter which apiHackingLabs to update
     */
    where?: apiHackingLabWhereInput
    /**
     * Limit how many apiHackingLabs to update.
     */
    limit?: number
  }

  /**
   * apiHackingLab updateManyAndReturn
   */
  export type apiHackingLabUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the apiHackingLab
     */
    select?: apiHackingLabSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the apiHackingLab
     */
    omit?: apiHackingLabOmit<ExtArgs> | null
    /**
     * The data used to update apiHackingLabs.
     */
    data: XOR<apiHackingLabUpdateManyMutationInput, apiHackingLabUncheckedUpdateManyInput>
    /**
     * Filter which apiHackingLabs to update
     */
    where?: apiHackingLabWhereInput
    /**
     * Limit how many apiHackingLabs to update.
     */
    limit?: number
  }

  /**
   * apiHackingLab upsert
   */
  export type apiHackingLabUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the apiHackingLab
     */
    select?: apiHackingLabSelect<ExtArgs> | null
    /**
     * Omit specific fields from the apiHackingLab
     */
    omit?: apiHackingLabOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: apiHackingLabInclude<ExtArgs> | null
    /**
     * The filter to search for the apiHackingLab to update in case it exists.
     */
    where: apiHackingLabWhereUniqueInput
    /**
     * In case the apiHackingLab found by the `where` argument doesn't exist, create a new apiHackingLab with this data.
     */
    create: XOR<apiHackingLabCreateInput, apiHackingLabUncheckedCreateInput>
    /**
     * In case the apiHackingLab was found with the provided `where` argument, update it with this data.
     */
    update: XOR<apiHackingLabUpdateInput, apiHackingLabUncheckedUpdateInput>
  }

  /**
   * apiHackingLab delete
   */
  export type apiHackingLabDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the apiHackingLab
     */
    select?: apiHackingLabSelect<ExtArgs> | null
    /**
     * Omit specific fields from the apiHackingLab
     */
    omit?: apiHackingLabOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: apiHackingLabInclude<ExtArgs> | null
    /**
     * Filter which apiHackingLab to delete.
     */
    where: apiHackingLabWhereUniqueInput
  }

  /**
   * apiHackingLab deleteMany
   */
  export type apiHackingLabDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which apiHackingLabs to delete
     */
    where?: apiHackingLabWhereInput
    /**
     * Limit how many apiHackingLabs to delete.
     */
    limit?: number
  }

  /**
   * apiHackingLab.image
   */
  export type apiHackingLab$imageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imageForApiHacking
     */
    select?: imageForApiHackingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the imageForApiHacking
     */
    omit?: imageForApiHackingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: imageForApiHackingInclude<ExtArgs> | null
    where?: imageForApiHackingWhereInput
    orderBy?: imageForApiHackingOrderByWithRelationInput | imageForApiHackingOrderByWithRelationInput[]
    cursor?: imageForApiHackingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ImageForApiHackingScalarFieldEnum | ImageForApiHackingScalarFieldEnum[]
  }

  /**
   * apiHackingLab without action
   */
  export type apiHackingLabDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the apiHackingLab
     */
    select?: apiHackingLabSelect<ExtArgs> | null
    /**
     * Omit specific fields from the apiHackingLab
     */
    omit?: apiHackingLabOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: apiHackingLabInclude<ExtArgs> | null
  }


  /**
   * Model imageForApiHacking
   */

  export type AggregateImageForApiHacking = {
    _count: ImageForApiHackingCountAggregateOutputType | null
    _avg: ImageForApiHackingAvgAggregateOutputType | null
    _sum: ImageForApiHackingSumAggregateOutputType | null
    _min: ImageForApiHackingMinAggregateOutputType | null
    _max: ImageForApiHackingMaxAggregateOutputType | null
  }

  export type ImageForApiHackingAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type ImageForApiHackingSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type ImageForApiHackingMinAggregateOutputType = {
    id: number | null
    name: string | null
    path: string | null
    userId: number | null
  }

  export type ImageForApiHackingMaxAggregateOutputType = {
    id: number | null
    name: string | null
    path: string | null
    userId: number | null
  }

  export type ImageForApiHackingCountAggregateOutputType = {
    id: number
    name: number
    path: number
    userId: number
    _all: number
  }


  export type ImageForApiHackingAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type ImageForApiHackingSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type ImageForApiHackingMinAggregateInputType = {
    id?: true
    name?: true
    path?: true
    userId?: true
  }

  export type ImageForApiHackingMaxAggregateInputType = {
    id?: true
    name?: true
    path?: true
    userId?: true
  }

  export type ImageForApiHackingCountAggregateInputType = {
    id?: true
    name?: true
    path?: true
    userId?: true
    _all?: true
  }

  export type ImageForApiHackingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which imageForApiHacking to aggregate.
     */
    where?: imageForApiHackingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of imageForApiHackings to fetch.
     */
    orderBy?: imageForApiHackingOrderByWithRelationInput | imageForApiHackingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: imageForApiHackingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` imageForApiHackings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` imageForApiHackings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned imageForApiHackings
    **/
    _count?: true | ImageForApiHackingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ImageForApiHackingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ImageForApiHackingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ImageForApiHackingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ImageForApiHackingMaxAggregateInputType
  }

  export type GetImageForApiHackingAggregateType<T extends ImageForApiHackingAggregateArgs> = {
        [P in keyof T & keyof AggregateImageForApiHacking]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateImageForApiHacking[P]>
      : GetScalarType<T[P], AggregateImageForApiHacking[P]>
  }




  export type imageForApiHackingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: imageForApiHackingWhereInput
    orderBy?: imageForApiHackingOrderByWithAggregationInput | imageForApiHackingOrderByWithAggregationInput[]
    by: ImageForApiHackingScalarFieldEnum[] | ImageForApiHackingScalarFieldEnum
    having?: imageForApiHackingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ImageForApiHackingCountAggregateInputType | true
    _avg?: ImageForApiHackingAvgAggregateInputType
    _sum?: ImageForApiHackingSumAggregateInputType
    _min?: ImageForApiHackingMinAggregateInputType
    _max?: ImageForApiHackingMaxAggregateInputType
  }

  export type ImageForApiHackingGroupByOutputType = {
    id: number
    name: string
    path: string
    userId: number
    _count: ImageForApiHackingCountAggregateOutputType | null
    _avg: ImageForApiHackingAvgAggregateOutputType | null
    _sum: ImageForApiHackingSumAggregateOutputType | null
    _min: ImageForApiHackingMinAggregateOutputType | null
    _max: ImageForApiHackingMaxAggregateOutputType | null
  }

  type GetImageForApiHackingGroupByPayload<T extends imageForApiHackingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ImageForApiHackingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ImageForApiHackingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ImageForApiHackingGroupByOutputType[P]>
            : GetScalarType<T[P], ImageForApiHackingGroupByOutputType[P]>
        }
      >
    >


  export type imageForApiHackingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    path?: boolean
    userId?: boolean
    user?: boolean | apiHackingLabDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["imageForApiHacking"]>

  export type imageForApiHackingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    path?: boolean
    userId?: boolean
    user?: boolean | apiHackingLabDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["imageForApiHacking"]>

  export type imageForApiHackingSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    path?: boolean
    userId?: boolean
    user?: boolean | apiHackingLabDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["imageForApiHacking"]>

  export type imageForApiHackingSelectScalar = {
    id?: boolean
    name?: boolean
    path?: boolean
    userId?: boolean
  }

  export type imageForApiHackingOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "path" | "userId", ExtArgs["result"]["imageForApiHacking"]>
  export type imageForApiHackingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | apiHackingLabDefaultArgs<ExtArgs>
  }
  export type imageForApiHackingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | apiHackingLabDefaultArgs<ExtArgs>
  }
  export type imageForApiHackingIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | apiHackingLabDefaultArgs<ExtArgs>
  }

  export type $imageForApiHackingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "imageForApiHacking"
    objects: {
      user: Prisma.$apiHackingLabPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      path: string
      userId: number
    }, ExtArgs["result"]["imageForApiHacking"]>
    composites: {}
  }

  type imageForApiHackingGetPayload<S extends boolean | null | undefined | imageForApiHackingDefaultArgs> = $Result.GetResult<Prisma.$imageForApiHackingPayload, S>

  type imageForApiHackingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<imageForApiHackingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ImageForApiHackingCountAggregateInputType | true
    }

  export interface imageForApiHackingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['imageForApiHacking'], meta: { name: 'imageForApiHacking' } }
    /**
     * Find zero or one ImageForApiHacking that matches the filter.
     * @param {imageForApiHackingFindUniqueArgs} args - Arguments to find a ImageForApiHacking
     * @example
     * // Get one ImageForApiHacking
     * const imageForApiHacking = await prisma.imageForApiHacking.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends imageForApiHackingFindUniqueArgs>(args: SelectSubset<T, imageForApiHackingFindUniqueArgs<ExtArgs>>): Prisma__imageForApiHackingClient<$Result.GetResult<Prisma.$imageForApiHackingPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one ImageForApiHacking that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {imageForApiHackingFindUniqueOrThrowArgs} args - Arguments to find a ImageForApiHacking
     * @example
     * // Get one ImageForApiHacking
     * const imageForApiHacking = await prisma.imageForApiHacking.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends imageForApiHackingFindUniqueOrThrowArgs>(args: SelectSubset<T, imageForApiHackingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__imageForApiHackingClient<$Result.GetResult<Prisma.$imageForApiHackingPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first ImageForApiHacking that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {imageForApiHackingFindFirstArgs} args - Arguments to find a ImageForApiHacking
     * @example
     * // Get one ImageForApiHacking
     * const imageForApiHacking = await prisma.imageForApiHacking.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends imageForApiHackingFindFirstArgs>(args?: SelectSubset<T, imageForApiHackingFindFirstArgs<ExtArgs>>): Prisma__imageForApiHackingClient<$Result.GetResult<Prisma.$imageForApiHackingPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first ImageForApiHacking that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {imageForApiHackingFindFirstOrThrowArgs} args - Arguments to find a ImageForApiHacking
     * @example
     * // Get one ImageForApiHacking
     * const imageForApiHacking = await prisma.imageForApiHacking.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends imageForApiHackingFindFirstOrThrowArgs>(args?: SelectSubset<T, imageForApiHackingFindFirstOrThrowArgs<ExtArgs>>): Prisma__imageForApiHackingClient<$Result.GetResult<Prisma.$imageForApiHackingPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more ImageForApiHackings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {imageForApiHackingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ImageForApiHackings
     * const imageForApiHackings = await prisma.imageForApiHacking.findMany()
     * 
     * // Get first 10 ImageForApiHackings
     * const imageForApiHackings = await prisma.imageForApiHacking.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const imageForApiHackingWithIdOnly = await prisma.imageForApiHacking.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends imageForApiHackingFindManyArgs>(args?: SelectSubset<T, imageForApiHackingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$imageForApiHackingPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a ImageForApiHacking.
     * @param {imageForApiHackingCreateArgs} args - Arguments to create a ImageForApiHacking.
     * @example
     * // Create one ImageForApiHacking
     * const ImageForApiHacking = await prisma.imageForApiHacking.create({
     *   data: {
     *     // ... data to create a ImageForApiHacking
     *   }
     * })
     * 
     */
    create<T extends imageForApiHackingCreateArgs>(args: SelectSubset<T, imageForApiHackingCreateArgs<ExtArgs>>): Prisma__imageForApiHackingClient<$Result.GetResult<Prisma.$imageForApiHackingPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many ImageForApiHackings.
     * @param {imageForApiHackingCreateManyArgs} args - Arguments to create many ImageForApiHackings.
     * @example
     * // Create many ImageForApiHackings
     * const imageForApiHacking = await prisma.imageForApiHacking.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends imageForApiHackingCreateManyArgs>(args?: SelectSubset<T, imageForApiHackingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ImageForApiHackings and returns the data saved in the database.
     * @param {imageForApiHackingCreateManyAndReturnArgs} args - Arguments to create many ImageForApiHackings.
     * @example
     * // Create many ImageForApiHackings
     * const imageForApiHacking = await prisma.imageForApiHacking.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ImageForApiHackings and only return the `id`
     * const imageForApiHackingWithIdOnly = await prisma.imageForApiHacking.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends imageForApiHackingCreateManyAndReturnArgs>(args?: SelectSubset<T, imageForApiHackingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$imageForApiHackingPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a ImageForApiHacking.
     * @param {imageForApiHackingDeleteArgs} args - Arguments to delete one ImageForApiHacking.
     * @example
     * // Delete one ImageForApiHacking
     * const ImageForApiHacking = await prisma.imageForApiHacking.delete({
     *   where: {
     *     // ... filter to delete one ImageForApiHacking
     *   }
     * })
     * 
     */
    delete<T extends imageForApiHackingDeleteArgs>(args: SelectSubset<T, imageForApiHackingDeleteArgs<ExtArgs>>): Prisma__imageForApiHackingClient<$Result.GetResult<Prisma.$imageForApiHackingPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one ImageForApiHacking.
     * @param {imageForApiHackingUpdateArgs} args - Arguments to update one ImageForApiHacking.
     * @example
     * // Update one ImageForApiHacking
     * const imageForApiHacking = await prisma.imageForApiHacking.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends imageForApiHackingUpdateArgs>(args: SelectSubset<T, imageForApiHackingUpdateArgs<ExtArgs>>): Prisma__imageForApiHackingClient<$Result.GetResult<Prisma.$imageForApiHackingPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more ImageForApiHackings.
     * @param {imageForApiHackingDeleteManyArgs} args - Arguments to filter ImageForApiHackings to delete.
     * @example
     * // Delete a few ImageForApiHackings
     * const { count } = await prisma.imageForApiHacking.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends imageForApiHackingDeleteManyArgs>(args?: SelectSubset<T, imageForApiHackingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ImageForApiHackings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {imageForApiHackingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ImageForApiHackings
     * const imageForApiHacking = await prisma.imageForApiHacking.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends imageForApiHackingUpdateManyArgs>(args: SelectSubset<T, imageForApiHackingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ImageForApiHackings and returns the data updated in the database.
     * @param {imageForApiHackingUpdateManyAndReturnArgs} args - Arguments to update many ImageForApiHackings.
     * @example
     * // Update many ImageForApiHackings
     * const imageForApiHacking = await prisma.imageForApiHacking.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ImageForApiHackings and only return the `id`
     * const imageForApiHackingWithIdOnly = await prisma.imageForApiHacking.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends imageForApiHackingUpdateManyAndReturnArgs>(args: SelectSubset<T, imageForApiHackingUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$imageForApiHackingPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one ImageForApiHacking.
     * @param {imageForApiHackingUpsertArgs} args - Arguments to update or create a ImageForApiHacking.
     * @example
     * // Update or create a ImageForApiHacking
     * const imageForApiHacking = await prisma.imageForApiHacking.upsert({
     *   create: {
     *     // ... data to create a ImageForApiHacking
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ImageForApiHacking we want to update
     *   }
     * })
     */
    upsert<T extends imageForApiHackingUpsertArgs>(args: SelectSubset<T, imageForApiHackingUpsertArgs<ExtArgs>>): Prisma__imageForApiHackingClient<$Result.GetResult<Prisma.$imageForApiHackingPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of ImageForApiHackings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {imageForApiHackingCountArgs} args - Arguments to filter ImageForApiHackings to count.
     * @example
     * // Count the number of ImageForApiHackings
     * const count = await prisma.imageForApiHacking.count({
     *   where: {
     *     // ... the filter for the ImageForApiHackings we want to count
     *   }
     * })
    **/
    count<T extends imageForApiHackingCountArgs>(
      args?: Subset<T, imageForApiHackingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ImageForApiHackingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ImageForApiHacking.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageForApiHackingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ImageForApiHackingAggregateArgs>(args: Subset<T, ImageForApiHackingAggregateArgs>): Prisma.PrismaPromise<GetImageForApiHackingAggregateType<T>>

    /**
     * Group by ImageForApiHacking.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {imageForApiHackingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends imageForApiHackingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: imageForApiHackingGroupByArgs['orderBy'] }
        : { orderBy?: imageForApiHackingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, imageForApiHackingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetImageForApiHackingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the imageForApiHacking model
   */
  readonly fields: imageForApiHackingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for imageForApiHacking.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__imageForApiHackingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends apiHackingLabDefaultArgs<ExtArgs> = {}>(args?: Subset<T, apiHackingLabDefaultArgs<ExtArgs>>): Prisma__apiHackingLabClient<$Result.GetResult<Prisma.$apiHackingLabPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the imageForApiHacking model
   */ 
  interface imageForApiHackingFieldRefs {
    readonly id: FieldRef<"imageForApiHacking", 'Int'>
    readonly name: FieldRef<"imageForApiHacking", 'String'>
    readonly path: FieldRef<"imageForApiHacking", 'String'>
    readonly userId: FieldRef<"imageForApiHacking", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * imageForApiHacking findUnique
   */
  export type imageForApiHackingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imageForApiHacking
     */
    select?: imageForApiHackingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the imageForApiHacking
     */
    omit?: imageForApiHackingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: imageForApiHackingInclude<ExtArgs> | null
    /**
     * Filter, which imageForApiHacking to fetch.
     */
    where: imageForApiHackingWhereUniqueInput
  }

  /**
   * imageForApiHacking findUniqueOrThrow
   */
  export type imageForApiHackingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imageForApiHacking
     */
    select?: imageForApiHackingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the imageForApiHacking
     */
    omit?: imageForApiHackingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: imageForApiHackingInclude<ExtArgs> | null
    /**
     * Filter, which imageForApiHacking to fetch.
     */
    where: imageForApiHackingWhereUniqueInput
  }

  /**
   * imageForApiHacking findFirst
   */
  export type imageForApiHackingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imageForApiHacking
     */
    select?: imageForApiHackingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the imageForApiHacking
     */
    omit?: imageForApiHackingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: imageForApiHackingInclude<ExtArgs> | null
    /**
     * Filter, which imageForApiHacking to fetch.
     */
    where?: imageForApiHackingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of imageForApiHackings to fetch.
     */
    orderBy?: imageForApiHackingOrderByWithRelationInput | imageForApiHackingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for imageForApiHackings.
     */
    cursor?: imageForApiHackingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` imageForApiHackings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` imageForApiHackings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of imageForApiHackings.
     */
    distinct?: ImageForApiHackingScalarFieldEnum | ImageForApiHackingScalarFieldEnum[]
  }

  /**
   * imageForApiHacking findFirstOrThrow
   */
  export type imageForApiHackingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imageForApiHacking
     */
    select?: imageForApiHackingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the imageForApiHacking
     */
    omit?: imageForApiHackingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: imageForApiHackingInclude<ExtArgs> | null
    /**
     * Filter, which imageForApiHacking to fetch.
     */
    where?: imageForApiHackingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of imageForApiHackings to fetch.
     */
    orderBy?: imageForApiHackingOrderByWithRelationInput | imageForApiHackingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for imageForApiHackings.
     */
    cursor?: imageForApiHackingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` imageForApiHackings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` imageForApiHackings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of imageForApiHackings.
     */
    distinct?: ImageForApiHackingScalarFieldEnum | ImageForApiHackingScalarFieldEnum[]
  }

  /**
   * imageForApiHacking findMany
   */
  export type imageForApiHackingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imageForApiHacking
     */
    select?: imageForApiHackingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the imageForApiHacking
     */
    omit?: imageForApiHackingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: imageForApiHackingInclude<ExtArgs> | null
    /**
     * Filter, which imageForApiHackings to fetch.
     */
    where?: imageForApiHackingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of imageForApiHackings to fetch.
     */
    orderBy?: imageForApiHackingOrderByWithRelationInput | imageForApiHackingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing imageForApiHackings.
     */
    cursor?: imageForApiHackingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` imageForApiHackings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` imageForApiHackings.
     */
    skip?: number
    distinct?: ImageForApiHackingScalarFieldEnum | ImageForApiHackingScalarFieldEnum[]
  }

  /**
   * imageForApiHacking create
   */
  export type imageForApiHackingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imageForApiHacking
     */
    select?: imageForApiHackingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the imageForApiHacking
     */
    omit?: imageForApiHackingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: imageForApiHackingInclude<ExtArgs> | null
    /**
     * The data needed to create a imageForApiHacking.
     */
    data: XOR<imageForApiHackingCreateInput, imageForApiHackingUncheckedCreateInput>
  }

  /**
   * imageForApiHacking createMany
   */
  export type imageForApiHackingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many imageForApiHackings.
     */
    data: imageForApiHackingCreateManyInput | imageForApiHackingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * imageForApiHacking createManyAndReturn
   */
  export type imageForApiHackingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imageForApiHacking
     */
    select?: imageForApiHackingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the imageForApiHacking
     */
    omit?: imageForApiHackingOmit<ExtArgs> | null
    /**
     * The data used to create many imageForApiHackings.
     */
    data: imageForApiHackingCreateManyInput | imageForApiHackingCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: imageForApiHackingIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * imageForApiHacking update
   */
  export type imageForApiHackingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imageForApiHacking
     */
    select?: imageForApiHackingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the imageForApiHacking
     */
    omit?: imageForApiHackingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: imageForApiHackingInclude<ExtArgs> | null
    /**
     * The data needed to update a imageForApiHacking.
     */
    data: XOR<imageForApiHackingUpdateInput, imageForApiHackingUncheckedUpdateInput>
    /**
     * Choose, which imageForApiHacking to update.
     */
    where: imageForApiHackingWhereUniqueInput
  }

  /**
   * imageForApiHacking updateMany
   */
  export type imageForApiHackingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update imageForApiHackings.
     */
    data: XOR<imageForApiHackingUpdateManyMutationInput, imageForApiHackingUncheckedUpdateManyInput>
    /**
     * Filter which imageForApiHackings to update
     */
    where?: imageForApiHackingWhereInput
    /**
     * Limit how many imageForApiHackings to update.
     */
    limit?: number
  }

  /**
   * imageForApiHacking updateManyAndReturn
   */
  export type imageForApiHackingUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imageForApiHacking
     */
    select?: imageForApiHackingSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the imageForApiHacking
     */
    omit?: imageForApiHackingOmit<ExtArgs> | null
    /**
     * The data used to update imageForApiHackings.
     */
    data: XOR<imageForApiHackingUpdateManyMutationInput, imageForApiHackingUncheckedUpdateManyInput>
    /**
     * Filter which imageForApiHackings to update
     */
    where?: imageForApiHackingWhereInput
    /**
     * Limit how many imageForApiHackings to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: imageForApiHackingIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * imageForApiHacking upsert
   */
  export type imageForApiHackingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imageForApiHacking
     */
    select?: imageForApiHackingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the imageForApiHacking
     */
    omit?: imageForApiHackingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: imageForApiHackingInclude<ExtArgs> | null
    /**
     * The filter to search for the imageForApiHacking to update in case it exists.
     */
    where: imageForApiHackingWhereUniqueInput
    /**
     * In case the imageForApiHacking found by the `where` argument doesn't exist, create a new imageForApiHacking with this data.
     */
    create: XOR<imageForApiHackingCreateInput, imageForApiHackingUncheckedCreateInput>
    /**
     * In case the imageForApiHacking was found with the provided `where` argument, update it with this data.
     */
    update: XOR<imageForApiHackingUpdateInput, imageForApiHackingUncheckedUpdateInput>
  }

  /**
   * imageForApiHacking delete
   */
  export type imageForApiHackingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imageForApiHacking
     */
    select?: imageForApiHackingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the imageForApiHacking
     */
    omit?: imageForApiHackingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: imageForApiHackingInclude<ExtArgs> | null
    /**
     * Filter which imageForApiHacking to delete.
     */
    where: imageForApiHackingWhereUniqueInput
  }

  /**
   * imageForApiHacking deleteMany
   */
  export type imageForApiHackingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which imageForApiHackings to delete
     */
    where?: imageForApiHackingWhereInput
    /**
     * Limit how many imageForApiHackings to delete.
     */
    limit?: number
  }

  /**
   * imageForApiHacking without action
   */
  export type imageForApiHackingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imageForApiHacking
     */
    select?: imageForApiHackingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the imageForApiHacking
     */
    omit?: imageForApiHackingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: imageForApiHackingInclude<ExtArgs> | null
  }


  /**
   * Model ProductToPathTraversalLab1
   */

  export type AggregateProductToPathTraversalLab1 = {
    _count: ProductToPathTraversalLab1CountAggregateOutputType | null
    _avg: ProductToPathTraversalLab1AvgAggregateOutputType | null
    _sum: ProductToPathTraversalLab1SumAggregateOutputType | null
    _min: ProductToPathTraversalLab1MinAggregateOutputType | null
    _max: ProductToPathTraversalLab1MaxAggregateOutputType | null
  }

  export type ProductToPathTraversalLab1AvgAggregateOutputType = {
    id: number | null
  }

  export type ProductToPathTraversalLab1SumAggregateOutputType = {
    id: number | null
  }

  export type ProductToPathTraversalLab1MinAggregateOutputType = {
    id: number | null
    name: string | null
    path: string | null
    description: string | null
  }

  export type ProductToPathTraversalLab1MaxAggregateOutputType = {
    id: number | null
    name: string | null
    path: string | null
    description: string | null
  }

  export type ProductToPathTraversalLab1CountAggregateOutputType = {
    id: number
    name: number
    path: number
    description: number
    _all: number
  }


  export type ProductToPathTraversalLab1AvgAggregateInputType = {
    id?: true
  }

  export type ProductToPathTraversalLab1SumAggregateInputType = {
    id?: true
  }

  export type ProductToPathTraversalLab1MinAggregateInputType = {
    id?: true
    name?: true
    path?: true
    description?: true
  }

  export type ProductToPathTraversalLab1MaxAggregateInputType = {
    id?: true
    name?: true
    path?: true
    description?: true
  }

  export type ProductToPathTraversalLab1CountAggregateInputType = {
    id?: true
    name?: true
    path?: true
    description?: true
    _all?: true
  }

  export type ProductToPathTraversalLab1AggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductToPathTraversalLab1 to aggregate.
     */
    where?: ProductToPathTraversalLab1WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductToPathTraversalLab1s to fetch.
     */
    orderBy?: ProductToPathTraversalLab1OrderByWithRelationInput | ProductToPathTraversalLab1OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductToPathTraversalLab1WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductToPathTraversalLab1s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductToPathTraversalLab1s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProductToPathTraversalLab1s
    **/
    _count?: true | ProductToPathTraversalLab1CountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductToPathTraversalLab1AvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductToPathTraversalLab1SumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductToPathTraversalLab1MinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductToPathTraversalLab1MaxAggregateInputType
  }

  export type GetProductToPathTraversalLab1AggregateType<T extends ProductToPathTraversalLab1AggregateArgs> = {
        [P in keyof T & keyof AggregateProductToPathTraversalLab1]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProductToPathTraversalLab1[P]>
      : GetScalarType<T[P], AggregateProductToPathTraversalLab1[P]>
  }




  export type ProductToPathTraversalLab1GroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductToPathTraversalLab1WhereInput
    orderBy?: ProductToPathTraversalLab1OrderByWithAggregationInput | ProductToPathTraversalLab1OrderByWithAggregationInput[]
    by: ProductToPathTraversalLab1ScalarFieldEnum[] | ProductToPathTraversalLab1ScalarFieldEnum
    having?: ProductToPathTraversalLab1ScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductToPathTraversalLab1CountAggregateInputType | true
    _avg?: ProductToPathTraversalLab1AvgAggregateInputType
    _sum?: ProductToPathTraversalLab1SumAggregateInputType
    _min?: ProductToPathTraversalLab1MinAggregateInputType
    _max?: ProductToPathTraversalLab1MaxAggregateInputType
  }

  export type ProductToPathTraversalLab1GroupByOutputType = {
    id: number
    name: string | null
    path: string
    description: string
    _count: ProductToPathTraversalLab1CountAggregateOutputType | null
    _avg: ProductToPathTraversalLab1AvgAggregateOutputType | null
    _sum: ProductToPathTraversalLab1SumAggregateOutputType | null
    _min: ProductToPathTraversalLab1MinAggregateOutputType | null
    _max: ProductToPathTraversalLab1MaxAggregateOutputType | null
  }

  type GetProductToPathTraversalLab1GroupByPayload<T extends ProductToPathTraversalLab1GroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductToPathTraversalLab1GroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductToPathTraversalLab1GroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductToPathTraversalLab1GroupByOutputType[P]>
            : GetScalarType<T[P], ProductToPathTraversalLab1GroupByOutputType[P]>
        }
      >
    >


  export type ProductToPathTraversalLab1Select<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    path?: boolean
    description?: boolean
  }, ExtArgs["result"]["productToPathTraversalLab1"]>

  export type ProductToPathTraversalLab1SelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    path?: boolean
    description?: boolean
  }, ExtArgs["result"]["productToPathTraversalLab1"]>

  export type ProductToPathTraversalLab1SelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    path?: boolean
    description?: boolean
  }, ExtArgs["result"]["productToPathTraversalLab1"]>

  export type ProductToPathTraversalLab1SelectScalar = {
    id?: boolean
    name?: boolean
    path?: boolean
    description?: boolean
  }

  export type ProductToPathTraversalLab1Omit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "path" | "description", ExtArgs["result"]["productToPathTraversalLab1"]>

  export type $ProductToPathTraversalLab1Payload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProductToPathTraversalLab1"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string | null
      path: string
      description: string
    }, ExtArgs["result"]["productToPathTraversalLab1"]>
    composites: {}
  }

  type ProductToPathTraversalLab1GetPayload<S extends boolean | null | undefined | ProductToPathTraversalLab1DefaultArgs> = $Result.GetResult<Prisma.$ProductToPathTraversalLab1Payload, S>

  type ProductToPathTraversalLab1CountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProductToPathTraversalLab1FindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProductToPathTraversalLab1CountAggregateInputType | true
    }

  export interface ProductToPathTraversalLab1Delegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProductToPathTraversalLab1'], meta: { name: 'ProductToPathTraversalLab1' } }
    /**
     * Find zero or one ProductToPathTraversalLab1 that matches the filter.
     * @param {ProductToPathTraversalLab1FindUniqueArgs} args - Arguments to find a ProductToPathTraversalLab1
     * @example
     * // Get one ProductToPathTraversalLab1
     * const productToPathTraversalLab1 = await prisma.productToPathTraversalLab1.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProductToPathTraversalLab1FindUniqueArgs>(args: SelectSubset<T, ProductToPathTraversalLab1FindUniqueArgs<ExtArgs>>): Prisma__ProductToPathTraversalLab1Client<$Result.GetResult<Prisma.$ProductToPathTraversalLab1Payload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one ProductToPathTraversalLab1 that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProductToPathTraversalLab1FindUniqueOrThrowArgs} args - Arguments to find a ProductToPathTraversalLab1
     * @example
     * // Get one ProductToPathTraversalLab1
     * const productToPathTraversalLab1 = await prisma.productToPathTraversalLab1.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProductToPathTraversalLab1FindUniqueOrThrowArgs>(args: SelectSubset<T, ProductToPathTraversalLab1FindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProductToPathTraversalLab1Client<$Result.GetResult<Prisma.$ProductToPathTraversalLab1Payload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first ProductToPathTraversalLab1 that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductToPathTraversalLab1FindFirstArgs} args - Arguments to find a ProductToPathTraversalLab1
     * @example
     * // Get one ProductToPathTraversalLab1
     * const productToPathTraversalLab1 = await prisma.productToPathTraversalLab1.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProductToPathTraversalLab1FindFirstArgs>(args?: SelectSubset<T, ProductToPathTraversalLab1FindFirstArgs<ExtArgs>>): Prisma__ProductToPathTraversalLab1Client<$Result.GetResult<Prisma.$ProductToPathTraversalLab1Payload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first ProductToPathTraversalLab1 that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductToPathTraversalLab1FindFirstOrThrowArgs} args - Arguments to find a ProductToPathTraversalLab1
     * @example
     * // Get one ProductToPathTraversalLab1
     * const productToPathTraversalLab1 = await prisma.productToPathTraversalLab1.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProductToPathTraversalLab1FindFirstOrThrowArgs>(args?: SelectSubset<T, ProductToPathTraversalLab1FindFirstOrThrowArgs<ExtArgs>>): Prisma__ProductToPathTraversalLab1Client<$Result.GetResult<Prisma.$ProductToPathTraversalLab1Payload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more ProductToPathTraversalLab1s that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductToPathTraversalLab1FindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProductToPathTraversalLab1s
     * const productToPathTraversalLab1s = await prisma.productToPathTraversalLab1.findMany()
     * 
     * // Get first 10 ProductToPathTraversalLab1s
     * const productToPathTraversalLab1s = await prisma.productToPathTraversalLab1.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productToPathTraversalLab1WithIdOnly = await prisma.productToPathTraversalLab1.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProductToPathTraversalLab1FindManyArgs>(args?: SelectSubset<T, ProductToPathTraversalLab1FindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductToPathTraversalLab1Payload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a ProductToPathTraversalLab1.
     * @param {ProductToPathTraversalLab1CreateArgs} args - Arguments to create a ProductToPathTraversalLab1.
     * @example
     * // Create one ProductToPathTraversalLab1
     * const ProductToPathTraversalLab1 = await prisma.productToPathTraversalLab1.create({
     *   data: {
     *     // ... data to create a ProductToPathTraversalLab1
     *   }
     * })
     * 
     */
    create<T extends ProductToPathTraversalLab1CreateArgs>(args: SelectSubset<T, ProductToPathTraversalLab1CreateArgs<ExtArgs>>): Prisma__ProductToPathTraversalLab1Client<$Result.GetResult<Prisma.$ProductToPathTraversalLab1Payload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many ProductToPathTraversalLab1s.
     * @param {ProductToPathTraversalLab1CreateManyArgs} args - Arguments to create many ProductToPathTraversalLab1s.
     * @example
     * // Create many ProductToPathTraversalLab1s
     * const productToPathTraversalLab1 = await prisma.productToPathTraversalLab1.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProductToPathTraversalLab1CreateManyArgs>(args?: SelectSubset<T, ProductToPathTraversalLab1CreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProductToPathTraversalLab1s and returns the data saved in the database.
     * @param {ProductToPathTraversalLab1CreateManyAndReturnArgs} args - Arguments to create many ProductToPathTraversalLab1s.
     * @example
     * // Create many ProductToPathTraversalLab1s
     * const productToPathTraversalLab1 = await prisma.productToPathTraversalLab1.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProductToPathTraversalLab1s and only return the `id`
     * const productToPathTraversalLab1WithIdOnly = await prisma.productToPathTraversalLab1.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProductToPathTraversalLab1CreateManyAndReturnArgs>(args?: SelectSubset<T, ProductToPathTraversalLab1CreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductToPathTraversalLab1Payload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a ProductToPathTraversalLab1.
     * @param {ProductToPathTraversalLab1DeleteArgs} args - Arguments to delete one ProductToPathTraversalLab1.
     * @example
     * // Delete one ProductToPathTraversalLab1
     * const ProductToPathTraversalLab1 = await prisma.productToPathTraversalLab1.delete({
     *   where: {
     *     // ... filter to delete one ProductToPathTraversalLab1
     *   }
     * })
     * 
     */
    delete<T extends ProductToPathTraversalLab1DeleteArgs>(args: SelectSubset<T, ProductToPathTraversalLab1DeleteArgs<ExtArgs>>): Prisma__ProductToPathTraversalLab1Client<$Result.GetResult<Prisma.$ProductToPathTraversalLab1Payload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one ProductToPathTraversalLab1.
     * @param {ProductToPathTraversalLab1UpdateArgs} args - Arguments to update one ProductToPathTraversalLab1.
     * @example
     * // Update one ProductToPathTraversalLab1
     * const productToPathTraversalLab1 = await prisma.productToPathTraversalLab1.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProductToPathTraversalLab1UpdateArgs>(args: SelectSubset<T, ProductToPathTraversalLab1UpdateArgs<ExtArgs>>): Prisma__ProductToPathTraversalLab1Client<$Result.GetResult<Prisma.$ProductToPathTraversalLab1Payload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more ProductToPathTraversalLab1s.
     * @param {ProductToPathTraversalLab1DeleteManyArgs} args - Arguments to filter ProductToPathTraversalLab1s to delete.
     * @example
     * // Delete a few ProductToPathTraversalLab1s
     * const { count } = await prisma.productToPathTraversalLab1.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProductToPathTraversalLab1DeleteManyArgs>(args?: SelectSubset<T, ProductToPathTraversalLab1DeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductToPathTraversalLab1s.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductToPathTraversalLab1UpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProductToPathTraversalLab1s
     * const productToPathTraversalLab1 = await prisma.productToPathTraversalLab1.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProductToPathTraversalLab1UpdateManyArgs>(args: SelectSubset<T, ProductToPathTraversalLab1UpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductToPathTraversalLab1s and returns the data updated in the database.
     * @param {ProductToPathTraversalLab1UpdateManyAndReturnArgs} args - Arguments to update many ProductToPathTraversalLab1s.
     * @example
     * // Update many ProductToPathTraversalLab1s
     * const productToPathTraversalLab1 = await prisma.productToPathTraversalLab1.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ProductToPathTraversalLab1s and only return the `id`
     * const productToPathTraversalLab1WithIdOnly = await prisma.productToPathTraversalLab1.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProductToPathTraversalLab1UpdateManyAndReturnArgs>(args: SelectSubset<T, ProductToPathTraversalLab1UpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductToPathTraversalLab1Payload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one ProductToPathTraversalLab1.
     * @param {ProductToPathTraversalLab1UpsertArgs} args - Arguments to update or create a ProductToPathTraversalLab1.
     * @example
     * // Update or create a ProductToPathTraversalLab1
     * const productToPathTraversalLab1 = await prisma.productToPathTraversalLab1.upsert({
     *   create: {
     *     // ... data to create a ProductToPathTraversalLab1
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProductToPathTraversalLab1 we want to update
     *   }
     * })
     */
    upsert<T extends ProductToPathTraversalLab1UpsertArgs>(args: SelectSubset<T, ProductToPathTraversalLab1UpsertArgs<ExtArgs>>): Prisma__ProductToPathTraversalLab1Client<$Result.GetResult<Prisma.$ProductToPathTraversalLab1Payload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of ProductToPathTraversalLab1s.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductToPathTraversalLab1CountArgs} args - Arguments to filter ProductToPathTraversalLab1s to count.
     * @example
     * // Count the number of ProductToPathTraversalLab1s
     * const count = await prisma.productToPathTraversalLab1.count({
     *   where: {
     *     // ... the filter for the ProductToPathTraversalLab1s we want to count
     *   }
     * })
    **/
    count<T extends ProductToPathTraversalLab1CountArgs>(
      args?: Subset<T, ProductToPathTraversalLab1CountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductToPathTraversalLab1CountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProductToPathTraversalLab1.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductToPathTraversalLab1AggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductToPathTraversalLab1AggregateArgs>(args: Subset<T, ProductToPathTraversalLab1AggregateArgs>): Prisma.PrismaPromise<GetProductToPathTraversalLab1AggregateType<T>>

    /**
     * Group by ProductToPathTraversalLab1.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductToPathTraversalLab1GroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductToPathTraversalLab1GroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductToPathTraversalLab1GroupByArgs['orderBy'] }
        : { orderBy?: ProductToPathTraversalLab1GroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductToPathTraversalLab1GroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductToPathTraversalLab1GroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProductToPathTraversalLab1 model
   */
  readonly fields: ProductToPathTraversalLab1FieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProductToPathTraversalLab1.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductToPathTraversalLab1Client<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProductToPathTraversalLab1 model
   */ 
  interface ProductToPathTraversalLab1FieldRefs {
    readonly id: FieldRef<"ProductToPathTraversalLab1", 'Int'>
    readonly name: FieldRef<"ProductToPathTraversalLab1", 'String'>
    readonly path: FieldRef<"ProductToPathTraversalLab1", 'String'>
    readonly description: FieldRef<"ProductToPathTraversalLab1", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ProductToPathTraversalLab1 findUnique
   */
  export type ProductToPathTraversalLab1FindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductToPathTraversalLab1
     */
    select?: ProductToPathTraversalLab1Select<ExtArgs> | null
    /**
     * Omit specific fields from the ProductToPathTraversalLab1
     */
    omit?: ProductToPathTraversalLab1Omit<ExtArgs> | null
    /**
     * Filter, which ProductToPathTraversalLab1 to fetch.
     */
    where: ProductToPathTraversalLab1WhereUniqueInput
  }

  /**
   * ProductToPathTraversalLab1 findUniqueOrThrow
   */
  export type ProductToPathTraversalLab1FindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductToPathTraversalLab1
     */
    select?: ProductToPathTraversalLab1Select<ExtArgs> | null
    /**
     * Omit specific fields from the ProductToPathTraversalLab1
     */
    omit?: ProductToPathTraversalLab1Omit<ExtArgs> | null
    /**
     * Filter, which ProductToPathTraversalLab1 to fetch.
     */
    where: ProductToPathTraversalLab1WhereUniqueInput
  }

  /**
   * ProductToPathTraversalLab1 findFirst
   */
  export type ProductToPathTraversalLab1FindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductToPathTraversalLab1
     */
    select?: ProductToPathTraversalLab1Select<ExtArgs> | null
    /**
     * Omit specific fields from the ProductToPathTraversalLab1
     */
    omit?: ProductToPathTraversalLab1Omit<ExtArgs> | null
    /**
     * Filter, which ProductToPathTraversalLab1 to fetch.
     */
    where?: ProductToPathTraversalLab1WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductToPathTraversalLab1s to fetch.
     */
    orderBy?: ProductToPathTraversalLab1OrderByWithRelationInput | ProductToPathTraversalLab1OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductToPathTraversalLab1s.
     */
    cursor?: ProductToPathTraversalLab1WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductToPathTraversalLab1s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductToPathTraversalLab1s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductToPathTraversalLab1s.
     */
    distinct?: ProductToPathTraversalLab1ScalarFieldEnum | ProductToPathTraversalLab1ScalarFieldEnum[]
  }

  /**
   * ProductToPathTraversalLab1 findFirstOrThrow
   */
  export type ProductToPathTraversalLab1FindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductToPathTraversalLab1
     */
    select?: ProductToPathTraversalLab1Select<ExtArgs> | null
    /**
     * Omit specific fields from the ProductToPathTraversalLab1
     */
    omit?: ProductToPathTraversalLab1Omit<ExtArgs> | null
    /**
     * Filter, which ProductToPathTraversalLab1 to fetch.
     */
    where?: ProductToPathTraversalLab1WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductToPathTraversalLab1s to fetch.
     */
    orderBy?: ProductToPathTraversalLab1OrderByWithRelationInput | ProductToPathTraversalLab1OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductToPathTraversalLab1s.
     */
    cursor?: ProductToPathTraversalLab1WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductToPathTraversalLab1s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductToPathTraversalLab1s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductToPathTraversalLab1s.
     */
    distinct?: ProductToPathTraversalLab1ScalarFieldEnum | ProductToPathTraversalLab1ScalarFieldEnum[]
  }

  /**
   * ProductToPathTraversalLab1 findMany
   */
  export type ProductToPathTraversalLab1FindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductToPathTraversalLab1
     */
    select?: ProductToPathTraversalLab1Select<ExtArgs> | null
    /**
     * Omit specific fields from the ProductToPathTraversalLab1
     */
    omit?: ProductToPathTraversalLab1Omit<ExtArgs> | null
    /**
     * Filter, which ProductToPathTraversalLab1s to fetch.
     */
    where?: ProductToPathTraversalLab1WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductToPathTraversalLab1s to fetch.
     */
    orderBy?: ProductToPathTraversalLab1OrderByWithRelationInput | ProductToPathTraversalLab1OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProductToPathTraversalLab1s.
     */
    cursor?: ProductToPathTraversalLab1WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductToPathTraversalLab1s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductToPathTraversalLab1s.
     */
    skip?: number
    distinct?: ProductToPathTraversalLab1ScalarFieldEnum | ProductToPathTraversalLab1ScalarFieldEnum[]
  }

  /**
   * ProductToPathTraversalLab1 create
   */
  export type ProductToPathTraversalLab1CreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductToPathTraversalLab1
     */
    select?: ProductToPathTraversalLab1Select<ExtArgs> | null
    /**
     * Omit specific fields from the ProductToPathTraversalLab1
     */
    omit?: ProductToPathTraversalLab1Omit<ExtArgs> | null
    /**
     * The data needed to create a ProductToPathTraversalLab1.
     */
    data: XOR<ProductToPathTraversalLab1CreateInput, ProductToPathTraversalLab1UncheckedCreateInput>
  }

  /**
   * ProductToPathTraversalLab1 createMany
   */
  export type ProductToPathTraversalLab1CreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProductToPathTraversalLab1s.
     */
    data: ProductToPathTraversalLab1CreateManyInput | ProductToPathTraversalLab1CreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProductToPathTraversalLab1 createManyAndReturn
   */
  export type ProductToPathTraversalLab1CreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductToPathTraversalLab1
     */
    select?: ProductToPathTraversalLab1SelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProductToPathTraversalLab1
     */
    omit?: ProductToPathTraversalLab1Omit<ExtArgs> | null
    /**
     * The data used to create many ProductToPathTraversalLab1s.
     */
    data: ProductToPathTraversalLab1CreateManyInput | ProductToPathTraversalLab1CreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProductToPathTraversalLab1 update
   */
  export type ProductToPathTraversalLab1UpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductToPathTraversalLab1
     */
    select?: ProductToPathTraversalLab1Select<ExtArgs> | null
    /**
     * Omit specific fields from the ProductToPathTraversalLab1
     */
    omit?: ProductToPathTraversalLab1Omit<ExtArgs> | null
    /**
     * The data needed to update a ProductToPathTraversalLab1.
     */
    data: XOR<ProductToPathTraversalLab1UpdateInput, ProductToPathTraversalLab1UncheckedUpdateInput>
    /**
     * Choose, which ProductToPathTraversalLab1 to update.
     */
    where: ProductToPathTraversalLab1WhereUniqueInput
  }

  /**
   * ProductToPathTraversalLab1 updateMany
   */
  export type ProductToPathTraversalLab1UpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProductToPathTraversalLab1s.
     */
    data: XOR<ProductToPathTraversalLab1UpdateManyMutationInput, ProductToPathTraversalLab1UncheckedUpdateManyInput>
    /**
     * Filter which ProductToPathTraversalLab1s to update
     */
    where?: ProductToPathTraversalLab1WhereInput
    /**
     * Limit how many ProductToPathTraversalLab1s to update.
     */
    limit?: number
  }

  /**
   * ProductToPathTraversalLab1 updateManyAndReturn
   */
  export type ProductToPathTraversalLab1UpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductToPathTraversalLab1
     */
    select?: ProductToPathTraversalLab1SelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProductToPathTraversalLab1
     */
    omit?: ProductToPathTraversalLab1Omit<ExtArgs> | null
    /**
     * The data used to update ProductToPathTraversalLab1s.
     */
    data: XOR<ProductToPathTraversalLab1UpdateManyMutationInput, ProductToPathTraversalLab1UncheckedUpdateManyInput>
    /**
     * Filter which ProductToPathTraversalLab1s to update
     */
    where?: ProductToPathTraversalLab1WhereInput
    /**
     * Limit how many ProductToPathTraversalLab1s to update.
     */
    limit?: number
  }

  /**
   * ProductToPathTraversalLab1 upsert
   */
  export type ProductToPathTraversalLab1UpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductToPathTraversalLab1
     */
    select?: ProductToPathTraversalLab1Select<ExtArgs> | null
    /**
     * Omit specific fields from the ProductToPathTraversalLab1
     */
    omit?: ProductToPathTraversalLab1Omit<ExtArgs> | null
    /**
     * The filter to search for the ProductToPathTraversalLab1 to update in case it exists.
     */
    where: ProductToPathTraversalLab1WhereUniqueInput
    /**
     * In case the ProductToPathTraversalLab1 found by the `where` argument doesn't exist, create a new ProductToPathTraversalLab1 with this data.
     */
    create: XOR<ProductToPathTraversalLab1CreateInput, ProductToPathTraversalLab1UncheckedCreateInput>
    /**
     * In case the ProductToPathTraversalLab1 was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductToPathTraversalLab1UpdateInput, ProductToPathTraversalLab1UncheckedUpdateInput>
  }

  /**
   * ProductToPathTraversalLab1 delete
   */
  export type ProductToPathTraversalLab1DeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductToPathTraversalLab1
     */
    select?: ProductToPathTraversalLab1Select<ExtArgs> | null
    /**
     * Omit specific fields from the ProductToPathTraversalLab1
     */
    omit?: ProductToPathTraversalLab1Omit<ExtArgs> | null
    /**
     * Filter which ProductToPathTraversalLab1 to delete.
     */
    where: ProductToPathTraversalLab1WhereUniqueInput
  }

  /**
   * ProductToPathTraversalLab1 deleteMany
   */
  export type ProductToPathTraversalLab1DeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductToPathTraversalLab1s to delete
     */
    where?: ProductToPathTraversalLab1WhereInput
    /**
     * Limit how many ProductToPathTraversalLab1s to delete.
     */
    limit?: number
  }

  /**
   * ProductToPathTraversalLab1 without action
   */
  export type ProductToPathTraversalLab1DefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductToPathTraversalLab1
     */
    select?: ProductToPathTraversalLab1Select<ExtArgs> | null
    /**
     * Omit specific fields from the ProductToPathTraversalLab1
     */
    omit?: ProductToPathTraversalLab1Omit<ExtArgs> | null
  }


  /**
   * Model BankAccount
   */

  export type AggregateBankAccount = {
    _count: BankAccountCountAggregateOutputType | null
    _avg: BankAccountAvgAggregateOutputType | null
    _sum: BankAccountSumAggregateOutputType | null
    _min: BankAccountMinAggregateOutputType | null
    _max: BankAccountMaxAggregateOutputType | null
  }

  export type BankAccountAvgAggregateOutputType = {
    id: number | null
    accountBalance: number | null
  }

  export type BankAccountSumAggregateOutputType = {
    id: number | null
    accountBalance: number | null
  }

  export type BankAccountMinAggregateOutputType = {
    id: number | null
    accountNo: string | null
    accountPass: string | null
    accountBalance: number | null
    accountName: string | null
  }

  export type BankAccountMaxAggregateOutputType = {
    id: number | null
    accountNo: string | null
    accountPass: string | null
    accountBalance: number | null
    accountName: string | null
  }

  export type BankAccountCountAggregateOutputType = {
    id: number
    accountNo: number
    accountPass: number
    accountBalance: number
    accountName: number
    _all: number
  }


  export type BankAccountAvgAggregateInputType = {
    id?: true
    accountBalance?: true
  }

  export type BankAccountSumAggregateInputType = {
    id?: true
    accountBalance?: true
  }

  export type BankAccountMinAggregateInputType = {
    id?: true
    accountNo?: true
    accountPass?: true
    accountBalance?: true
    accountName?: true
  }

  export type BankAccountMaxAggregateInputType = {
    id?: true
    accountNo?: true
    accountPass?: true
    accountBalance?: true
    accountName?: true
  }

  export type BankAccountCountAggregateInputType = {
    id?: true
    accountNo?: true
    accountPass?: true
    accountBalance?: true
    accountName?: true
    _all?: true
  }

  export type BankAccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BankAccount to aggregate.
     */
    where?: BankAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BankAccounts to fetch.
     */
    orderBy?: BankAccountOrderByWithRelationInput | BankAccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BankAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BankAccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BankAccounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BankAccounts
    **/
    _count?: true | BankAccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BankAccountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BankAccountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BankAccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BankAccountMaxAggregateInputType
  }

  export type GetBankAccountAggregateType<T extends BankAccountAggregateArgs> = {
        [P in keyof T & keyof AggregateBankAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBankAccount[P]>
      : GetScalarType<T[P], AggregateBankAccount[P]>
  }




  export type BankAccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BankAccountWhereInput
    orderBy?: BankAccountOrderByWithAggregationInput | BankAccountOrderByWithAggregationInput[]
    by: BankAccountScalarFieldEnum[] | BankAccountScalarFieldEnum
    having?: BankAccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BankAccountCountAggregateInputType | true
    _avg?: BankAccountAvgAggregateInputType
    _sum?: BankAccountSumAggregateInputType
    _min?: BankAccountMinAggregateInputType
    _max?: BankAccountMaxAggregateInputType
  }

  export type BankAccountGroupByOutputType = {
    id: number
    accountNo: string
    accountPass: string
    accountBalance: number
    accountName: string
    _count: BankAccountCountAggregateOutputType | null
    _avg: BankAccountAvgAggregateOutputType | null
    _sum: BankAccountSumAggregateOutputType | null
    _min: BankAccountMinAggregateOutputType | null
    _max: BankAccountMaxAggregateOutputType | null
  }

  type GetBankAccountGroupByPayload<T extends BankAccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BankAccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BankAccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BankAccountGroupByOutputType[P]>
            : GetScalarType<T[P], BankAccountGroupByOutputType[P]>
        }
      >
    >


  export type BankAccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    accountNo?: boolean
    accountPass?: boolean
    accountBalance?: boolean
    accountName?: boolean
  }, ExtArgs["result"]["bankAccount"]>

  export type BankAccountSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    accountNo?: boolean
    accountPass?: boolean
    accountBalance?: boolean
    accountName?: boolean
  }, ExtArgs["result"]["bankAccount"]>

  export type BankAccountSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    accountNo?: boolean
    accountPass?: boolean
    accountBalance?: boolean
    accountName?: boolean
  }, ExtArgs["result"]["bankAccount"]>

  export type BankAccountSelectScalar = {
    id?: boolean
    accountNo?: boolean
    accountPass?: boolean
    accountBalance?: boolean
    accountName?: boolean
  }

  export type BankAccountOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "accountNo" | "accountPass" | "accountBalance" | "accountName", ExtArgs["result"]["bankAccount"]>

  export type $BankAccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BankAccount"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      accountNo: string
      accountPass: string
      accountBalance: number
      accountName: string
    }, ExtArgs["result"]["bankAccount"]>
    composites: {}
  }

  type BankAccountGetPayload<S extends boolean | null | undefined | BankAccountDefaultArgs> = $Result.GetResult<Prisma.$BankAccountPayload, S>

  type BankAccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BankAccountFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BankAccountCountAggregateInputType | true
    }

  export interface BankAccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BankAccount'], meta: { name: 'BankAccount' } }
    /**
     * Find zero or one BankAccount that matches the filter.
     * @param {BankAccountFindUniqueArgs} args - Arguments to find a BankAccount
     * @example
     * // Get one BankAccount
     * const bankAccount = await prisma.bankAccount.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BankAccountFindUniqueArgs>(args: SelectSubset<T, BankAccountFindUniqueArgs<ExtArgs>>): Prisma__BankAccountClient<$Result.GetResult<Prisma.$BankAccountPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one BankAccount that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BankAccountFindUniqueOrThrowArgs} args - Arguments to find a BankAccount
     * @example
     * // Get one BankAccount
     * const bankAccount = await prisma.bankAccount.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BankAccountFindUniqueOrThrowArgs>(args: SelectSubset<T, BankAccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BankAccountClient<$Result.GetResult<Prisma.$BankAccountPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first BankAccount that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BankAccountFindFirstArgs} args - Arguments to find a BankAccount
     * @example
     * // Get one BankAccount
     * const bankAccount = await prisma.bankAccount.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BankAccountFindFirstArgs>(args?: SelectSubset<T, BankAccountFindFirstArgs<ExtArgs>>): Prisma__BankAccountClient<$Result.GetResult<Prisma.$BankAccountPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first BankAccount that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BankAccountFindFirstOrThrowArgs} args - Arguments to find a BankAccount
     * @example
     * // Get one BankAccount
     * const bankAccount = await prisma.bankAccount.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BankAccountFindFirstOrThrowArgs>(args?: SelectSubset<T, BankAccountFindFirstOrThrowArgs<ExtArgs>>): Prisma__BankAccountClient<$Result.GetResult<Prisma.$BankAccountPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more BankAccounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BankAccountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BankAccounts
     * const bankAccounts = await prisma.bankAccount.findMany()
     * 
     * // Get first 10 BankAccounts
     * const bankAccounts = await prisma.bankAccount.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bankAccountWithIdOnly = await prisma.bankAccount.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BankAccountFindManyArgs>(args?: SelectSubset<T, BankAccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BankAccountPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a BankAccount.
     * @param {BankAccountCreateArgs} args - Arguments to create a BankAccount.
     * @example
     * // Create one BankAccount
     * const BankAccount = await prisma.bankAccount.create({
     *   data: {
     *     // ... data to create a BankAccount
     *   }
     * })
     * 
     */
    create<T extends BankAccountCreateArgs>(args: SelectSubset<T, BankAccountCreateArgs<ExtArgs>>): Prisma__BankAccountClient<$Result.GetResult<Prisma.$BankAccountPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many BankAccounts.
     * @param {BankAccountCreateManyArgs} args - Arguments to create many BankAccounts.
     * @example
     * // Create many BankAccounts
     * const bankAccount = await prisma.bankAccount.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BankAccountCreateManyArgs>(args?: SelectSubset<T, BankAccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BankAccounts and returns the data saved in the database.
     * @param {BankAccountCreateManyAndReturnArgs} args - Arguments to create many BankAccounts.
     * @example
     * // Create many BankAccounts
     * const bankAccount = await prisma.bankAccount.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BankAccounts and only return the `id`
     * const bankAccountWithIdOnly = await prisma.bankAccount.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BankAccountCreateManyAndReturnArgs>(args?: SelectSubset<T, BankAccountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BankAccountPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a BankAccount.
     * @param {BankAccountDeleteArgs} args - Arguments to delete one BankAccount.
     * @example
     * // Delete one BankAccount
     * const BankAccount = await prisma.bankAccount.delete({
     *   where: {
     *     // ... filter to delete one BankAccount
     *   }
     * })
     * 
     */
    delete<T extends BankAccountDeleteArgs>(args: SelectSubset<T, BankAccountDeleteArgs<ExtArgs>>): Prisma__BankAccountClient<$Result.GetResult<Prisma.$BankAccountPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one BankAccount.
     * @param {BankAccountUpdateArgs} args - Arguments to update one BankAccount.
     * @example
     * // Update one BankAccount
     * const bankAccount = await prisma.bankAccount.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BankAccountUpdateArgs>(args: SelectSubset<T, BankAccountUpdateArgs<ExtArgs>>): Prisma__BankAccountClient<$Result.GetResult<Prisma.$BankAccountPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more BankAccounts.
     * @param {BankAccountDeleteManyArgs} args - Arguments to filter BankAccounts to delete.
     * @example
     * // Delete a few BankAccounts
     * const { count } = await prisma.bankAccount.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BankAccountDeleteManyArgs>(args?: SelectSubset<T, BankAccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BankAccounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BankAccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BankAccounts
     * const bankAccount = await prisma.bankAccount.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BankAccountUpdateManyArgs>(args: SelectSubset<T, BankAccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BankAccounts and returns the data updated in the database.
     * @param {BankAccountUpdateManyAndReturnArgs} args - Arguments to update many BankAccounts.
     * @example
     * // Update many BankAccounts
     * const bankAccount = await prisma.bankAccount.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more BankAccounts and only return the `id`
     * const bankAccountWithIdOnly = await prisma.bankAccount.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BankAccountUpdateManyAndReturnArgs>(args: SelectSubset<T, BankAccountUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BankAccountPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one BankAccount.
     * @param {BankAccountUpsertArgs} args - Arguments to update or create a BankAccount.
     * @example
     * // Update or create a BankAccount
     * const bankAccount = await prisma.bankAccount.upsert({
     *   create: {
     *     // ... data to create a BankAccount
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BankAccount we want to update
     *   }
     * })
     */
    upsert<T extends BankAccountUpsertArgs>(args: SelectSubset<T, BankAccountUpsertArgs<ExtArgs>>): Prisma__BankAccountClient<$Result.GetResult<Prisma.$BankAccountPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of BankAccounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BankAccountCountArgs} args - Arguments to filter BankAccounts to count.
     * @example
     * // Count the number of BankAccounts
     * const count = await prisma.bankAccount.count({
     *   where: {
     *     // ... the filter for the BankAccounts we want to count
     *   }
     * })
    **/
    count<T extends BankAccountCountArgs>(
      args?: Subset<T, BankAccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BankAccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BankAccount.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BankAccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BankAccountAggregateArgs>(args: Subset<T, BankAccountAggregateArgs>): Prisma.PrismaPromise<GetBankAccountAggregateType<T>>

    /**
     * Group by BankAccount.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BankAccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BankAccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BankAccountGroupByArgs['orderBy'] }
        : { orderBy?: BankAccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BankAccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBankAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BankAccount model
   */
  readonly fields: BankAccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BankAccount.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BankAccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BankAccount model
   */ 
  interface BankAccountFieldRefs {
    readonly id: FieldRef<"BankAccount", 'Int'>
    readonly accountNo: FieldRef<"BankAccount", 'String'>
    readonly accountPass: FieldRef<"BankAccount", 'String'>
    readonly accountBalance: FieldRef<"BankAccount", 'Float'>
    readonly accountName: FieldRef<"BankAccount", 'String'>
  }
    

  // Custom InputTypes
  /**
   * BankAccount findUnique
   */
  export type BankAccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankAccount
     */
    select?: BankAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BankAccount
     */
    omit?: BankAccountOmit<ExtArgs> | null
    /**
     * Filter, which BankAccount to fetch.
     */
    where: BankAccountWhereUniqueInput
  }

  /**
   * BankAccount findUniqueOrThrow
   */
  export type BankAccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankAccount
     */
    select?: BankAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BankAccount
     */
    omit?: BankAccountOmit<ExtArgs> | null
    /**
     * Filter, which BankAccount to fetch.
     */
    where: BankAccountWhereUniqueInput
  }

  /**
   * BankAccount findFirst
   */
  export type BankAccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankAccount
     */
    select?: BankAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BankAccount
     */
    omit?: BankAccountOmit<ExtArgs> | null
    /**
     * Filter, which BankAccount to fetch.
     */
    where?: BankAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BankAccounts to fetch.
     */
    orderBy?: BankAccountOrderByWithRelationInput | BankAccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BankAccounts.
     */
    cursor?: BankAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BankAccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BankAccounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BankAccounts.
     */
    distinct?: BankAccountScalarFieldEnum | BankAccountScalarFieldEnum[]
  }

  /**
   * BankAccount findFirstOrThrow
   */
  export type BankAccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankAccount
     */
    select?: BankAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BankAccount
     */
    omit?: BankAccountOmit<ExtArgs> | null
    /**
     * Filter, which BankAccount to fetch.
     */
    where?: BankAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BankAccounts to fetch.
     */
    orderBy?: BankAccountOrderByWithRelationInput | BankAccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BankAccounts.
     */
    cursor?: BankAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BankAccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BankAccounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BankAccounts.
     */
    distinct?: BankAccountScalarFieldEnum | BankAccountScalarFieldEnum[]
  }

  /**
   * BankAccount findMany
   */
  export type BankAccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankAccount
     */
    select?: BankAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BankAccount
     */
    omit?: BankAccountOmit<ExtArgs> | null
    /**
     * Filter, which BankAccounts to fetch.
     */
    where?: BankAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BankAccounts to fetch.
     */
    orderBy?: BankAccountOrderByWithRelationInput | BankAccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BankAccounts.
     */
    cursor?: BankAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BankAccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BankAccounts.
     */
    skip?: number
    distinct?: BankAccountScalarFieldEnum | BankAccountScalarFieldEnum[]
  }

  /**
   * BankAccount create
   */
  export type BankAccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankAccount
     */
    select?: BankAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BankAccount
     */
    omit?: BankAccountOmit<ExtArgs> | null
    /**
     * The data needed to create a BankAccount.
     */
    data: XOR<BankAccountCreateInput, BankAccountUncheckedCreateInput>
  }

  /**
   * BankAccount createMany
   */
  export type BankAccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BankAccounts.
     */
    data: BankAccountCreateManyInput | BankAccountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BankAccount createManyAndReturn
   */
  export type BankAccountCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankAccount
     */
    select?: BankAccountSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BankAccount
     */
    omit?: BankAccountOmit<ExtArgs> | null
    /**
     * The data used to create many BankAccounts.
     */
    data: BankAccountCreateManyInput | BankAccountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BankAccount update
   */
  export type BankAccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankAccount
     */
    select?: BankAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BankAccount
     */
    omit?: BankAccountOmit<ExtArgs> | null
    /**
     * The data needed to update a BankAccount.
     */
    data: XOR<BankAccountUpdateInput, BankAccountUncheckedUpdateInput>
    /**
     * Choose, which BankAccount to update.
     */
    where: BankAccountWhereUniqueInput
  }

  /**
   * BankAccount updateMany
   */
  export type BankAccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BankAccounts.
     */
    data: XOR<BankAccountUpdateManyMutationInput, BankAccountUncheckedUpdateManyInput>
    /**
     * Filter which BankAccounts to update
     */
    where?: BankAccountWhereInput
    /**
     * Limit how many BankAccounts to update.
     */
    limit?: number
  }

  /**
   * BankAccount updateManyAndReturn
   */
  export type BankAccountUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankAccount
     */
    select?: BankAccountSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BankAccount
     */
    omit?: BankAccountOmit<ExtArgs> | null
    /**
     * The data used to update BankAccounts.
     */
    data: XOR<BankAccountUpdateManyMutationInput, BankAccountUncheckedUpdateManyInput>
    /**
     * Filter which BankAccounts to update
     */
    where?: BankAccountWhereInput
    /**
     * Limit how many BankAccounts to update.
     */
    limit?: number
  }

  /**
   * BankAccount upsert
   */
  export type BankAccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankAccount
     */
    select?: BankAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BankAccount
     */
    omit?: BankAccountOmit<ExtArgs> | null
    /**
     * The filter to search for the BankAccount to update in case it exists.
     */
    where: BankAccountWhereUniqueInput
    /**
     * In case the BankAccount found by the `where` argument doesn't exist, create a new BankAccount with this data.
     */
    create: XOR<BankAccountCreateInput, BankAccountUncheckedCreateInput>
    /**
     * In case the BankAccount was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BankAccountUpdateInput, BankAccountUncheckedUpdateInput>
  }

  /**
   * BankAccount delete
   */
  export type BankAccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankAccount
     */
    select?: BankAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BankAccount
     */
    omit?: BankAccountOmit<ExtArgs> | null
    /**
     * Filter which BankAccount to delete.
     */
    where: BankAccountWhereUniqueInput
  }

  /**
   * BankAccount deleteMany
   */
  export type BankAccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BankAccounts to delete
     */
    where?: BankAccountWhereInput
    /**
     * Limit how many BankAccounts to delete.
     */
    limit?: number
  }

  /**
   * BankAccount without action
   */
  export type BankAccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankAccount
     */
    select?: BankAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BankAccount
     */
    omit?: BankAccountOmit<ExtArgs> | null
  }


  /**
   * Model CSRFLab2
   */

  export type AggregateCSRFLab2 = {
    _count: CSRFLab2CountAggregateOutputType | null
    _avg: CSRFLab2AvgAggregateOutputType | null
    _sum: CSRFLab2SumAggregateOutputType | null
    _min: CSRFLab2MinAggregateOutputType | null
    _max: CSRFLab2MaxAggregateOutputType | null
  }

  export type CSRFLab2AvgAggregateOutputType = {
    id: number | null
  }

  export type CSRFLab2SumAggregateOutputType = {
    id: number | null
  }

  export type CSRFLab2MinAggregateOutputType = {
    id: number | null
    authority: string | null
    password: string | null
  }

  export type CSRFLab2MaxAggregateOutputType = {
    id: number | null
    authority: string | null
    password: string | null
  }

  export type CSRFLab2CountAggregateOutputType = {
    id: number
    authority: number
    password: number
    _all: number
  }


  export type CSRFLab2AvgAggregateInputType = {
    id?: true
  }

  export type CSRFLab2SumAggregateInputType = {
    id?: true
  }

  export type CSRFLab2MinAggregateInputType = {
    id?: true
    authority?: true
    password?: true
  }

  export type CSRFLab2MaxAggregateInputType = {
    id?: true
    authority?: true
    password?: true
  }

  export type CSRFLab2CountAggregateInputType = {
    id?: true
    authority?: true
    password?: true
    _all?: true
  }

  export type CSRFLab2AggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CSRFLab2 to aggregate.
     */
    where?: CSRFLab2WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CSRFLab2s to fetch.
     */
    orderBy?: CSRFLab2OrderByWithRelationInput | CSRFLab2OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CSRFLab2WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CSRFLab2s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CSRFLab2s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CSRFLab2s
    **/
    _count?: true | CSRFLab2CountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CSRFLab2AvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CSRFLab2SumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CSRFLab2MinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CSRFLab2MaxAggregateInputType
  }

  export type GetCSRFLab2AggregateType<T extends CSRFLab2AggregateArgs> = {
        [P in keyof T & keyof AggregateCSRFLab2]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCSRFLab2[P]>
      : GetScalarType<T[P], AggregateCSRFLab2[P]>
  }




  export type CSRFLab2GroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CSRFLab2WhereInput
    orderBy?: CSRFLab2OrderByWithAggregationInput | CSRFLab2OrderByWithAggregationInput[]
    by: CSRFLab2ScalarFieldEnum[] | CSRFLab2ScalarFieldEnum
    having?: CSRFLab2ScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CSRFLab2CountAggregateInputType | true
    _avg?: CSRFLab2AvgAggregateInputType
    _sum?: CSRFLab2SumAggregateInputType
    _min?: CSRFLab2MinAggregateInputType
    _max?: CSRFLab2MaxAggregateInputType
  }

  export type CSRFLab2GroupByOutputType = {
    id: number
    authority: string
    password: string
    _count: CSRFLab2CountAggregateOutputType | null
    _avg: CSRFLab2AvgAggregateOutputType | null
    _sum: CSRFLab2SumAggregateOutputType | null
    _min: CSRFLab2MinAggregateOutputType | null
    _max: CSRFLab2MaxAggregateOutputType | null
  }

  type GetCSRFLab2GroupByPayload<T extends CSRFLab2GroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CSRFLab2GroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CSRFLab2GroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CSRFLab2GroupByOutputType[P]>
            : GetScalarType<T[P], CSRFLab2GroupByOutputType[P]>
        }
      >
    >


  export type CSRFLab2Select<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    authority?: boolean
    password?: boolean
  }, ExtArgs["result"]["cSRFLab2"]>

  export type CSRFLab2SelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    authority?: boolean
    password?: boolean
  }, ExtArgs["result"]["cSRFLab2"]>

  export type CSRFLab2SelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    authority?: boolean
    password?: boolean
  }, ExtArgs["result"]["cSRFLab2"]>

  export type CSRFLab2SelectScalar = {
    id?: boolean
    authority?: boolean
    password?: boolean
  }

  export type CSRFLab2Omit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "authority" | "password", ExtArgs["result"]["cSRFLab2"]>

  export type $CSRFLab2Payload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CSRFLab2"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      authority: string
      password: string
    }, ExtArgs["result"]["cSRFLab2"]>
    composites: {}
  }

  type CSRFLab2GetPayload<S extends boolean | null | undefined | CSRFLab2DefaultArgs> = $Result.GetResult<Prisma.$CSRFLab2Payload, S>

  type CSRFLab2CountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CSRFLab2FindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CSRFLab2CountAggregateInputType | true
    }

  export interface CSRFLab2Delegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CSRFLab2'], meta: { name: 'CSRFLab2' } }
    /**
     * Find zero or one CSRFLab2 that matches the filter.
     * @param {CSRFLab2FindUniqueArgs} args - Arguments to find a CSRFLab2
     * @example
     * // Get one CSRFLab2
     * const cSRFLab2 = await prisma.cSRFLab2.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CSRFLab2FindUniqueArgs>(args: SelectSubset<T, CSRFLab2FindUniqueArgs<ExtArgs>>): Prisma__CSRFLab2Client<$Result.GetResult<Prisma.$CSRFLab2Payload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one CSRFLab2 that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CSRFLab2FindUniqueOrThrowArgs} args - Arguments to find a CSRFLab2
     * @example
     * // Get one CSRFLab2
     * const cSRFLab2 = await prisma.cSRFLab2.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CSRFLab2FindUniqueOrThrowArgs>(args: SelectSubset<T, CSRFLab2FindUniqueOrThrowArgs<ExtArgs>>): Prisma__CSRFLab2Client<$Result.GetResult<Prisma.$CSRFLab2Payload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first CSRFLab2 that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CSRFLab2FindFirstArgs} args - Arguments to find a CSRFLab2
     * @example
     * // Get one CSRFLab2
     * const cSRFLab2 = await prisma.cSRFLab2.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CSRFLab2FindFirstArgs>(args?: SelectSubset<T, CSRFLab2FindFirstArgs<ExtArgs>>): Prisma__CSRFLab2Client<$Result.GetResult<Prisma.$CSRFLab2Payload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first CSRFLab2 that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CSRFLab2FindFirstOrThrowArgs} args - Arguments to find a CSRFLab2
     * @example
     * // Get one CSRFLab2
     * const cSRFLab2 = await prisma.cSRFLab2.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CSRFLab2FindFirstOrThrowArgs>(args?: SelectSubset<T, CSRFLab2FindFirstOrThrowArgs<ExtArgs>>): Prisma__CSRFLab2Client<$Result.GetResult<Prisma.$CSRFLab2Payload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more CSRFLab2s that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CSRFLab2FindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CSRFLab2s
     * const cSRFLab2s = await prisma.cSRFLab2.findMany()
     * 
     * // Get first 10 CSRFLab2s
     * const cSRFLab2s = await prisma.cSRFLab2.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cSRFLab2WithIdOnly = await prisma.cSRFLab2.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CSRFLab2FindManyArgs>(args?: SelectSubset<T, CSRFLab2FindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CSRFLab2Payload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a CSRFLab2.
     * @param {CSRFLab2CreateArgs} args - Arguments to create a CSRFLab2.
     * @example
     * // Create one CSRFLab2
     * const CSRFLab2 = await prisma.cSRFLab2.create({
     *   data: {
     *     // ... data to create a CSRFLab2
     *   }
     * })
     * 
     */
    create<T extends CSRFLab2CreateArgs>(args: SelectSubset<T, CSRFLab2CreateArgs<ExtArgs>>): Prisma__CSRFLab2Client<$Result.GetResult<Prisma.$CSRFLab2Payload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many CSRFLab2s.
     * @param {CSRFLab2CreateManyArgs} args - Arguments to create many CSRFLab2s.
     * @example
     * // Create many CSRFLab2s
     * const cSRFLab2 = await prisma.cSRFLab2.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CSRFLab2CreateManyArgs>(args?: SelectSubset<T, CSRFLab2CreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CSRFLab2s and returns the data saved in the database.
     * @param {CSRFLab2CreateManyAndReturnArgs} args - Arguments to create many CSRFLab2s.
     * @example
     * // Create many CSRFLab2s
     * const cSRFLab2 = await prisma.cSRFLab2.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CSRFLab2s and only return the `id`
     * const cSRFLab2WithIdOnly = await prisma.cSRFLab2.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CSRFLab2CreateManyAndReturnArgs>(args?: SelectSubset<T, CSRFLab2CreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CSRFLab2Payload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a CSRFLab2.
     * @param {CSRFLab2DeleteArgs} args - Arguments to delete one CSRFLab2.
     * @example
     * // Delete one CSRFLab2
     * const CSRFLab2 = await prisma.cSRFLab2.delete({
     *   where: {
     *     // ... filter to delete one CSRFLab2
     *   }
     * })
     * 
     */
    delete<T extends CSRFLab2DeleteArgs>(args: SelectSubset<T, CSRFLab2DeleteArgs<ExtArgs>>): Prisma__CSRFLab2Client<$Result.GetResult<Prisma.$CSRFLab2Payload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one CSRFLab2.
     * @param {CSRFLab2UpdateArgs} args - Arguments to update one CSRFLab2.
     * @example
     * // Update one CSRFLab2
     * const cSRFLab2 = await prisma.cSRFLab2.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CSRFLab2UpdateArgs>(args: SelectSubset<T, CSRFLab2UpdateArgs<ExtArgs>>): Prisma__CSRFLab2Client<$Result.GetResult<Prisma.$CSRFLab2Payload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more CSRFLab2s.
     * @param {CSRFLab2DeleteManyArgs} args - Arguments to filter CSRFLab2s to delete.
     * @example
     * // Delete a few CSRFLab2s
     * const { count } = await prisma.cSRFLab2.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CSRFLab2DeleteManyArgs>(args?: SelectSubset<T, CSRFLab2DeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CSRFLab2s.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CSRFLab2UpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CSRFLab2s
     * const cSRFLab2 = await prisma.cSRFLab2.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CSRFLab2UpdateManyArgs>(args: SelectSubset<T, CSRFLab2UpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CSRFLab2s and returns the data updated in the database.
     * @param {CSRFLab2UpdateManyAndReturnArgs} args - Arguments to update many CSRFLab2s.
     * @example
     * // Update many CSRFLab2s
     * const cSRFLab2 = await prisma.cSRFLab2.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CSRFLab2s and only return the `id`
     * const cSRFLab2WithIdOnly = await prisma.cSRFLab2.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CSRFLab2UpdateManyAndReturnArgs>(args: SelectSubset<T, CSRFLab2UpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CSRFLab2Payload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one CSRFLab2.
     * @param {CSRFLab2UpsertArgs} args - Arguments to update or create a CSRFLab2.
     * @example
     * // Update or create a CSRFLab2
     * const cSRFLab2 = await prisma.cSRFLab2.upsert({
     *   create: {
     *     // ... data to create a CSRFLab2
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CSRFLab2 we want to update
     *   }
     * })
     */
    upsert<T extends CSRFLab2UpsertArgs>(args: SelectSubset<T, CSRFLab2UpsertArgs<ExtArgs>>): Prisma__CSRFLab2Client<$Result.GetResult<Prisma.$CSRFLab2Payload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of CSRFLab2s.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CSRFLab2CountArgs} args - Arguments to filter CSRFLab2s to count.
     * @example
     * // Count the number of CSRFLab2s
     * const count = await prisma.cSRFLab2.count({
     *   where: {
     *     // ... the filter for the CSRFLab2s we want to count
     *   }
     * })
    **/
    count<T extends CSRFLab2CountArgs>(
      args?: Subset<T, CSRFLab2CountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CSRFLab2CountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CSRFLab2.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CSRFLab2AggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CSRFLab2AggregateArgs>(args: Subset<T, CSRFLab2AggregateArgs>): Prisma.PrismaPromise<GetCSRFLab2AggregateType<T>>

    /**
     * Group by CSRFLab2.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CSRFLab2GroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CSRFLab2GroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CSRFLab2GroupByArgs['orderBy'] }
        : { orderBy?: CSRFLab2GroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CSRFLab2GroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCSRFLab2GroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CSRFLab2 model
   */
  readonly fields: CSRFLab2FieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CSRFLab2.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CSRFLab2Client<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CSRFLab2 model
   */ 
  interface CSRFLab2FieldRefs {
    readonly id: FieldRef<"CSRFLab2", 'Int'>
    readonly authority: FieldRef<"CSRFLab2", 'String'>
    readonly password: FieldRef<"CSRFLab2", 'String'>
  }
    

  // Custom InputTypes
  /**
   * CSRFLab2 findUnique
   */
  export type CSRFLab2FindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CSRFLab2
     */
    select?: CSRFLab2Select<ExtArgs> | null
    /**
     * Omit specific fields from the CSRFLab2
     */
    omit?: CSRFLab2Omit<ExtArgs> | null
    /**
     * Filter, which CSRFLab2 to fetch.
     */
    where: CSRFLab2WhereUniqueInput
  }

  /**
   * CSRFLab2 findUniqueOrThrow
   */
  export type CSRFLab2FindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CSRFLab2
     */
    select?: CSRFLab2Select<ExtArgs> | null
    /**
     * Omit specific fields from the CSRFLab2
     */
    omit?: CSRFLab2Omit<ExtArgs> | null
    /**
     * Filter, which CSRFLab2 to fetch.
     */
    where: CSRFLab2WhereUniqueInput
  }

  /**
   * CSRFLab2 findFirst
   */
  export type CSRFLab2FindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CSRFLab2
     */
    select?: CSRFLab2Select<ExtArgs> | null
    /**
     * Omit specific fields from the CSRFLab2
     */
    omit?: CSRFLab2Omit<ExtArgs> | null
    /**
     * Filter, which CSRFLab2 to fetch.
     */
    where?: CSRFLab2WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CSRFLab2s to fetch.
     */
    orderBy?: CSRFLab2OrderByWithRelationInput | CSRFLab2OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CSRFLab2s.
     */
    cursor?: CSRFLab2WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CSRFLab2s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CSRFLab2s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CSRFLab2s.
     */
    distinct?: CSRFLab2ScalarFieldEnum | CSRFLab2ScalarFieldEnum[]
  }

  /**
   * CSRFLab2 findFirstOrThrow
   */
  export type CSRFLab2FindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CSRFLab2
     */
    select?: CSRFLab2Select<ExtArgs> | null
    /**
     * Omit specific fields from the CSRFLab2
     */
    omit?: CSRFLab2Omit<ExtArgs> | null
    /**
     * Filter, which CSRFLab2 to fetch.
     */
    where?: CSRFLab2WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CSRFLab2s to fetch.
     */
    orderBy?: CSRFLab2OrderByWithRelationInput | CSRFLab2OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CSRFLab2s.
     */
    cursor?: CSRFLab2WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CSRFLab2s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CSRFLab2s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CSRFLab2s.
     */
    distinct?: CSRFLab2ScalarFieldEnum | CSRFLab2ScalarFieldEnum[]
  }

  /**
   * CSRFLab2 findMany
   */
  export type CSRFLab2FindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CSRFLab2
     */
    select?: CSRFLab2Select<ExtArgs> | null
    /**
     * Omit specific fields from the CSRFLab2
     */
    omit?: CSRFLab2Omit<ExtArgs> | null
    /**
     * Filter, which CSRFLab2s to fetch.
     */
    where?: CSRFLab2WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CSRFLab2s to fetch.
     */
    orderBy?: CSRFLab2OrderByWithRelationInput | CSRFLab2OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CSRFLab2s.
     */
    cursor?: CSRFLab2WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CSRFLab2s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CSRFLab2s.
     */
    skip?: number
    distinct?: CSRFLab2ScalarFieldEnum | CSRFLab2ScalarFieldEnum[]
  }

  /**
   * CSRFLab2 create
   */
  export type CSRFLab2CreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CSRFLab2
     */
    select?: CSRFLab2Select<ExtArgs> | null
    /**
     * Omit specific fields from the CSRFLab2
     */
    omit?: CSRFLab2Omit<ExtArgs> | null
    /**
     * The data needed to create a CSRFLab2.
     */
    data: XOR<CSRFLab2CreateInput, CSRFLab2UncheckedCreateInput>
  }

  /**
   * CSRFLab2 createMany
   */
  export type CSRFLab2CreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CSRFLab2s.
     */
    data: CSRFLab2CreateManyInput | CSRFLab2CreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CSRFLab2 createManyAndReturn
   */
  export type CSRFLab2CreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CSRFLab2
     */
    select?: CSRFLab2SelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CSRFLab2
     */
    omit?: CSRFLab2Omit<ExtArgs> | null
    /**
     * The data used to create many CSRFLab2s.
     */
    data: CSRFLab2CreateManyInput | CSRFLab2CreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CSRFLab2 update
   */
  export type CSRFLab2UpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CSRFLab2
     */
    select?: CSRFLab2Select<ExtArgs> | null
    /**
     * Omit specific fields from the CSRFLab2
     */
    omit?: CSRFLab2Omit<ExtArgs> | null
    /**
     * The data needed to update a CSRFLab2.
     */
    data: XOR<CSRFLab2UpdateInput, CSRFLab2UncheckedUpdateInput>
    /**
     * Choose, which CSRFLab2 to update.
     */
    where: CSRFLab2WhereUniqueInput
  }

  /**
   * CSRFLab2 updateMany
   */
  export type CSRFLab2UpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CSRFLab2s.
     */
    data: XOR<CSRFLab2UpdateManyMutationInput, CSRFLab2UncheckedUpdateManyInput>
    /**
     * Filter which CSRFLab2s to update
     */
    where?: CSRFLab2WhereInput
    /**
     * Limit how many CSRFLab2s to update.
     */
    limit?: number
  }

  /**
   * CSRFLab2 updateManyAndReturn
   */
  export type CSRFLab2UpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CSRFLab2
     */
    select?: CSRFLab2SelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CSRFLab2
     */
    omit?: CSRFLab2Omit<ExtArgs> | null
    /**
     * The data used to update CSRFLab2s.
     */
    data: XOR<CSRFLab2UpdateManyMutationInput, CSRFLab2UncheckedUpdateManyInput>
    /**
     * Filter which CSRFLab2s to update
     */
    where?: CSRFLab2WhereInput
    /**
     * Limit how many CSRFLab2s to update.
     */
    limit?: number
  }

  /**
   * CSRFLab2 upsert
   */
  export type CSRFLab2UpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CSRFLab2
     */
    select?: CSRFLab2Select<ExtArgs> | null
    /**
     * Omit specific fields from the CSRFLab2
     */
    omit?: CSRFLab2Omit<ExtArgs> | null
    /**
     * The filter to search for the CSRFLab2 to update in case it exists.
     */
    where: CSRFLab2WhereUniqueInput
    /**
     * In case the CSRFLab2 found by the `where` argument doesn't exist, create a new CSRFLab2 with this data.
     */
    create: XOR<CSRFLab2CreateInput, CSRFLab2UncheckedCreateInput>
    /**
     * In case the CSRFLab2 was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CSRFLab2UpdateInput, CSRFLab2UncheckedUpdateInput>
  }

  /**
   * CSRFLab2 delete
   */
  export type CSRFLab2DeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CSRFLab2
     */
    select?: CSRFLab2Select<ExtArgs> | null
    /**
     * Omit specific fields from the CSRFLab2
     */
    omit?: CSRFLab2Omit<ExtArgs> | null
    /**
     * Filter which CSRFLab2 to delete.
     */
    where: CSRFLab2WhereUniqueInput
  }

  /**
   * CSRFLab2 deleteMany
   */
  export type CSRFLab2DeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CSRFLab2s to delete
     */
    where?: CSRFLab2WhereInput
    /**
     * Limit how many CSRFLab2s to delete.
     */
    limit?: number
  }

  /**
   * CSRFLab2 without action
   */
  export type CSRFLab2DefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CSRFLab2
     */
    select?: CSRFLab2Select<ExtArgs> | null
    /**
     * Omit specific fields from the CSRFLab2
     */
    omit?: CSRFLab2Omit<ExtArgs> | null
  }


  /**
   * Model CSRFLab3
   */

  export type AggregateCSRFLab3 = {
    _count: CSRFLab3CountAggregateOutputType | null
    _avg: CSRFLab3AvgAggregateOutputType | null
    _sum: CSRFLab3SumAggregateOutputType | null
    _min: CSRFLab3MinAggregateOutputType | null
    _max: CSRFLab3MaxAggregateOutputType | null
  }

  export type CSRFLab3AvgAggregateOutputType = {
    id: number | null
    balance: number | null
  }

  export type CSRFLab3SumAggregateOutputType = {
    id: number | null
    balance: number | null
  }

  export type CSRFLab3MinAggregateOutputType = {
    id: number | null
    name: string | null
    balance: number | null
  }

  export type CSRFLab3MaxAggregateOutputType = {
    id: number | null
    name: string | null
    balance: number | null
  }

  export type CSRFLab3CountAggregateOutputType = {
    id: number
    name: number
    balance: number
    _all: number
  }


  export type CSRFLab3AvgAggregateInputType = {
    id?: true
    balance?: true
  }

  export type CSRFLab3SumAggregateInputType = {
    id?: true
    balance?: true
  }

  export type CSRFLab3MinAggregateInputType = {
    id?: true
    name?: true
    balance?: true
  }

  export type CSRFLab3MaxAggregateInputType = {
    id?: true
    name?: true
    balance?: true
  }

  export type CSRFLab3CountAggregateInputType = {
    id?: true
    name?: true
    balance?: true
    _all?: true
  }

  export type CSRFLab3AggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CSRFLab3 to aggregate.
     */
    where?: CSRFLab3WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CSRFLab3s to fetch.
     */
    orderBy?: CSRFLab3OrderByWithRelationInput | CSRFLab3OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CSRFLab3WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CSRFLab3s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CSRFLab3s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CSRFLab3s
    **/
    _count?: true | CSRFLab3CountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CSRFLab3AvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CSRFLab3SumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CSRFLab3MinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CSRFLab3MaxAggregateInputType
  }

  export type GetCSRFLab3AggregateType<T extends CSRFLab3AggregateArgs> = {
        [P in keyof T & keyof AggregateCSRFLab3]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCSRFLab3[P]>
      : GetScalarType<T[P], AggregateCSRFLab3[P]>
  }




  export type CSRFLab3GroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CSRFLab3WhereInput
    orderBy?: CSRFLab3OrderByWithAggregationInput | CSRFLab3OrderByWithAggregationInput[]
    by: CSRFLab3ScalarFieldEnum[] | CSRFLab3ScalarFieldEnum
    having?: CSRFLab3ScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CSRFLab3CountAggregateInputType | true
    _avg?: CSRFLab3AvgAggregateInputType
    _sum?: CSRFLab3SumAggregateInputType
    _min?: CSRFLab3MinAggregateInputType
    _max?: CSRFLab3MaxAggregateInputType
  }

  export type CSRFLab3GroupByOutputType = {
    id: number
    name: string
    balance: number
    _count: CSRFLab3CountAggregateOutputType | null
    _avg: CSRFLab3AvgAggregateOutputType | null
    _sum: CSRFLab3SumAggregateOutputType | null
    _min: CSRFLab3MinAggregateOutputType | null
    _max: CSRFLab3MaxAggregateOutputType | null
  }

  type GetCSRFLab3GroupByPayload<T extends CSRFLab3GroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CSRFLab3GroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CSRFLab3GroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CSRFLab3GroupByOutputType[P]>
            : GetScalarType<T[P], CSRFLab3GroupByOutputType[P]>
        }
      >
    >


  export type CSRFLab3Select<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    balance?: boolean
  }, ExtArgs["result"]["cSRFLab3"]>

  export type CSRFLab3SelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    balance?: boolean
  }, ExtArgs["result"]["cSRFLab3"]>

  export type CSRFLab3SelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    balance?: boolean
  }, ExtArgs["result"]["cSRFLab3"]>

  export type CSRFLab3SelectScalar = {
    id?: boolean
    name?: boolean
    balance?: boolean
  }

  export type CSRFLab3Omit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "balance", ExtArgs["result"]["cSRFLab3"]>

  export type $CSRFLab3Payload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CSRFLab3"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      balance: number
    }, ExtArgs["result"]["cSRFLab3"]>
    composites: {}
  }

  type CSRFLab3GetPayload<S extends boolean | null | undefined | CSRFLab3DefaultArgs> = $Result.GetResult<Prisma.$CSRFLab3Payload, S>

  type CSRFLab3CountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CSRFLab3FindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CSRFLab3CountAggregateInputType | true
    }

  export interface CSRFLab3Delegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CSRFLab3'], meta: { name: 'CSRFLab3' } }
    /**
     * Find zero or one CSRFLab3 that matches the filter.
     * @param {CSRFLab3FindUniqueArgs} args - Arguments to find a CSRFLab3
     * @example
     * // Get one CSRFLab3
     * const cSRFLab3 = await prisma.cSRFLab3.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CSRFLab3FindUniqueArgs>(args: SelectSubset<T, CSRFLab3FindUniqueArgs<ExtArgs>>): Prisma__CSRFLab3Client<$Result.GetResult<Prisma.$CSRFLab3Payload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one CSRFLab3 that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CSRFLab3FindUniqueOrThrowArgs} args - Arguments to find a CSRFLab3
     * @example
     * // Get one CSRFLab3
     * const cSRFLab3 = await prisma.cSRFLab3.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CSRFLab3FindUniqueOrThrowArgs>(args: SelectSubset<T, CSRFLab3FindUniqueOrThrowArgs<ExtArgs>>): Prisma__CSRFLab3Client<$Result.GetResult<Prisma.$CSRFLab3Payload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first CSRFLab3 that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CSRFLab3FindFirstArgs} args - Arguments to find a CSRFLab3
     * @example
     * // Get one CSRFLab3
     * const cSRFLab3 = await prisma.cSRFLab3.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CSRFLab3FindFirstArgs>(args?: SelectSubset<T, CSRFLab3FindFirstArgs<ExtArgs>>): Prisma__CSRFLab3Client<$Result.GetResult<Prisma.$CSRFLab3Payload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first CSRFLab3 that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CSRFLab3FindFirstOrThrowArgs} args - Arguments to find a CSRFLab3
     * @example
     * // Get one CSRFLab3
     * const cSRFLab3 = await prisma.cSRFLab3.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CSRFLab3FindFirstOrThrowArgs>(args?: SelectSubset<T, CSRFLab3FindFirstOrThrowArgs<ExtArgs>>): Prisma__CSRFLab3Client<$Result.GetResult<Prisma.$CSRFLab3Payload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more CSRFLab3s that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CSRFLab3FindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CSRFLab3s
     * const cSRFLab3s = await prisma.cSRFLab3.findMany()
     * 
     * // Get first 10 CSRFLab3s
     * const cSRFLab3s = await prisma.cSRFLab3.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cSRFLab3WithIdOnly = await prisma.cSRFLab3.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CSRFLab3FindManyArgs>(args?: SelectSubset<T, CSRFLab3FindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CSRFLab3Payload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a CSRFLab3.
     * @param {CSRFLab3CreateArgs} args - Arguments to create a CSRFLab3.
     * @example
     * // Create one CSRFLab3
     * const CSRFLab3 = await prisma.cSRFLab3.create({
     *   data: {
     *     // ... data to create a CSRFLab3
     *   }
     * })
     * 
     */
    create<T extends CSRFLab3CreateArgs>(args: SelectSubset<T, CSRFLab3CreateArgs<ExtArgs>>): Prisma__CSRFLab3Client<$Result.GetResult<Prisma.$CSRFLab3Payload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many CSRFLab3s.
     * @param {CSRFLab3CreateManyArgs} args - Arguments to create many CSRFLab3s.
     * @example
     * // Create many CSRFLab3s
     * const cSRFLab3 = await prisma.cSRFLab3.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CSRFLab3CreateManyArgs>(args?: SelectSubset<T, CSRFLab3CreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CSRFLab3s and returns the data saved in the database.
     * @param {CSRFLab3CreateManyAndReturnArgs} args - Arguments to create many CSRFLab3s.
     * @example
     * // Create many CSRFLab3s
     * const cSRFLab3 = await prisma.cSRFLab3.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CSRFLab3s and only return the `id`
     * const cSRFLab3WithIdOnly = await prisma.cSRFLab3.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CSRFLab3CreateManyAndReturnArgs>(args?: SelectSubset<T, CSRFLab3CreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CSRFLab3Payload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a CSRFLab3.
     * @param {CSRFLab3DeleteArgs} args - Arguments to delete one CSRFLab3.
     * @example
     * // Delete one CSRFLab3
     * const CSRFLab3 = await prisma.cSRFLab3.delete({
     *   where: {
     *     // ... filter to delete one CSRFLab3
     *   }
     * })
     * 
     */
    delete<T extends CSRFLab3DeleteArgs>(args: SelectSubset<T, CSRFLab3DeleteArgs<ExtArgs>>): Prisma__CSRFLab3Client<$Result.GetResult<Prisma.$CSRFLab3Payload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one CSRFLab3.
     * @param {CSRFLab3UpdateArgs} args - Arguments to update one CSRFLab3.
     * @example
     * // Update one CSRFLab3
     * const cSRFLab3 = await prisma.cSRFLab3.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CSRFLab3UpdateArgs>(args: SelectSubset<T, CSRFLab3UpdateArgs<ExtArgs>>): Prisma__CSRFLab3Client<$Result.GetResult<Prisma.$CSRFLab3Payload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more CSRFLab3s.
     * @param {CSRFLab3DeleteManyArgs} args - Arguments to filter CSRFLab3s to delete.
     * @example
     * // Delete a few CSRFLab3s
     * const { count } = await prisma.cSRFLab3.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CSRFLab3DeleteManyArgs>(args?: SelectSubset<T, CSRFLab3DeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CSRFLab3s.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CSRFLab3UpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CSRFLab3s
     * const cSRFLab3 = await prisma.cSRFLab3.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CSRFLab3UpdateManyArgs>(args: SelectSubset<T, CSRFLab3UpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CSRFLab3s and returns the data updated in the database.
     * @param {CSRFLab3UpdateManyAndReturnArgs} args - Arguments to update many CSRFLab3s.
     * @example
     * // Update many CSRFLab3s
     * const cSRFLab3 = await prisma.cSRFLab3.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CSRFLab3s and only return the `id`
     * const cSRFLab3WithIdOnly = await prisma.cSRFLab3.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CSRFLab3UpdateManyAndReturnArgs>(args: SelectSubset<T, CSRFLab3UpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CSRFLab3Payload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one CSRFLab3.
     * @param {CSRFLab3UpsertArgs} args - Arguments to update or create a CSRFLab3.
     * @example
     * // Update or create a CSRFLab3
     * const cSRFLab3 = await prisma.cSRFLab3.upsert({
     *   create: {
     *     // ... data to create a CSRFLab3
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CSRFLab3 we want to update
     *   }
     * })
     */
    upsert<T extends CSRFLab3UpsertArgs>(args: SelectSubset<T, CSRFLab3UpsertArgs<ExtArgs>>): Prisma__CSRFLab3Client<$Result.GetResult<Prisma.$CSRFLab3Payload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of CSRFLab3s.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CSRFLab3CountArgs} args - Arguments to filter CSRFLab3s to count.
     * @example
     * // Count the number of CSRFLab3s
     * const count = await prisma.cSRFLab3.count({
     *   where: {
     *     // ... the filter for the CSRFLab3s we want to count
     *   }
     * })
    **/
    count<T extends CSRFLab3CountArgs>(
      args?: Subset<T, CSRFLab3CountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CSRFLab3CountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CSRFLab3.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CSRFLab3AggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CSRFLab3AggregateArgs>(args: Subset<T, CSRFLab3AggregateArgs>): Prisma.PrismaPromise<GetCSRFLab3AggregateType<T>>

    /**
     * Group by CSRFLab3.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CSRFLab3GroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CSRFLab3GroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CSRFLab3GroupByArgs['orderBy'] }
        : { orderBy?: CSRFLab3GroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CSRFLab3GroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCSRFLab3GroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CSRFLab3 model
   */
  readonly fields: CSRFLab3FieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CSRFLab3.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CSRFLab3Client<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CSRFLab3 model
   */ 
  interface CSRFLab3FieldRefs {
    readonly id: FieldRef<"CSRFLab3", 'Int'>
    readonly name: FieldRef<"CSRFLab3", 'String'>
    readonly balance: FieldRef<"CSRFLab3", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * CSRFLab3 findUnique
   */
  export type CSRFLab3FindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CSRFLab3
     */
    select?: CSRFLab3Select<ExtArgs> | null
    /**
     * Omit specific fields from the CSRFLab3
     */
    omit?: CSRFLab3Omit<ExtArgs> | null
    /**
     * Filter, which CSRFLab3 to fetch.
     */
    where: CSRFLab3WhereUniqueInput
  }

  /**
   * CSRFLab3 findUniqueOrThrow
   */
  export type CSRFLab3FindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CSRFLab3
     */
    select?: CSRFLab3Select<ExtArgs> | null
    /**
     * Omit specific fields from the CSRFLab3
     */
    omit?: CSRFLab3Omit<ExtArgs> | null
    /**
     * Filter, which CSRFLab3 to fetch.
     */
    where: CSRFLab3WhereUniqueInput
  }

  /**
   * CSRFLab3 findFirst
   */
  export type CSRFLab3FindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CSRFLab3
     */
    select?: CSRFLab3Select<ExtArgs> | null
    /**
     * Omit specific fields from the CSRFLab3
     */
    omit?: CSRFLab3Omit<ExtArgs> | null
    /**
     * Filter, which CSRFLab3 to fetch.
     */
    where?: CSRFLab3WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CSRFLab3s to fetch.
     */
    orderBy?: CSRFLab3OrderByWithRelationInput | CSRFLab3OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CSRFLab3s.
     */
    cursor?: CSRFLab3WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CSRFLab3s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CSRFLab3s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CSRFLab3s.
     */
    distinct?: CSRFLab3ScalarFieldEnum | CSRFLab3ScalarFieldEnum[]
  }

  /**
   * CSRFLab3 findFirstOrThrow
   */
  export type CSRFLab3FindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CSRFLab3
     */
    select?: CSRFLab3Select<ExtArgs> | null
    /**
     * Omit specific fields from the CSRFLab3
     */
    omit?: CSRFLab3Omit<ExtArgs> | null
    /**
     * Filter, which CSRFLab3 to fetch.
     */
    where?: CSRFLab3WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CSRFLab3s to fetch.
     */
    orderBy?: CSRFLab3OrderByWithRelationInput | CSRFLab3OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CSRFLab3s.
     */
    cursor?: CSRFLab3WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CSRFLab3s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CSRFLab3s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CSRFLab3s.
     */
    distinct?: CSRFLab3ScalarFieldEnum | CSRFLab3ScalarFieldEnum[]
  }

  /**
   * CSRFLab3 findMany
   */
  export type CSRFLab3FindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CSRFLab3
     */
    select?: CSRFLab3Select<ExtArgs> | null
    /**
     * Omit specific fields from the CSRFLab3
     */
    omit?: CSRFLab3Omit<ExtArgs> | null
    /**
     * Filter, which CSRFLab3s to fetch.
     */
    where?: CSRFLab3WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CSRFLab3s to fetch.
     */
    orderBy?: CSRFLab3OrderByWithRelationInput | CSRFLab3OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CSRFLab3s.
     */
    cursor?: CSRFLab3WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CSRFLab3s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CSRFLab3s.
     */
    skip?: number
    distinct?: CSRFLab3ScalarFieldEnum | CSRFLab3ScalarFieldEnum[]
  }

  /**
   * CSRFLab3 create
   */
  export type CSRFLab3CreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CSRFLab3
     */
    select?: CSRFLab3Select<ExtArgs> | null
    /**
     * Omit specific fields from the CSRFLab3
     */
    omit?: CSRFLab3Omit<ExtArgs> | null
    /**
     * The data needed to create a CSRFLab3.
     */
    data?: XOR<CSRFLab3CreateInput, CSRFLab3UncheckedCreateInput>
  }

  /**
   * CSRFLab3 createMany
   */
  export type CSRFLab3CreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CSRFLab3s.
     */
    data: CSRFLab3CreateManyInput | CSRFLab3CreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CSRFLab3 createManyAndReturn
   */
  export type CSRFLab3CreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CSRFLab3
     */
    select?: CSRFLab3SelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CSRFLab3
     */
    omit?: CSRFLab3Omit<ExtArgs> | null
    /**
     * The data used to create many CSRFLab3s.
     */
    data: CSRFLab3CreateManyInput | CSRFLab3CreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CSRFLab3 update
   */
  export type CSRFLab3UpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CSRFLab3
     */
    select?: CSRFLab3Select<ExtArgs> | null
    /**
     * Omit specific fields from the CSRFLab3
     */
    omit?: CSRFLab3Omit<ExtArgs> | null
    /**
     * The data needed to update a CSRFLab3.
     */
    data: XOR<CSRFLab3UpdateInput, CSRFLab3UncheckedUpdateInput>
    /**
     * Choose, which CSRFLab3 to update.
     */
    where: CSRFLab3WhereUniqueInput
  }

  /**
   * CSRFLab3 updateMany
   */
  export type CSRFLab3UpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CSRFLab3s.
     */
    data: XOR<CSRFLab3UpdateManyMutationInput, CSRFLab3UncheckedUpdateManyInput>
    /**
     * Filter which CSRFLab3s to update
     */
    where?: CSRFLab3WhereInput
    /**
     * Limit how many CSRFLab3s to update.
     */
    limit?: number
  }

  /**
   * CSRFLab3 updateManyAndReturn
   */
  export type CSRFLab3UpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CSRFLab3
     */
    select?: CSRFLab3SelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CSRFLab3
     */
    omit?: CSRFLab3Omit<ExtArgs> | null
    /**
     * The data used to update CSRFLab3s.
     */
    data: XOR<CSRFLab3UpdateManyMutationInput, CSRFLab3UncheckedUpdateManyInput>
    /**
     * Filter which CSRFLab3s to update
     */
    where?: CSRFLab3WhereInput
    /**
     * Limit how many CSRFLab3s to update.
     */
    limit?: number
  }

  /**
   * CSRFLab3 upsert
   */
  export type CSRFLab3UpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CSRFLab3
     */
    select?: CSRFLab3Select<ExtArgs> | null
    /**
     * Omit specific fields from the CSRFLab3
     */
    omit?: CSRFLab3Omit<ExtArgs> | null
    /**
     * The filter to search for the CSRFLab3 to update in case it exists.
     */
    where: CSRFLab3WhereUniqueInput
    /**
     * In case the CSRFLab3 found by the `where` argument doesn't exist, create a new CSRFLab3 with this data.
     */
    create: XOR<CSRFLab3CreateInput, CSRFLab3UncheckedCreateInput>
    /**
     * In case the CSRFLab3 was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CSRFLab3UpdateInput, CSRFLab3UncheckedUpdateInput>
  }

  /**
   * CSRFLab3 delete
   */
  export type CSRFLab3DeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CSRFLab3
     */
    select?: CSRFLab3Select<ExtArgs> | null
    /**
     * Omit specific fields from the CSRFLab3
     */
    omit?: CSRFLab3Omit<ExtArgs> | null
    /**
     * Filter which CSRFLab3 to delete.
     */
    where: CSRFLab3WhereUniqueInput
  }

  /**
   * CSRFLab3 deleteMany
   */
  export type CSRFLab3DeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CSRFLab3s to delete
     */
    where?: CSRFLab3WhereInput
    /**
     * Limit how many CSRFLab3s to delete.
     */
    limit?: number
  }

  /**
   * CSRFLab3 without action
   */
  export type CSRFLab3DefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CSRFLab3
     */
    select?: CSRFLab3Select<ExtArgs> | null
    /**
     * Omit specific fields from the CSRFLab3
     */
    omit?: CSRFLab3Omit<ExtArgs> | null
  }


  /**
   * Model FileInclusionLab1
   */

  export type AggregateFileInclusionLab1 = {
    _count: FileInclusionLab1CountAggregateOutputType | null
    _min: FileInclusionLab1MinAggregateOutputType | null
    _max: FileInclusionLab1MaxAggregateOutputType | null
  }

  export type FileInclusionLab1MinAggregateOutputType = {
    id: string | null
    name: string | null
    path: string | null
  }

  export type FileInclusionLab1MaxAggregateOutputType = {
    id: string | null
    name: string | null
    path: string | null
  }

  export type FileInclusionLab1CountAggregateOutputType = {
    id: number
    name: number
    path: number
    _all: number
  }


  export type FileInclusionLab1MinAggregateInputType = {
    id?: true
    name?: true
    path?: true
  }

  export type FileInclusionLab1MaxAggregateInputType = {
    id?: true
    name?: true
    path?: true
  }

  export type FileInclusionLab1CountAggregateInputType = {
    id?: true
    name?: true
    path?: true
    _all?: true
  }

  export type FileInclusionLab1AggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FileInclusionLab1 to aggregate.
     */
    where?: FileInclusionLab1WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FileInclusionLab1s to fetch.
     */
    orderBy?: FileInclusionLab1OrderByWithRelationInput | FileInclusionLab1OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FileInclusionLab1WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FileInclusionLab1s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FileInclusionLab1s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FileInclusionLab1s
    **/
    _count?: true | FileInclusionLab1CountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FileInclusionLab1MinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FileInclusionLab1MaxAggregateInputType
  }

  export type GetFileInclusionLab1AggregateType<T extends FileInclusionLab1AggregateArgs> = {
        [P in keyof T & keyof AggregateFileInclusionLab1]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFileInclusionLab1[P]>
      : GetScalarType<T[P], AggregateFileInclusionLab1[P]>
  }




  export type FileInclusionLab1GroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FileInclusionLab1WhereInput
    orderBy?: FileInclusionLab1OrderByWithAggregationInput | FileInclusionLab1OrderByWithAggregationInput[]
    by: FileInclusionLab1ScalarFieldEnum[] | FileInclusionLab1ScalarFieldEnum
    having?: FileInclusionLab1ScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FileInclusionLab1CountAggregateInputType | true
    _min?: FileInclusionLab1MinAggregateInputType
    _max?: FileInclusionLab1MaxAggregateInputType
  }

  export type FileInclusionLab1GroupByOutputType = {
    id: string
    name: string
    path: string
    _count: FileInclusionLab1CountAggregateOutputType | null
    _min: FileInclusionLab1MinAggregateOutputType | null
    _max: FileInclusionLab1MaxAggregateOutputType | null
  }

  type GetFileInclusionLab1GroupByPayload<T extends FileInclusionLab1GroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FileInclusionLab1GroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FileInclusionLab1GroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FileInclusionLab1GroupByOutputType[P]>
            : GetScalarType<T[P], FileInclusionLab1GroupByOutputType[P]>
        }
      >
    >


  export type FileInclusionLab1Select<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    path?: boolean
  }, ExtArgs["result"]["fileInclusionLab1"]>

  export type FileInclusionLab1SelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    path?: boolean
  }, ExtArgs["result"]["fileInclusionLab1"]>

  export type FileInclusionLab1SelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    path?: boolean
  }, ExtArgs["result"]["fileInclusionLab1"]>

  export type FileInclusionLab1SelectScalar = {
    id?: boolean
    name?: boolean
    path?: boolean
  }

  export type FileInclusionLab1Omit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "path", ExtArgs["result"]["fileInclusionLab1"]>

  export type $FileInclusionLab1Payload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FileInclusionLab1"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      path: string
    }, ExtArgs["result"]["fileInclusionLab1"]>
    composites: {}
  }

  type FileInclusionLab1GetPayload<S extends boolean | null | undefined | FileInclusionLab1DefaultArgs> = $Result.GetResult<Prisma.$FileInclusionLab1Payload, S>

  type FileInclusionLab1CountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FileInclusionLab1FindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FileInclusionLab1CountAggregateInputType | true
    }

  export interface FileInclusionLab1Delegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FileInclusionLab1'], meta: { name: 'FileInclusionLab1' } }
    /**
     * Find zero or one FileInclusionLab1 that matches the filter.
     * @param {FileInclusionLab1FindUniqueArgs} args - Arguments to find a FileInclusionLab1
     * @example
     * // Get one FileInclusionLab1
     * const fileInclusionLab1 = await prisma.fileInclusionLab1.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FileInclusionLab1FindUniqueArgs>(args: SelectSubset<T, FileInclusionLab1FindUniqueArgs<ExtArgs>>): Prisma__FileInclusionLab1Client<$Result.GetResult<Prisma.$FileInclusionLab1Payload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one FileInclusionLab1 that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FileInclusionLab1FindUniqueOrThrowArgs} args - Arguments to find a FileInclusionLab1
     * @example
     * // Get one FileInclusionLab1
     * const fileInclusionLab1 = await prisma.fileInclusionLab1.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FileInclusionLab1FindUniqueOrThrowArgs>(args: SelectSubset<T, FileInclusionLab1FindUniqueOrThrowArgs<ExtArgs>>): Prisma__FileInclusionLab1Client<$Result.GetResult<Prisma.$FileInclusionLab1Payload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first FileInclusionLab1 that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileInclusionLab1FindFirstArgs} args - Arguments to find a FileInclusionLab1
     * @example
     * // Get one FileInclusionLab1
     * const fileInclusionLab1 = await prisma.fileInclusionLab1.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FileInclusionLab1FindFirstArgs>(args?: SelectSubset<T, FileInclusionLab1FindFirstArgs<ExtArgs>>): Prisma__FileInclusionLab1Client<$Result.GetResult<Prisma.$FileInclusionLab1Payload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first FileInclusionLab1 that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileInclusionLab1FindFirstOrThrowArgs} args - Arguments to find a FileInclusionLab1
     * @example
     * // Get one FileInclusionLab1
     * const fileInclusionLab1 = await prisma.fileInclusionLab1.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FileInclusionLab1FindFirstOrThrowArgs>(args?: SelectSubset<T, FileInclusionLab1FindFirstOrThrowArgs<ExtArgs>>): Prisma__FileInclusionLab1Client<$Result.GetResult<Prisma.$FileInclusionLab1Payload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more FileInclusionLab1s that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileInclusionLab1FindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FileInclusionLab1s
     * const fileInclusionLab1s = await prisma.fileInclusionLab1.findMany()
     * 
     * // Get first 10 FileInclusionLab1s
     * const fileInclusionLab1s = await prisma.fileInclusionLab1.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fileInclusionLab1WithIdOnly = await prisma.fileInclusionLab1.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FileInclusionLab1FindManyArgs>(args?: SelectSubset<T, FileInclusionLab1FindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FileInclusionLab1Payload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a FileInclusionLab1.
     * @param {FileInclusionLab1CreateArgs} args - Arguments to create a FileInclusionLab1.
     * @example
     * // Create one FileInclusionLab1
     * const FileInclusionLab1 = await prisma.fileInclusionLab1.create({
     *   data: {
     *     // ... data to create a FileInclusionLab1
     *   }
     * })
     * 
     */
    create<T extends FileInclusionLab1CreateArgs>(args: SelectSubset<T, FileInclusionLab1CreateArgs<ExtArgs>>): Prisma__FileInclusionLab1Client<$Result.GetResult<Prisma.$FileInclusionLab1Payload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many FileInclusionLab1s.
     * @param {FileInclusionLab1CreateManyArgs} args - Arguments to create many FileInclusionLab1s.
     * @example
     * // Create many FileInclusionLab1s
     * const fileInclusionLab1 = await prisma.fileInclusionLab1.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FileInclusionLab1CreateManyArgs>(args?: SelectSubset<T, FileInclusionLab1CreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FileInclusionLab1s and returns the data saved in the database.
     * @param {FileInclusionLab1CreateManyAndReturnArgs} args - Arguments to create many FileInclusionLab1s.
     * @example
     * // Create many FileInclusionLab1s
     * const fileInclusionLab1 = await prisma.fileInclusionLab1.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FileInclusionLab1s and only return the `id`
     * const fileInclusionLab1WithIdOnly = await prisma.fileInclusionLab1.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FileInclusionLab1CreateManyAndReturnArgs>(args?: SelectSubset<T, FileInclusionLab1CreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FileInclusionLab1Payload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a FileInclusionLab1.
     * @param {FileInclusionLab1DeleteArgs} args - Arguments to delete one FileInclusionLab1.
     * @example
     * // Delete one FileInclusionLab1
     * const FileInclusionLab1 = await prisma.fileInclusionLab1.delete({
     *   where: {
     *     // ... filter to delete one FileInclusionLab1
     *   }
     * })
     * 
     */
    delete<T extends FileInclusionLab1DeleteArgs>(args: SelectSubset<T, FileInclusionLab1DeleteArgs<ExtArgs>>): Prisma__FileInclusionLab1Client<$Result.GetResult<Prisma.$FileInclusionLab1Payload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one FileInclusionLab1.
     * @param {FileInclusionLab1UpdateArgs} args - Arguments to update one FileInclusionLab1.
     * @example
     * // Update one FileInclusionLab1
     * const fileInclusionLab1 = await prisma.fileInclusionLab1.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FileInclusionLab1UpdateArgs>(args: SelectSubset<T, FileInclusionLab1UpdateArgs<ExtArgs>>): Prisma__FileInclusionLab1Client<$Result.GetResult<Prisma.$FileInclusionLab1Payload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more FileInclusionLab1s.
     * @param {FileInclusionLab1DeleteManyArgs} args - Arguments to filter FileInclusionLab1s to delete.
     * @example
     * // Delete a few FileInclusionLab1s
     * const { count } = await prisma.fileInclusionLab1.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FileInclusionLab1DeleteManyArgs>(args?: SelectSubset<T, FileInclusionLab1DeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FileInclusionLab1s.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileInclusionLab1UpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FileInclusionLab1s
     * const fileInclusionLab1 = await prisma.fileInclusionLab1.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FileInclusionLab1UpdateManyArgs>(args: SelectSubset<T, FileInclusionLab1UpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FileInclusionLab1s and returns the data updated in the database.
     * @param {FileInclusionLab1UpdateManyAndReturnArgs} args - Arguments to update many FileInclusionLab1s.
     * @example
     * // Update many FileInclusionLab1s
     * const fileInclusionLab1 = await prisma.fileInclusionLab1.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FileInclusionLab1s and only return the `id`
     * const fileInclusionLab1WithIdOnly = await prisma.fileInclusionLab1.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FileInclusionLab1UpdateManyAndReturnArgs>(args: SelectSubset<T, FileInclusionLab1UpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FileInclusionLab1Payload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one FileInclusionLab1.
     * @param {FileInclusionLab1UpsertArgs} args - Arguments to update or create a FileInclusionLab1.
     * @example
     * // Update or create a FileInclusionLab1
     * const fileInclusionLab1 = await prisma.fileInclusionLab1.upsert({
     *   create: {
     *     // ... data to create a FileInclusionLab1
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FileInclusionLab1 we want to update
     *   }
     * })
     */
    upsert<T extends FileInclusionLab1UpsertArgs>(args: SelectSubset<T, FileInclusionLab1UpsertArgs<ExtArgs>>): Prisma__FileInclusionLab1Client<$Result.GetResult<Prisma.$FileInclusionLab1Payload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of FileInclusionLab1s.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileInclusionLab1CountArgs} args - Arguments to filter FileInclusionLab1s to count.
     * @example
     * // Count the number of FileInclusionLab1s
     * const count = await prisma.fileInclusionLab1.count({
     *   where: {
     *     // ... the filter for the FileInclusionLab1s we want to count
     *   }
     * })
    **/
    count<T extends FileInclusionLab1CountArgs>(
      args?: Subset<T, FileInclusionLab1CountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FileInclusionLab1CountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FileInclusionLab1.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileInclusionLab1AggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FileInclusionLab1AggregateArgs>(args: Subset<T, FileInclusionLab1AggregateArgs>): Prisma.PrismaPromise<GetFileInclusionLab1AggregateType<T>>

    /**
     * Group by FileInclusionLab1.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileInclusionLab1GroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FileInclusionLab1GroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FileInclusionLab1GroupByArgs['orderBy'] }
        : { orderBy?: FileInclusionLab1GroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FileInclusionLab1GroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFileInclusionLab1GroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FileInclusionLab1 model
   */
  readonly fields: FileInclusionLab1FieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FileInclusionLab1.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FileInclusionLab1Client<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FileInclusionLab1 model
   */ 
  interface FileInclusionLab1FieldRefs {
    readonly id: FieldRef<"FileInclusionLab1", 'String'>
    readonly name: FieldRef<"FileInclusionLab1", 'String'>
    readonly path: FieldRef<"FileInclusionLab1", 'String'>
  }
    

  // Custom InputTypes
  /**
   * FileInclusionLab1 findUnique
   */
  export type FileInclusionLab1FindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileInclusionLab1
     */
    select?: FileInclusionLab1Select<ExtArgs> | null
    /**
     * Omit specific fields from the FileInclusionLab1
     */
    omit?: FileInclusionLab1Omit<ExtArgs> | null
    /**
     * Filter, which FileInclusionLab1 to fetch.
     */
    where: FileInclusionLab1WhereUniqueInput
  }

  /**
   * FileInclusionLab1 findUniqueOrThrow
   */
  export type FileInclusionLab1FindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileInclusionLab1
     */
    select?: FileInclusionLab1Select<ExtArgs> | null
    /**
     * Omit specific fields from the FileInclusionLab1
     */
    omit?: FileInclusionLab1Omit<ExtArgs> | null
    /**
     * Filter, which FileInclusionLab1 to fetch.
     */
    where: FileInclusionLab1WhereUniqueInput
  }

  /**
   * FileInclusionLab1 findFirst
   */
  export type FileInclusionLab1FindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileInclusionLab1
     */
    select?: FileInclusionLab1Select<ExtArgs> | null
    /**
     * Omit specific fields from the FileInclusionLab1
     */
    omit?: FileInclusionLab1Omit<ExtArgs> | null
    /**
     * Filter, which FileInclusionLab1 to fetch.
     */
    where?: FileInclusionLab1WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FileInclusionLab1s to fetch.
     */
    orderBy?: FileInclusionLab1OrderByWithRelationInput | FileInclusionLab1OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FileInclusionLab1s.
     */
    cursor?: FileInclusionLab1WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FileInclusionLab1s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FileInclusionLab1s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FileInclusionLab1s.
     */
    distinct?: FileInclusionLab1ScalarFieldEnum | FileInclusionLab1ScalarFieldEnum[]
  }

  /**
   * FileInclusionLab1 findFirstOrThrow
   */
  export type FileInclusionLab1FindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileInclusionLab1
     */
    select?: FileInclusionLab1Select<ExtArgs> | null
    /**
     * Omit specific fields from the FileInclusionLab1
     */
    omit?: FileInclusionLab1Omit<ExtArgs> | null
    /**
     * Filter, which FileInclusionLab1 to fetch.
     */
    where?: FileInclusionLab1WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FileInclusionLab1s to fetch.
     */
    orderBy?: FileInclusionLab1OrderByWithRelationInput | FileInclusionLab1OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FileInclusionLab1s.
     */
    cursor?: FileInclusionLab1WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FileInclusionLab1s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FileInclusionLab1s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FileInclusionLab1s.
     */
    distinct?: FileInclusionLab1ScalarFieldEnum | FileInclusionLab1ScalarFieldEnum[]
  }

  /**
   * FileInclusionLab1 findMany
   */
  export type FileInclusionLab1FindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileInclusionLab1
     */
    select?: FileInclusionLab1Select<ExtArgs> | null
    /**
     * Omit specific fields from the FileInclusionLab1
     */
    omit?: FileInclusionLab1Omit<ExtArgs> | null
    /**
     * Filter, which FileInclusionLab1s to fetch.
     */
    where?: FileInclusionLab1WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FileInclusionLab1s to fetch.
     */
    orderBy?: FileInclusionLab1OrderByWithRelationInput | FileInclusionLab1OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FileInclusionLab1s.
     */
    cursor?: FileInclusionLab1WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FileInclusionLab1s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FileInclusionLab1s.
     */
    skip?: number
    distinct?: FileInclusionLab1ScalarFieldEnum | FileInclusionLab1ScalarFieldEnum[]
  }

  /**
   * FileInclusionLab1 create
   */
  export type FileInclusionLab1CreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileInclusionLab1
     */
    select?: FileInclusionLab1Select<ExtArgs> | null
    /**
     * Omit specific fields from the FileInclusionLab1
     */
    omit?: FileInclusionLab1Omit<ExtArgs> | null
    /**
     * The data needed to create a FileInclusionLab1.
     */
    data: XOR<FileInclusionLab1CreateInput, FileInclusionLab1UncheckedCreateInput>
  }

  /**
   * FileInclusionLab1 createMany
   */
  export type FileInclusionLab1CreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FileInclusionLab1s.
     */
    data: FileInclusionLab1CreateManyInput | FileInclusionLab1CreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FileInclusionLab1 createManyAndReturn
   */
  export type FileInclusionLab1CreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileInclusionLab1
     */
    select?: FileInclusionLab1SelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FileInclusionLab1
     */
    omit?: FileInclusionLab1Omit<ExtArgs> | null
    /**
     * The data used to create many FileInclusionLab1s.
     */
    data: FileInclusionLab1CreateManyInput | FileInclusionLab1CreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FileInclusionLab1 update
   */
  export type FileInclusionLab1UpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileInclusionLab1
     */
    select?: FileInclusionLab1Select<ExtArgs> | null
    /**
     * Omit specific fields from the FileInclusionLab1
     */
    omit?: FileInclusionLab1Omit<ExtArgs> | null
    /**
     * The data needed to update a FileInclusionLab1.
     */
    data: XOR<FileInclusionLab1UpdateInput, FileInclusionLab1UncheckedUpdateInput>
    /**
     * Choose, which FileInclusionLab1 to update.
     */
    where: FileInclusionLab1WhereUniqueInput
  }

  /**
   * FileInclusionLab1 updateMany
   */
  export type FileInclusionLab1UpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FileInclusionLab1s.
     */
    data: XOR<FileInclusionLab1UpdateManyMutationInput, FileInclusionLab1UncheckedUpdateManyInput>
    /**
     * Filter which FileInclusionLab1s to update
     */
    where?: FileInclusionLab1WhereInput
    /**
     * Limit how many FileInclusionLab1s to update.
     */
    limit?: number
  }

  /**
   * FileInclusionLab1 updateManyAndReturn
   */
  export type FileInclusionLab1UpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileInclusionLab1
     */
    select?: FileInclusionLab1SelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FileInclusionLab1
     */
    omit?: FileInclusionLab1Omit<ExtArgs> | null
    /**
     * The data used to update FileInclusionLab1s.
     */
    data: XOR<FileInclusionLab1UpdateManyMutationInput, FileInclusionLab1UncheckedUpdateManyInput>
    /**
     * Filter which FileInclusionLab1s to update
     */
    where?: FileInclusionLab1WhereInput
    /**
     * Limit how many FileInclusionLab1s to update.
     */
    limit?: number
  }

  /**
   * FileInclusionLab1 upsert
   */
  export type FileInclusionLab1UpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileInclusionLab1
     */
    select?: FileInclusionLab1Select<ExtArgs> | null
    /**
     * Omit specific fields from the FileInclusionLab1
     */
    omit?: FileInclusionLab1Omit<ExtArgs> | null
    /**
     * The filter to search for the FileInclusionLab1 to update in case it exists.
     */
    where: FileInclusionLab1WhereUniqueInput
    /**
     * In case the FileInclusionLab1 found by the `where` argument doesn't exist, create a new FileInclusionLab1 with this data.
     */
    create: XOR<FileInclusionLab1CreateInput, FileInclusionLab1UncheckedCreateInput>
    /**
     * In case the FileInclusionLab1 was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FileInclusionLab1UpdateInput, FileInclusionLab1UncheckedUpdateInput>
  }

  /**
   * FileInclusionLab1 delete
   */
  export type FileInclusionLab1DeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileInclusionLab1
     */
    select?: FileInclusionLab1Select<ExtArgs> | null
    /**
     * Omit specific fields from the FileInclusionLab1
     */
    omit?: FileInclusionLab1Omit<ExtArgs> | null
    /**
     * Filter which FileInclusionLab1 to delete.
     */
    where: FileInclusionLab1WhereUniqueInput
  }

  /**
   * FileInclusionLab1 deleteMany
   */
  export type FileInclusionLab1DeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FileInclusionLab1s to delete
     */
    where?: FileInclusionLab1WhereInput
    /**
     * Limit how many FileInclusionLab1s to delete.
     */
    limit?: number
  }

  /**
   * FileInclusionLab1 without action
   */
  export type FileInclusionLab1DefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileInclusionLab1
     */
    select?: FileInclusionLab1Select<ExtArgs> | null
    /**
     * Omit specific fields from the FileInclusionLab1
     */
    omit?: FileInclusionLab1Omit<ExtArgs> | null
  }


  /**
   * Model CartItem
   */

  export type AggregateCartItem = {
    _count: CartItemCountAggregateOutputType | null
    _avg: CartItemAvgAggregateOutputType | null
    _sum: CartItemSumAggregateOutputType | null
    _min: CartItemMinAggregateOutputType | null
    _max: CartItemMaxAggregateOutputType | null
  }

  export type CartItemAvgAggregateOutputType = {
    id: number | null
    price: number | null
  }

  export type CartItemSumAggregateOutputType = {
    id: number | null
    price: number | null
  }

  export type CartItemMinAggregateOutputType = {
    id: number | null
    name: string | null
    price: number | null
  }

  export type CartItemMaxAggregateOutputType = {
    id: number | null
    name: string | null
    price: number | null
  }

  export type CartItemCountAggregateOutputType = {
    id: number
    name: number
    price: number
    _all: number
  }


  export type CartItemAvgAggregateInputType = {
    id?: true
    price?: true
  }

  export type CartItemSumAggregateInputType = {
    id?: true
    price?: true
  }

  export type CartItemMinAggregateInputType = {
    id?: true
    name?: true
    price?: true
  }

  export type CartItemMaxAggregateInputType = {
    id?: true
    name?: true
    price?: true
  }

  export type CartItemCountAggregateInputType = {
    id?: true
    name?: true
    price?: true
    _all?: true
  }

  export type CartItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CartItem to aggregate.
     */
    where?: CartItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CartItems to fetch.
     */
    orderBy?: CartItemOrderByWithRelationInput | CartItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CartItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CartItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CartItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CartItems
    **/
    _count?: true | CartItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CartItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CartItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CartItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CartItemMaxAggregateInputType
  }

  export type GetCartItemAggregateType<T extends CartItemAggregateArgs> = {
        [P in keyof T & keyof AggregateCartItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCartItem[P]>
      : GetScalarType<T[P], AggregateCartItem[P]>
  }




  export type CartItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CartItemWhereInput
    orderBy?: CartItemOrderByWithAggregationInput | CartItemOrderByWithAggregationInput[]
    by: CartItemScalarFieldEnum[] | CartItemScalarFieldEnum
    having?: CartItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CartItemCountAggregateInputType | true
    _avg?: CartItemAvgAggregateInputType
    _sum?: CartItemSumAggregateInputType
    _min?: CartItemMinAggregateInputType
    _max?: CartItemMaxAggregateInputType
  }

  export type CartItemGroupByOutputType = {
    id: number
    name: string
    price: number
    _count: CartItemCountAggregateOutputType | null
    _avg: CartItemAvgAggregateOutputType | null
    _sum: CartItemSumAggregateOutputType | null
    _min: CartItemMinAggregateOutputType | null
    _max: CartItemMaxAggregateOutputType | null
  }

  type GetCartItemGroupByPayload<T extends CartItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CartItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CartItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CartItemGroupByOutputType[P]>
            : GetScalarType<T[P], CartItemGroupByOutputType[P]>
        }
      >
    >


  export type CartItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    price?: boolean
  }, ExtArgs["result"]["cartItem"]>

  export type CartItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    price?: boolean
  }, ExtArgs["result"]["cartItem"]>

  export type CartItemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    price?: boolean
  }, ExtArgs["result"]["cartItem"]>

  export type CartItemSelectScalar = {
    id?: boolean
    name?: boolean
    price?: boolean
  }

  export type CartItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "price", ExtArgs["result"]["cartItem"]>

  export type $CartItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CartItem"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      price: number
    }, ExtArgs["result"]["cartItem"]>
    composites: {}
  }

  type CartItemGetPayload<S extends boolean | null | undefined | CartItemDefaultArgs> = $Result.GetResult<Prisma.$CartItemPayload, S>

  type CartItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CartItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CartItemCountAggregateInputType | true
    }

  export interface CartItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CartItem'], meta: { name: 'CartItem' } }
    /**
     * Find zero or one CartItem that matches the filter.
     * @param {CartItemFindUniqueArgs} args - Arguments to find a CartItem
     * @example
     * // Get one CartItem
     * const cartItem = await prisma.cartItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CartItemFindUniqueArgs>(args: SelectSubset<T, CartItemFindUniqueArgs<ExtArgs>>): Prisma__CartItemClient<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one CartItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CartItemFindUniqueOrThrowArgs} args - Arguments to find a CartItem
     * @example
     * // Get one CartItem
     * const cartItem = await prisma.cartItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CartItemFindUniqueOrThrowArgs>(args: SelectSubset<T, CartItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CartItemClient<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first CartItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartItemFindFirstArgs} args - Arguments to find a CartItem
     * @example
     * // Get one CartItem
     * const cartItem = await prisma.cartItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CartItemFindFirstArgs>(args?: SelectSubset<T, CartItemFindFirstArgs<ExtArgs>>): Prisma__CartItemClient<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first CartItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartItemFindFirstOrThrowArgs} args - Arguments to find a CartItem
     * @example
     * // Get one CartItem
     * const cartItem = await prisma.cartItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CartItemFindFirstOrThrowArgs>(args?: SelectSubset<T, CartItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__CartItemClient<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more CartItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CartItems
     * const cartItems = await prisma.cartItem.findMany()
     * 
     * // Get first 10 CartItems
     * const cartItems = await prisma.cartItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cartItemWithIdOnly = await prisma.cartItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CartItemFindManyArgs>(args?: SelectSubset<T, CartItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a CartItem.
     * @param {CartItemCreateArgs} args - Arguments to create a CartItem.
     * @example
     * // Create one CartItem
     * const CartItem = await prisma.cartItem.create({
     *   data: {
     *     // ... data to create a CartItem
     *   }
     * })
     * 
     */
    create<T extends CartItemCreateArgs>(args: SelectSubset<T, CartItemCreateArgs<ExtArgs>>): Prisma__CartItemClient<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many CartItems.
     * @param {CartItemCreateManyArgs} args - Arguments to create many CartItems.
     * @example
     * // Create many CartItems
     * const cartItem = await prisma.cartItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CartItemCreateManyArgs>(args?: SelectSubset<T, CartItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CartItems and returns the data saved in the database.
     * @param {CartItemCreateManyAndReturnArgs} args - Arguments to create many CartItems.
     * @example
     * // Create many CartItems
     * const cartItem = await prisma.cartItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CartItems and only return the `id`
     * const cartItemWithIdOnly = await prisma.cartItem.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CartItemCreateManyAndReturnArgs>(args?: SelectSubset<T, CartItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a CartItem.
     * @param {CartItemDeleteArgs} args - Arguments to delete one CartItem.
     * @example
     * // Delete one CartItem
     * const CartItem = await prisma.cartItem.delete({
     *   where: {
     *     // ... filter to delete one CartItem
     *   }
     * })
     * 
     */
    delete<T extends CartItemDeleteArgs>(args: SelectSubset<T, CartItemDeleteArgs<ExtArgs>>): Prisma__CartItemClient<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one CartItem.
     * @param {CartItemUpdateArgs} args - Arguments to update one CartItem.
     * @example
     * // Update one CartItem
     * const cartItem = await prisma.cartItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CartItemUpdateArgs>(args: SelectSubset<T, CartItemUpdateArgs<ExtArgs>>): Prisma__CartItemClient<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more CartItems.
     * @param {CartItemDeleteManyArgs} args - Arguments to filter CartItems to delete.
     * @example
     * // Delete a few CartItems
     * const { count } = await prisma.cartItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CartItemDeleteManyArgs>(args?: SelectSubset<T, CartItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CartItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CartItems
     * const cartItem = await prisma.cartItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CartItemUpdateManyArgs>(args: SelectSubset<T, CartItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CartItems and returns the data updated in the database.
     * @param {CartItemUpdateManyAndReturnArgs} args - Arguments to update many CartItems.
     * @example
     * // Update many CartItems
     * const cartItem = await prisma.cartItem.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CartItems and only return the `id`
     * const cartItemWithIdOnly = await prisma.cartItem.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CartItemUpdateManyAndReturnArgs>(args: SelectSubset<T, CartItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one CartItem.
     * @param {CartItemUpsertArgs} args - Arguments to update or create a CartItem.
     * @example
     * // Update or create a CartItem
     * const cartItem = await prisma.cartItem.upsert({
     *   create: {
     *     // ... data to create a CartItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CartItem we want to update
     *   }
     * })
     */
    upsert<T extends CartItemUpsertArgs>(args: SelectSubset<T, CartItemUpsertArgs<ExtArgs>>): Prisma__CartItemClient<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of CartItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartItemCountArgs} args - Arguments to filter CartItems to count.
     * @example
     * // Count the number of CartItems
     * const count = await prisma.cartItem.count({
     *   where: {
     *     // ... the filter for the CartItems we want to count
     *   }
     * })
    **/
    count<T extends CartItemCountArgs>(
      args?: Subset<T, CartItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CartItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CartItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CartItemAggregateArgs>(args: Subset<T, CartItemAggregateArgs>): Prisma.PrismaPromise<GetCartItemAggregateType<T>>

    /**
     * Group by CartItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CartItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CartItemGroupByArgs['orderBy'] }
        : { orderBy?: CartItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CartItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCartItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CartItem model
   */
  readonly fields: CartItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CartItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CartItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CartItem model
   */ 
  interface CartItemFieldRefs {
    readonly id: FieldRef<"CartItem", 'Int'>
    readonly name: FieldRef<"CartItem", 'String'>
    readonly price: FieldRef<"CartItem", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * CartItem findUnique
   */
  export type CartItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartItem
     */
    omit?: CartItemOmit<ExtArgs> | null
    /**
     * Filter, which CartItem to fetch.
     */
    where: CartItemWhereUniqueInput
  }

  /**
   * CartItem findUniqueOrThrow
   */
  export type CartItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartItem
     */
    omit?: CartItemOmit<ExtArgs> | null
    /**
     * Filter, which CartItem to fetch.
     */
    where: CartItemWhereUniqueInput
  }

  /**
   * CartItem findFirst
   */
  export type CartItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartItem
     */
    omit?: CartItemOmit<ExtArgs> | null
    /**
     * Filter, which CartItem to fetch.
     */
    where?: CartItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CartItems to fetch.
     */
    orderBy?: CartItemOrderByWithRelationInput | CartItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CartItems.
     */
    cursor?: CartItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CartItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CartItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CartItems.
     */
    distinct?: CartItemScalarFieldEnum | CartItemScalarFieldEnum[]
  }

  /**
   * CartItem findFirstOrThrow
   */
  export type CartItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartItem
     */
    omit?: CartItemOmit<ExtArgs> | null
    /**
     * Filter, which CartItem to fetch.
     */
    where?: CartItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CartItems to fetch.
     */
    orderBy?: CartItemOrderByWithRelationInput | CartItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CartItems.
     */
    cursor?: CartItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CartItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CartItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CartItems.
     */
    distinct?: CartItemScalarFieldEnum | CartItemScalarFieldEnum[]
  }

  /**
   * CartItem findMany
   */
  export type CartItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartItem
     */
    omit?: CartItemOmit<ExtArgs> | null
    /**
     * Filter, which CartItems to fetch.
     */
    where?: CartItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CartItems to fetch.
     */
    orderBy?: CartItemOrderByWithRelationInput | CartItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CartItems.
     */
    cursor?: CartItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CartItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CartItems.
     */
    skip?: number
    distinct?: CartItemScalarFieldEnum | CartItemScalarFieldEnum[]
  }

  /**
   * CartItem create
   */
  export type CartItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartItem
     */
    omit?: CartItemOmit<ExtArgs> | null
    /**
     * The data needed to create a CartItem.
     */
    data: XOR<CartItemCreateInput, CartItemUncheckedCreateInput>
  }

  /**
   * CartItem createMany
   */
  export type CartItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CartItems.
     */
    data: CartItemCreateManyInput | CartItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CartItem createManyAndReturn
   */
  export type CartItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CartItem
     */
    omit?: CartItemOmit<ExtArgs> | null
    /**
     * The data used to create many CartItems.
     */
    data: CartItemCreateManyInput | CartItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CartItem update
   */
  export type CartItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartItem
     */
    omit?: CartItemOmit<ExtArgs> | null
    /**
     * The data needed to update a CartItem.
     */
    data: XOR<CartItemUpdateInput, CartItemUncheckedUpdateInput>
    /**
     * Choose, which CartItem to update.
     */
    where: CartItemWhereUniqueInput
  }

  /**
   * CartItem updateMany
   */
  export type CartItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CartItems.
     */
    data: XOR<CartItemUpdateManyMutationInput, CartItemUncheckedUpdateManyInput>
    /**
     * Filter which CartItems to update
     */
    where?: CartItemWhereInput
    /**
     * Limit how many CartItems to update.
     */
    limit?: number
  }

  /**
   * CartItem updateManyAndReturn
   */
  export type CartItemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CartItem
     */
    omit?: CartItemOmit<ExtArgs> | null
    /**
     * The data used to update CartItems.
     */
    data: XOR<CartItemUpdateManyMutationInput, CartItemUncheckedUpdateManyInput>
    /**
     * Filter which CartItems to update
     */
    where?: CartItemWhereInput
    /**
     * Limit how many CartItems to update.
     */
    limit?: number
  }

  /**
   * CartItem upsert
   */
  export type CartItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartItem
     */
    omit?: CartItemOmit<ExtArgs> | null
    /**
     * The filter to search for the CartItem to update in case it exists.
     */
    where: CartItemWhereUniqueInput
    /**
     * In case the CartItem found by the `where` argument doesn't exist, create a new CartItem with this data.
     */
    create: XOR<CartItemCreateInput, CartItemUncheckedCreateInput>
    /**
     * In case the CartItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CartItemUpdateInput, CartItemUncheckedUpdateInput>
  }

  /**
   * CartItem delete
   */
  export type CartItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartItem
     */
    omit?: CartItemOmit<ExtArgs> | null
    /**
     * Filter which CartItem to delete.
     */
    where: CartItemWhereUniqueInput
  }

  /**
   * CartItem deleteMany
   */
  export type CartItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CartItems to delete
     */
    where?: CartItemWhereInput
    /**
     * Limit how many CartItems to delete.
     */
    limit?: number
  }

  /**
   * CartItem without action
   */
  export type CartItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartItem
     */
    omit?: CartItemOmit<ExtArgs> | null
  }


  /**
   * Model BurPSuiteLab3
   */

  export type AggregateBurPSuiteLab3 = {
    _count: BurPSuiteLab3CountAggregateOutputType | null
    _min: BurPSuiteLab3MinAggregateOutputType | null
    _max: BurPSuiteLab3MaxAggregateOutputType | null
  }

  export type BurPSuiteLab3MinAggregateOutputType = {
    id: string | null
    name: string | null
    path: string | null
    description: string | null
  }

  export type BurPSuiteLab3MaxAggregateOutputType = {
    id: string | null
    name: string | null
    path: string | null
    description: string | null
  }

  export type BurPSuiteLab3CountAggregateOutputType = {
    id: number
    name: number
    path: number
    description: number
    _all: number
  }


  export type BurPSuiteLab3MinAggregateInputType = {
    id?: true
    name?: true
    path?: true
    description?: true
  }

  export type BurPSuiteLab3MaxAggregateInputType = {
    id?: true
    name?: true
    path?: true
    description?: true
  }

  export type BurPSuiteLab3CountAggregateInputType = {
    id?: true
    name?: true
    path?: true
    description?: true
    _all?: true
  }

  export type BurPSuiteLab3AggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BurPSuiteLab3 to aggregate.
     */
    where?: BurPSuiteLab3WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BurPSuiteLab3s to fetch.
     */
    orderBy?: BurPSuiteLab3OrderByWithRelationInput | BurPSuiteLab3OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BurPSuiteLab3WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BurPSuiteLab3s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BurPSuiteLab3s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BurPSuiteLab3s
    **/
    _count?: true | BurPSuiteLab3CountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BurPSuiteLab3MinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BurPSuiteLab3MaxAggregateInputType
  }

  export type GetBurPSuiteLab3AggregateType<T extends BurPSuiteLab3AggregateArgs> = {
        [P in keyof T & keyof AggregateBurPSuiteLab3]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBurPSuiteLab3[P]>
      : GetScalarType<T[P], AggregateBurPSuiteLab3[P]>
  }




  export type BurPSuiteLab3GroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BurPSuiteLab3WhereInput
    orderBy?: BurPSuiteLab3OrderByWithAggregationInput | BurPSuiteLab3OrderByWithAggregationInput[]
    by: BurPSuiteLab3ScalarFieldEnum[] | BurPSuiteLab3ScalarFieldEnum
    having?: BurPSuiteLab3ScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BurPSuiteLab3CountAggregateInputType | true
    _min?: BurPSuiteLab3MinAggregateInputType
    _max?: BurPSuiteLab3MaxAggregateInputType
  }

  export type BurPSuiteLab3GroupByOutputType = {
    id: string
    name: string | null
    path: string | null
    description: string | null
    _count: BurPSuiteLab3CountAggregateOutputType | null
    _min: BurPSuiteLab3MinAggregateOutputType | null
    _max: BurPSuiteLab3MaxAggregateOutputType | null
  }

  type GetBurPSuiteLab3GroupByPayload<T extends BurPSuiteLab3GroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BurPSuiteLab3GroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BurPSuiteLab3GroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BurPSuiteLab3GroupByOutputType[P]>
            : GetScalarType<T[P], BurPSuiteLab3GroupByOutputType[P]>
        }
      >
    >


  export type BurPSuiteLab3Select<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    path?: boolean
    description?: boolean
  }, ExtArgs["result"]["burPSuiteLab3"]>

  export type BurPSuiteLab3SelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    path?: boolean
    description?: boolean
  }, ExtArgs["result"]["burPSuiteLab3"]>

  export type BurPSuiteLab3SelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    path?: boolean
    description?: boolean
  }, ExtArgs["result"]["burPSuiteLab3"]>

  export type BurPSuiteLab3SelectScalar = {
    id?: boolean
    name?: boolean
    path?: boolean
    description?: boolean
  }

  export type BurPSuiteLab3Omit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "path" | "description", ExtArgs["result"]["burPSuiteLab3"]>

  export type $BurPSuiteLab3Payload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BurPSuiteLab3"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string | null
      path: string | null
      description: string | null
    }, ExtArgs["result"]["burPSuiteLab3"]>
    composites: {}
  }

  type BurPSuiteLab3GetPayload<S extends boolean | null | undefined | BurPSuiteLab3DefaultArgs> = $Result.GetResult<Prisma.$BurPSuiteLab3Payload, S>

  type BurPSuiteLab3CountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BurPSuiteLab3FindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BurPSuiteLab3CountAggregateInputType | true
    }

  export interface BurPSuiteLab3Delegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BurPSuiteLab3'], meta: { name: 'BurPSuiteLab3' } }
    /**
     * Find zero or one BurPSuiteLab3 that matches the filter.
     * @param {BurPSuiteLab3FindUniqueArgs} args - Arguments to find a BurPSuiteLab3
     * @example
     * // Get one BurPSuiteLab3
     * const burPSuiteLab3 = await prisma.burPSuiteLab3.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BurPSuiteLab3FindUniqueArgs>(args: SelectSubset<T, BurPSuiteLab3FindUniqueArgs<ExtArgs>>): Prisma__BurPSuiteLab3Client<$Result.GetResult<Prisma.$BurPSuiteLab3Payload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one BurPSuiteLab3 that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BurPSuiteLab3FindUniqueOrThrowArgs} args - Arguments to find a BurPSuiteLab3
     * @example
     * // Get one BurPSuiteLab3
     * const burPSuiteLab3 = await prisma.burPSuiteLab3.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BurPSuiteLab3FindUniqueOrThrowArgs>(args: SelectSubset<T, BurPSuiteLab3FindUniqueOrThrowArgs<ExtArgs>>): Prisma__BurPSuiteLab3Client<$Result.GetResult<Prisma.$BurPSuiteLab3Payload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first BurPSuiteLab3 that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BurPSuiteLab3FindFirstArgs} args - Arguments to find a BurPSuiteLab3
     * @example
     * // Get one BurPSuiteLab3
     * const burPSuiteLab3 = await prisma.burPSuiteLab3.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BurPSuiteLab3FindFirstArgs>(args?: SelectSubset<T, BurPSuiteLab3FindFirstArgs<ExtArgs>>): Prisma__BurPSuiteLab3Client<$Result.GetResult<Prisma.$BurPSuiteLab3Payload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first BurPSuiteLab3 that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BurPSuiteLab3FindFirstOrThrowArgs} args - Arguments to find a BurPSuiteLab3
     * @example
     * // Get one BurPSuiteLab3
     * const burPSuiteLab3 = await prisma.burPSuiteLab3.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BurPSuiteLab3FindFirstOrThrowArgs>(args?: SelectSubset<T, BurPSuiteLab3FindFirstOrThrowArgs<ExtArgs>>): Prisma__BurPSuiteLab3Client<$Result.GetResult<Prisma.$BurPSuiteLab3Payload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more BurPSuiteLab3s that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BurPSuiteLab3FindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BurPSuiteLab3s
     * const burPSuiteLab3s = await prisma.burPSuiteLab3.findMany()
     * 
     * // Get first 10 BurPSuiteLab3s
     * const burPSuiteLab3s = await prisma.burPSuiteLab3.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const burPSuiteLab3WithIdOnly = await prisma.burPSuiteLab3.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BurPSuiteLab3FindManyArgs>(args?: SelectSubset<T, BurPSuiteLab3FindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BurPSuiteLab3Payload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a BurPSuiteLab3.
     * @param {BurPSuiteLab3CreateArgs} args - Arguments to create a BurPSuiteLab3.
     * @example
     * // Create one BurPSuiteLab3
     * const BurPSuiteLab3 = await prisma.burPSuiteLab3.create({
     *   data: {
     *     // ... data to create a BurPSuiteLab3
     *   }
     * })
     * 
     */
    create<T extends BurPSuiteLab3CreateArgs>(args: SelectSubset<T, BurPSuiteLab3CreateArgs<ExtArgs>>): Prisma__BurPSuiteLab3Client<$Result.GetResult<Prisma.$BurPSuiteLab3Payload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many BurPSuiteLab3s.
     * @param {BurPSuiteLab3CreateManyArgs} args - Arguments to create many BurPSuiteLab3s.
     * @example
     * // Create many BurPSuiteLab3s
     * const burPSuiteLab3 = await prisma.burPSuiteLab3.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BurPSuiteLab3CreateManyArgs>(args?: SelectSubset<T, BurPSuiteLab3CreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BurPSuiteLab3s and returns the data saved in the database.
     * @param {BurPSuiteLab3CreateManyAndReturnArgs} args - Arguments to create many BurPSuiteLab3s.
     * @example
     * // Create many BurPSuiteLab3s
     * const burPSuiteLab3 = await prisma.burPSuiteLab3.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BurPSuiteLab3s and only return the `id`
     * const burPSuiteLab3WithIdOnly = await prisma.burPSuiteLab3.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BurPSuiteLab3CreateManyAndReturnArgs>(args?: SelectSubset<T, BurPSuiteLab3CreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BurPSuiteLab3Payload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a BurPSuiteLab3.
     * @param {BurPSuiteLab3DeleteArgs} args - Arguments to delete one BurPSuiteLab3.
     * @example
     * // Delete one BurPSuiteLab3
     * const BurPSuiteLab3 = await prisma.burPSuiteLab3.delete({
     *   where: {
     *     // ... filter to delete one BurPSuiteLab3
     *   }
     * })
     * 
     */
    delete<T extends BurPSuiteLab3DeleteArgs>(args: SelectSubset<T, BurPSuiteLab3DeleteArgs<ExtArgs>>): Prisma__BurPSuiteLab3Client<$Result.GetResult<Prisma.$BurPSuiteLab3Payload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one BurPSuiteLab3.
     * @param {BurPSuiteLab3UpdateArgs} args - Arguments to update one BurPSuiteLab3.
     * @example
     * // Update one BurPSuiteLab3
     * const burPSuiteLab3 = await prisma.burPSuiteLab3.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BurPSuiteLab3UpdateArgs>(args: SelectSubset<T, BurPSuiteLab3UpdateArgs<ExtArgs>>): Prisma__BurPSuiteLab3Client<$Result.GetResult<Prisma.$BurPSuiteLab3Payload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more BurPSuiteLab3s.
     * @param {BurPSuiteLab3DeleteManyArgs} args - Arguments to filter BurPSuiteLab3s to delete.
     * @example
     * // Delete a few BurPSuiteLab3s
     * const { count } = await prisma.burPSuiteLab3.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BurPSuiteLab3DeleteManyArgs>(args?: SelectSubset<T, BurPSuiteLab3DeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BurPSuiteLab3s.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BurPSuiteLab3UpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BurPSuiteLab3s
     * const burPSuiteLab3 = await prisma.burPSuiteLab3.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BurPSuiteLab3UpdateManyArgs>(args: SelectSubset<T, BurPSuiteLab3UpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BurPSuiteLab3s and returns the data updated in the database.
     * @param {BurPSuiteLab3UpdateManyAndReturnArgs} args - Arguments to update many BurPSuiteLab3s.
     * @example
     * // Update many BurPSuiteLab3s
     * const burPSuiteLab3 = await prisma.burPSuiteLab3.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more BurPSuiteLab3s and only return the `id`
     * const burPSuiteLab3WithIdOnly = await prisma.burPSuiteLab3.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BurPSuiteLab3UpdateManyAndReturnArgs>(args: SelectSubset<T, BurPSuiteLab3UpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BurPSuiteLab3Payload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one BurPSuiteLab3.
     * @param {BurPSuiteLab3UpsertArgs} args - Arguments to update or create a BurPSuiteLab3.
     * @example
     * // Update or create a BurPSuiteLab3
     * const burPSuiteLab3 = await prisma.burPSuiteLab3.upsert({
     *   create: {
     *     // ... data to create a BurPSuiteLab3
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BurPSuiteLab3 we want to update
     *   }
     * })
     */
    upsert<T extends BurPSuiteLab3UpsertArgs>(args: SelectSubset<T, BurPSuiteLab3UpsertArgs<ExtArgs>>): Prisma__BurPSuiteLab3Client<$Result.GetResult<Prisma.$BurPSuiteLab3Payload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of BurPSuiteLab3s.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BurPSuiteLab3CountArgs} args - Arguments to filter BurPSuiteLab3s to count.
     * @example
     * // Count the number of BurPSuiteLab3s
     * const count = await prisma.burPSuiteLab3.count({
     *   where: {
     *     // ... the filter for the BurPSuiteLab3s we want to count
     *   }
     * })
    **/
    count<T extends BurPSuiteLab3CountArgs>(
      args?: Subset<T, BurPSuiteLab3CountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BurPSuiteLab3CountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BurPSuiteLab3.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BurPSuiteLab3AggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BurPSuiteLab3AggregateArgs>(args: Subset<T, BurPSuiteLab3AggregateArgs>): Prisma.PrismaPromise<GetBurPSuiteLab3AggregateType<T>>

    /**
     * Group by BurPSuiteLab3.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BurPSuiteLab3GroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BurPSuiteLab3GroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BurPSuiteLab3GroupByArgs['orderBy'] }
        : { orderBy?: BurPSuiteLab3GroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BurPSuiteLab3GroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBurPSuiteLab3GroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BurPSuiteLab3 model
   */
  readonly fields: BurPSuiteLab3FieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BurPSuiteLab3.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BurPSuiteLab3Client<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BurPSuiteLab3 model
   */ 
  interface BurPSuiteLab3FieldRefs {
    readonly id: FieldRef<"BurPSuiteLab3", 'String'>
    readonly name: FieldRef<"BurPSuiteLab3", 'String'>
    readonly path: FieldRef<"BurPSuiteLab3", 'String'>
    readonly description: FieldRef<"BurPSuiteLab3", 'String'>
  }
    

  // Custom InputTypes
  /**
   * BurPSuiteLab3 findUnique
   */
  export type BurPSuiteLab3FindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BurPSuiteLab3
     */
    select?: BurPSuiteLab3Select<ExtArgs> | null
    /**
     * Omit specific fields from the BurPSuiteLab3
     */
    omit?: BurPSuiteLab3Omit<ExtArgs> | null
    /**
     * Filter, which BurPSuiteLab3 to fetch.
     */
    where: BurPSuiteLab3WhereUniqueInput
  }

  /**
   * BurPSuiteLab3 findUniqueOrThrow
   */
  export type BurPSuiteLab3FindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BurPSuiteLab3
     */
    select?: BurPSuiteLab3Select<ExtArgs> | null
    /**
     * Omit specific fields from the BurPSuiteLab3
     */
    omit?: BurPSuiteLab3Omit<ExtArgs> | null
    /**
     * Filter, which BurPSuiteLab3 to fetch.
     */
    where: BurPSuiteLab3WhereUniqueInput
  }

  /**
   * BurPSuiteLab3 findFirst
   */
  export type BurPSuiteLab3FindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BurPSuiteLab3
     */
    select?: BurPSuiteLab3Select<ExtArgs> | null
    /**
     * Omit specific fields from the BurPSuiteLab3
     */
    omit?: BurPSuiteLab3Omit<ExtArgs> | null
    /**
     * Filter, which BurPSuiteLab3 to fetch.
     */
    where?: BurPSuiteLab3WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BurPSuiteLab3s to fetch.
     */
    orderBy?: BurPSuiteLab3OrderByWithRelationInput | BurPSuiteLab3OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BurPSuiteLab3s.
     */
    cursor?: BurPSuiteLab3WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BurPSuiteLab3s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BurPSuiteLab3s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BurPSuiteLab3s.
     */
    distinct?: BurPSuiteLab3ScalarFieldEnum | BurPSuiteLab3ScalarFieldEnum[]
  }

  /**
   * BurPSuiteLab3 findFirstOrThrow
   */
  export type BurPSuiteLab3FindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BurPSuiteLab3
     */
    select?: BurPSuiteLab3Select<ExtArgs> | null
    /**
     * Omit specific fields from the BurPSuiteLab3
     */
    omit?: BurPSuiteLab3Omit<ExtArgs> | null
    /**
     * Filter, which BurPSuiteLab3 to fetch.
     */
    where?: BurPSuiteLab3WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BurPSuiteLab3s to fetch.
     */
    orderBy?: BurPSuiteLab3OrderByWithRelationInput | BurPSuiteLab3OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BurPSuiteLab3s.
     */
    cursor?: BurPSuiteLab3WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BurPSuiteLab3s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BurPSuiteLab3s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BurPSuiteLab3s.
     */
    distinct?: BurPSuiteLab3ScalarFieldEnum | BurPSuiteLab3ScalarFieldEnum[]
  }

  /**
   * BurPSuiteLab3 findMany
   */
  export type BurPSuiteLab3FindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BurPSuiteLab3
     */
    select?: BurPSuiteLab3Select<ExtArgs> | null
    /**
     * Omit specific fields from the BurPSuiteLab3
     */
    omit?: BurPSuiteLab3Omit<ExtArgs> | null
    /**
     * Filter, which BurPSuiteLab3s to fetch.
     */
    where?: BurPSuiteLab3WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BurPSuiteLab3s to fetch.
     */
    orderBy?: BurPSuiteLab3OrderByWithRelationInput | BurPSuiteLab3OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BurPSuiteLab3s.
     */
    cursor?: BurPSuiteLab3WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BurPSuiteLab3s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BurPSuiteLab3s.
     */
    skip?: number
    distinct?: BurPSuiteLab3ScalarFieldEnum | BurPSuiteLab3ScalarFieldEnum[]
  }

  /**
   * BurPSuiteLab3 create
   */
  export type BurPSuiteLab3CreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BurPSuiteLab3
     */
    select?: BurPSuiteLab3Select<ExtArgs> | null
    /**
     * Omit specific fields from the BurPSuiteLab3
     */
    omit?: BurPSuiteLab3Omit<ExtArgs> | null
    /**
     * The data needed to create a BurPSuiteLab3.
     */
    data?: XOR<BurPSuiteLab3CreateInput, BurPSuiteLab3UncheckedCreateInput>
  }

  /**
   * BurPSuiteLab3 createMany
   */
  export type BurPSuiteLab3CreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BurPSuiteLab3s.
     */
    data: BurPSuiteLab3CreateManyInput | BurPSuiteLab3CreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BurPSuiteLab3 createManyAndReturn
   */
  export type BurPSuiteLab3CreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BurPSuiteLab3
     */
    select?: BurPSuiteLab3SelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BurPSuiteLab3
     */
    omit?: BurPSuiteLab3Omit<ExtArgs> | null
    /**
     * The data used to create many BurPSuiteLab3s.
     */
    data: BurPSuiteLab3CreateManyInput | BurPSuiteLab3CreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BurPSuiteLab3 update
   */
  export type BurPSuiteLab3UpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BurPSuiteLab3
     */
    select?: BurPSuiteLab3Select<ExtArgs> | null
    /**
     * Omit specific fields from the BurPSuiteLab3
     */
    omit?: BurPSuiteLab3Omit<ExtArgs> | null
    /**
     * The data needed to update a BurPSuiteLab3.
     */
    data: XOR<BurPSuiteLab3UpdateInput, BurPSuiteLab3UncheckedUpdateInput>
    /**
     * Choose, which BurPSuiteLab3 to update.
     */
    where: BurPSuiteLab3WhereUniqueInput
  }

  /**
   * BurPSuiteLab3 updateMany
   */
  export type BurPSuiteLab3UpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BurPSuiteLab3s.
     */
    data: XOR<BurPSuiteLab3UpdateManyMutationInput, BurPSuiteLab3UncheckedUpdateManyInput>
    /**
     * Filter which BurPSuiteLab3s to update
     */
    where?: BurPSuiteLab3WhereInput
    /**
     * Limit how many BurPSuiteLab3s to update.
     */
    limit?: number
  }

  /**
   * BurPSuiteLab3 updateManyAndReturn
   */
  export type BurPSuiteLab3UpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BurPSuiteLab3
     */
    select?: BurPSuiteLab3SelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BurPSuiteLab3
     */
    omit?: BurPSuiteLab3Omit<ExtArgs> | null
    /**
     * The data used to update BurPSuiteLab3s.
     */
    data: XOR<BurPSuiteLab3UpdateManyMutationInput, BurPSuiteLab3UncheckedUpdateManyInput>
    /**
     * Filter which BurPSuiteLab3s to update
     */
    where?: BurPSuiteLab3WhereInput
    /**
     * Limit how many BurPSuiteLab3s to update.
     */
    limit?: number
  }

  /**
   * BurPSuiteLab3 upsert
   */
  export type BurPSuiteLab3UpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BurPSuiteLab3
     */
    select?: BurPSuiteLab3Select<ExtArgs> | null
    /**
     * Omit specific fields from the BurPSuiteLab3
     */
    omit?: BurPSuiteLab3Omit<ExtArgs> | null
    /**
     * The filter to search for the BurPSuiteLab3 to update in case it exists.
     */
    where: BurPSuiteLab3WhereUniqueInput
    /**
     * In case the BurPSuiteLab3 found by the `where` argument doesn't exist, create a new BurPSuiteLab3 with this data.
     */
    create: XOR<BurPSuiteLab3CreateInput, BurPSuiteLab3UncheckedCreateInput>
    /**
     * In case the BurPSuiteLab3 was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BurPSuiteLab3UpdateInput, BurPSuiteLab3UncheckedUpdateInput>
  }

  /**
   * BurPSuiteLab3 delete
   */
  export type BurPSuiteLab3DeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BurPSuiteLab3
     */
    select?: BurPSuiteLab3Select<ExtArgs> | null
    /**
     * Omit specific fields from the BurPSuiteLab3
     */
    omit?: BurPSuiteLab3Omit<ExtArgs> | null
    /**
     * Filter which BurPSuiteLab3 to delete.
     */
    where: BurPSuiteLab3WhereUniqueInput
  }

  /**
   * BurPSuiteLab3 deleteMany
   */
  export type BurPSuiteLab3DeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BurPSuiteLab3s to delete
     */
    where?: BurPSuiteLab3WhereInput
    /**
     * Limit how many BurPSuiteLab3s to delete.
     */
    limit?: number
  }

  /**
   * BurPSuiteLab3 without action
   */
  export type BurPSuiteLab3DefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BurPSuiteLab3
     */
    select?: BurPSuiteLab3Select<ExtArgs> | null
    /**
     * Omit specific fields from the BurPSuiteLab3
     */
    omit?: BurPSuiteLab3Omit<ExtArgs> | null
  }


  /**
   * Model Course
   */

  export type AggregateCourse = {
    _count: CourseCountAggregateOutputType | null
    _avg: CourseAvgAggregateOutputType | null
    _sum: CourseSumAggregateOutputType | null
    _min: CourseMinAggregateOutputType | null
    _max: CourseMaxAggregateOutputType | null
  }

  export type CourseAvgAggregateOutputType = {
    id: number | null
  }

  export type CourseSumAggregateOutputType = {
    id: number | null
  }

  export type CourseMinAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    image: string | null
    link: string | null
    state: string | null
    difficulty: string | null
    favorite: boolean | null
  }

  export type CourseMaxAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    image: string | null
    link: string | null
    state: string | null
    difficulty: string | null
    favorite: boolean | null
  }

  export type CourseCountAggregateOutputType = {
    id: number
    title: number
    description: number
    image: number
    link: number
    state: number
    topics: number
    difficulty: number
    favorite: number
    _all: number
  }


  export type CourseAvgAggregateInputType = {
    id?: true
  }

  export type CourseSumAggregateInputType = {
    id?: true
  }

  export type CourseMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    image?: true
    link?: true
    state?: true
    difficulty?: true
    favorite?: true
  }

  export type CourseMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    image?: true
    link?: true
    state?: true
    difficulty?: true
    favorite?: true
  }

  export type CourseCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    image?: true
    link?: true
    state?: true
    topics?: true
    difficulty?: true
    favorite?: true
    _all?: true
  }

  export type CourseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Course to aggregate.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Courses
    **/
    _count?: true | CourseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CourseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CourseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CourseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CourseMaxAggregateInputType
  }

  export type GetCourseAggregateType<T extends CourseAggregateArgs> = {
        [P in keyof T & keyof AggregateCourse]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCourse[P]>
      : GetScalarType<T[P], AggregateCourse[P]>
  }




  export type CourseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseWhereInput
    orderBy?: CourseOrderByWithAggregationInput | CourseOrderByWithAggregationInput[]
    by: CourseScalarFieldEnum[] | CourseScalarFieldEnum
    having?: CourseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CourseCountAggregateInputType | true
    _avg?: CourseAvgAggregateInputType
    _sum?: CourseSumAggregateInputType
    _min?: CourseMinAggregateInputType
    _max?: CourseMaxAggregateInputType
  }

  export type CourseGroupByOutputType = {
    id: number
    title: string
    description: string
    image: string | null
    link: string | null
    state: string
    topics: string[]
    difficulty: string
    favorite: boolean
    _count: CourseCountAggregateOutputType | null
    _avg: CourseAvgAggregateOutputType | null
    _sum: CourseSumAggregateOutputType | null
    _min: CourseMinAggregateOutputType | null
    _max: CourseMaxAggregateOutputType | null
  }

  type GetCourseGroupByPayload<T extends CourseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CourseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CourseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CourseGroupByOutputType[P]>
            : GetScalarType<T[P], CourseGroupByOutputType[P]>
        }
      >
    >


  export type CourseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    image?: boolean
    link?: boolean
    state?: boolean
    topics?: boolean
    difficulty?: boolean
    favorite?: boolean
    registrations?: boolean | Course$registrationsArgs<ExtArgs>
    _count?: boolean | CourseCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["course"]>

  export type CourseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    image?: boolean
    link?: boolean
    state?: boolean
    topics?: boolean
    difficulty?: boolean
    favorite?: boolean
  }, ExtArgs["result"]["course"]>

  export type CourseSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    image?: boolean
    link?: boolean
    state?: boolean
    topics?: boolean
    difficulty?: boolean
    favorite?: boolean
  }, ExtArgs["result"]["course"]>

  export type CourseSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    image?: boolean
    link?: boolean
    state?: boolean
    topics?: boolean
    difficulty?: boolean
    favorite?: boolean
  }

  export type CourseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "image" | "link" | "state" | "topics" | "difficulty" | "favorite", ExtArgs["result"]["course"]>
  export type CourseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    registrations?: boolean | Course$registrationsArgs<ExtArgs>
    _count?: boolean | CourseCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CourseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type CourseIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CoursePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Course"
    objects: {
      registrations: Prisma.$CourseRegistrationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      description: string
      image: string | null
      link: string | null
      state: string
      topics: string[]
      difficulty: string
      favorite: boolean
    }, ExtArgs["result"]["course"]>
    composites: {}
  }

  type CourseGetPayload<S extends boolean | null | undefined | CourseDefaultArgs> = $Result.GetResult<Prisma.$CoursePayload, S>

  type CourseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CourseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CourseCountAggregateInputType | true
    }

  export interface CourseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Course'], meta: { name: 'Course' } }
    /**
     * Find zero or one Course that matches the filter.
     * @param {CourseFindUniqueArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CourseFindUniqueArgs>(args: SelectSubset<T, CourseFindUniqueArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Course that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CourseFindUniqueOrThrowArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CourseFindUniqueOrThrowArgs>(args: SelectSubset<T, CourseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Course that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseFindFirstArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CourseFindFirstArgs>(args?: SelectSubset<T, CourseFindFirstArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Course that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseFindFirstOrThrowArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CourseFindFirstOrThrowArgs>(args?: SelectSubset<T, CourseFindFirstOrThrowArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Courses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Courses
     * const courses = await prisma.course.findMany()
     * 
     * // Get first 10 Courses
     * const courses = await prisma.course.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const courseWithIdOnly = await prisma.course.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CourseFindManyArgs>(args?: SelectSubset<T, CourseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Course.
     * @param {CourseCreateArgs} args - Arguments to create a Course.
     * @example
     * // Create one Course
     * const Course = await prisma.course.create({
     *   data: {
     *     // ... data to create a Course
     *   }
     * })
     * 
     */
    create<T extends CourseCreateArgs>(args: SelectSubset<T, CourseCreateArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Courses.
     * @param {CourseCreateManyArgs} args - Arguments to create many Courses.
     * @example
     * // Create many Courses
     * const course = await prisma.course.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CourseCreateManyArgs>(args?: SelectSubset<T, CourseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Courses and returns the data saved in the database.
     * @param {CourseCreateManyAndReturnArgs} args - Arguments to create many Courses.
     * @example
     * // Create many Courses
     * const course = await prisma.course.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Courses and only return the `id`
     * const courseWithIdOnly = await prisma.course.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CourseCreateManyAndReturnArgs>(args?: SelectSubset<T, CourseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Course.
     * @param {CourseDeleteArgs} args - Arguments to delete one Course.
     * @example
     * // Delete one Course
     * const Course = await prisma.course.delete({
     *   where: {
     *     // ... filter to delete one Course
     *   }
     * })
     * 
     */
    delete<T extends CourseDeleteArgs>(args: SelectSubset<T, CourseDeleteArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Course.
     * @param {CourseUpdateArgs} args - Arguments to update one Course.
     * @example
     * // Update one Course
     * const course = await prisma.course.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CourseUpdateArgs>(args: SelectSubset<T, CourseUpdateArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Courses.
     * @param {CourseDeleteManyArgs} args - Arguments to filter Courses to delete.
     * @example
     * // Delete a few Courses
     * const { count } = await prisma.course.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CourseDeleteManyArgs>(args?: SelectSubset<T, CourseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Courses
     * const course = await prisma.course.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CourseUpdateManyArgs>(args: SelectSubset<T, CourseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Courses and returns the data updated in the database.
     * @param {CourseUpdateManyAndReturnArgs} args - Arguments to update many Courses.
     * @example
     * // Update many Courses
     * const course = await prisma.course.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Courses and only return the `id`
     * const courseWithIdOnly = await prisma.course.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CourseUpdateManyAndReturnArgs>(args: SelectSubset<T, CourseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Course.
     * @param {CourseUpsertArgs} args - Arguments to update or create a Course.
     * @example
     * // Update or create a Course
     * const course = await prisma.course.upsert({
     *   create: {
     *     // ... data to create a Course
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Course we want to update
     *   }
     * })
     */
    upsert<T extends CourseUpsertArgs>(args: SelectSubset<T, CourseUpsertArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseCountArgs} args - Arguments to filter Courses to count.
     * @example
     * // Count the number of Courses
     * const count = await prisma.course.count({
     *   where: {
     *     // ... the filter for the Courses we want to count
     *   }
     * })
    **/
    count<T extends CourseCountArgs>(
      args?: Subset<T, CourseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CourseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Course.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CourseAggregateArgs>(args: Subset<T, CourseAggregateArgs>): Prisma.PrismaPromise<GetCourseAggregateType<T>>

    /**
     * Group by Course.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CourseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CourseGroupByArgs['orderBy'] }
        : { orderBy?: CourseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CourseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCourseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Course model
   */
  readonly fields: CourseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Course.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CourseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    registrations<T extends Course$registrationsArgs<ExtArgs> = {}>(args?: Subset<T, Course$registrationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CourseRegistrationPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Course model
   */ 
  interface CourseFieldRefs {
    readonly id: FieldRef<"Course", 'Int'>
    readonly title: FieldRef<"Course", 'String'>
    readonly description: FieldRef<"Course", 'String'>
    readonly image: FieldRef<"Course", 'String'>
    readonly link: FieldRef<"Course", 'String'>
    readonly state: FieldRef<"Course", 'String'>
    readonly topics: FieldRef<"Course", 'String[]'>
    readonly difficulty: FieldRef<"Course", 'String'>
    readonly favorite: FieldRef<"Course", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Course findUnique
   */
  export type CourseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where: CourseWhereUniqueInput
  }

  /**
   * Course findUniqueOrThrow
   */
  export type CourseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where: CourseWhereUniqueInput
  }

  /**
   * Course findFirst
   */
  export type CourseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Courses.
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Courses.
     */
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }

  /**
   * Course findFirstOrThrow
   */
  export type CourseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Courses.
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Courses.
     */
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }

  /**
   * Course findMany
   */
  export type CourseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Courses to fetch.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Courses.
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }

  /**
   * Course create
   */
  export type CourseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * The data needed to create a Course.
     */
    data: XOR<CourseCreateInput, CourseUncheckedCreateInput>
  }

  /**
   * Course createMany
   */
  export type CourseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Courses.
     */
    data: CourseCreateManyInput | CourseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Course createManyAndReturn
   */
  export type CourseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * The data used to create many Courses.
     */
    data: CourseCreateManyInput | CourseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Course update
   */
  export type CourseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * The data needed to update a Course.
     */
    data: XOR<CourseUpdateInput, CourseUncheckedUpdateInput>
    /**
     * Choose, which Course to update.
     */
    where: CourseWhereUniqueInput
  }

  /**
   * Course updateMany
   */
  export type CourseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Courses.
     */
    data: XOR<CourseUpdateManyMutationInput, CourseUncheckedUpdateManyInput>
    /**
     * Filter which Courses to update
     */
    where?: CourseWhereInput
    /**
     * Limit how many Courses to update.
     */
    limit?: number
  }

  /**
   * Course updateManyAndReturn
   */
  export type CourseUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * The data used to update Courses.
     */
    data: XOR<CourseUpdateManyMutationInput, CourseUncheckedUpdateManyInput>
    /**
     * Filter which Courses to update
     */
    where?: CourseWhereInput
    /**
     * Limit how many Courses to update.
     */
    limit?: number
  }

  /**
   * Course upsert
   */
  export type CourseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * The filter to search for the Course to update in case it exists.
     */
    where: CourseWhereUniqueInput
    /**
     * In case the Course found by the `where` argument doesn't exist, create a new Course with this data.
     */
    create: XOR<CourseCreateInput, CourseUncheckedCreateInput>
    /**
     * In case the Course was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CourseUpdateInput, CourseUncheckedUpdateInput>
  }

  /**
   * Course delete
   */
  export type CourseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter which Course to delete.
     */
    where: CourseWhereUniqueInput
  }

  /**
   * Course deleteMany
   */
  export type CourseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Courses to delete
     */
    where?: CourseWhereInput
    /**
     * Limit how many Courses to delete.
     */
    limit?: number
  }

  /**
   * Course.registrations
   */
  export type Course$registrationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseRegistration
     */
    select?: CourseRegistrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseRegistration
     */
    omit?: CourseRegistrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseRegistrationInclude<ExtArgs> | null
    where?: CourseRegistrationWhereInput
    orderBy?: CourseRegistrationOrderByWithRelationInput | CourseRegistrationOrderByWithRelationInput[]
    cursor?: CourseRegistrationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CourseRegistrationScalarFieldEnum | CourseRegistrationScalarFieldEnum[]
  }

  /**
   * Course without action
   */
  export type CourseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
  }


  /**
   * Model CourseRegistration
   */

  export type AggregateCourseRegistration = {
    _count: CourseRegistrationCountAggregateOutputType | null
    _avg: CourseRegistrationAvgAggregateOutputType | null
    _sum: CourseRegistrationSumAggregateOutputType | null
    _min: CourseRegistrationMinAggregateOutputType | null
    _max: CourseRegistrationMaxAggregateOutputType | null
  }

  export type CourseRegistrationAvgAggregateOutputType = {
    id: number | null
    courseId: number | null
  }

  export type CourseRegistrationSumAggregateOutputType = {
    id: number | null
    courseId: number | null
  }

  export type CourseRegistrationMinAggregateOutputType = {
    id: number | null
    courseId: number | null
    createdAt: Date | null
  }

  export type CourseRegistrationMaxAggregateOutputType = {
    id: number | null
    courseId: number | null
    createdAt: Date | null
  }

  export type CourseRegistrationCountAggregateOutputType = {
    id: number
    courseId: number
    createdAt: number
    _all: number
  }


  export type CourseRegistrationAvgAggregateInputType = {
    id?: true
    courseId?: true
  }

  export type CourseRegistrationSumAggregateInputType = {
    id?: true
    courseId?: true
  }

  export type CourseRegistrationMinAggregateInputType = {
    id?: true
    courseId?: true
    createdAt?: true
  }

  export type CourseRegistrationMaxAggregateInputType = {
    id?: true
    courseId?: true
    createdAt?: true
  }

  export type CourseRegistrationCountAggregateInputType = {
    id?: true
    courseId?: true
    createdAt?: true
    _all?: true
  }

  export type CourseRegistrationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CourseRegistration to aggregate.
     */
    where?: CourseRegistrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CourseRegistrations to fetch.
     */
    orderBy?: CourseRegistrationOrderByWithRelationInput | CourseRegistrationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CourseRegistrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CourseRegistrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CourseRegistrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CourseRegistrations
    **/
    _count?: true | CourseRegistrationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CourseRegistrationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CourseRegistrationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CourseRegistrationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CourseRegistrationMaxAggregateInputType
  }

  export type GetCourseRegistrationAggregateType<T extends CourseRegistrationAggregateArgs> = {
        [P in keyof T & keyof AggregateCourseRegistration]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCourseRegistration[P]>
      : GetScalarType<T[P], AggregateCourseRegistration[P]>
  }




  export type CourseRegistrationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseRegistrationWhereInput
    orderBy?: CourseRegistrationOrderByWithAggregationInput | CourseRegistrationOrderByWithAggregationInput[]
    by: CourseRegistrationScalarFieldEnum[] | CourseRegistrationScalarFieldEnum
    having?: CourseRegistrationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CourseRegistrationCountAggregateInputType | true
    _avg?: CourseRegistrationAvgAggregateInputType
    _sum?: CourseRegistrationSumAggregateInputType
    _min?: CourseRegistrationMinAggregateInputType
    _max?: CourseRegistrationMaxAggregateInputType
  }

  export type CourseRegistrationGroupByOutputType = {
    id: number
    courseId: number
    createdAt: Date
    _count: CourseRegistrationCountAggregateOutputType | null
    _avg: CourseRegistrationAvgAggregateOutputType | null
    _sum: CourseRegistrationSumAggregateOutputType | null
    _min: CourseRegistrationMinAggregateOutputType | null
    _max: CourseRegistrationMaxAggregateOutputType | null
  }

  type GetCourseRegistrationGroupByPayload<T extends CourseRegistrationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CourseRegistrationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CourseRegistrationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CourseRegistrationGroupByOutputType[P]>
            : GetScalarType<T[P], CourseRegistrationGroupByOutputType[P]>
        }
      >
    >


  export type CourseRegistrationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    courseId?: boolean
    createdAt?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["courseRegistration"]>

  export type CourseRegistrationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    courseId?: boolean
    createdAt?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["courseRegistration"]>

  export type CourseRegistrationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    courseId?: boolean
    createdAt?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["courseRegistration"]>

  export type CourseRegistrationSelectScalar = {
    id?: boolean
    courseId?: boolean
    createdAt?: boolean
  }

  export type CourseRegistrationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "courseId" | "createdAt", ExtArgs["result"]["courseRegistration"]>
  export type CourseRegistrationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
  }
  export type CourseRegistrationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
  }
  export type CourseRegistrationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
  }

  export type $CourseRegistrationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CourseRegistration"
    objects: {
      course: Prisma.$CoursePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      courseId: number
      createdAt: Date
    }, ExtArgs["result"]["courseRegistration"]>
    composites: {}
  }

  type CourseRegistrationGetPayload<S extends boolean | null | undefined | CourseRegistrationDefaultArgs> = $Result.GetResult<Prisma.$CourseRegistrationPayload, S>

  type CourseRegistrationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CourseRegistrationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CourseRegistrationCountAggregateInputType | true
    }

  export interface CourseRegistrationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CourseRegistration'], meta: { name: 'CourseRegistration' } }
    /**
     * Find zero or one CourseRegistration that matches the filter.
     * @param {CourseRegistrationFindUniqueArgs} args - Arguments to find a CourseRegistration
     * @example
     * // Get one CourseRegistration
     * const courseRegistration = await prisma.courseRegistration.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CourseRegistrationFindUniqueArgs>(args: SelectSubset<T, CourseRegistrationFindUniqueArgs<ExtArgs>>): Prisma__CourseRegistrationClient<$Result.GetResult<Prisma.$CourseRegistrationPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one CourseRegistration that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CourseRegistrationFindUniqueOrThrowArgs} args - Arguments to find a CourseRegistration
     * @example
     * // Get one CourseRegistration
     * const courseRegistration = await prisma.courseRegistration.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CourseRegistrationFindUniqueOrThrowArgs>(args: SelectSubset<T, CourseRegistrationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CourseRegistrationClient<$Result.GetResult<Prisma.$CourseRegistrationPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first CourseRegistration that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseRegistrationFindFirstArgs} args - Arguments to find a CourseRegistration
     * @example
     * // Get one CourseRegistration
     * const courseRegistration = await prisma.courseRegistration.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CourseRegistrationFindFirstArgs>(args?: SelectSubset<T, CourseRegistrationFindFirstArgs<ExtArgs>>): Prisma__CourseRegistrationClient<$Result.GetResult<Prisma.$CourseRegistrationPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first CourseRegistration that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseRegistrationFindFirstOrThrowArgs} args - Arguments to find a CourseRegistration
     * @example
     * // Get one CourseRegistration
     * const courseRegistration = await prisma.courseRegistration.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CourseRegistrationFindFirstOrThrowArgs>(args?: SelectSubset<T, CourseRegistrationFindFirstOrThrowArgs<ExtArgs>>): Prisma__CourseRegistrationClient<$Result.GetResult<Prisma.$CourseRegistrationPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more CourseRegistrations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseRegistrationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CourseRegistrations
     * const courseRegistrations = await prisma.courseRegistration.findMany()
     * 
     * // Get first 10 CourseRegistrations
     * const courseRegistrations = await prisma.courseRegistration.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const courseRegistrationWithIdOnly = await prisma.courseRegistration.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CourseRegistrationFindManyArgs>(args?: SelectSubset<T, CourseRegistrationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CourseRegistrationPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a CourseRegistration.
     * @param {CourseRegistrationCreateArgs} args - Arguments to create a CourseRegistration.
     * @example
     * // Create one CourseRegistration
     * const CourseRegistration = await prisma.courseRegistration.create({
     *   data: {
     *     // ... data to create a CourseRegistration
     *   }
     * })
     * 
     */
    create<T extends CourseRegistrationCreateArgs>(args: SelectSubset<T, CourseRegistrationCreateArgs<ExtArgs>>): Prisma__CourseRegistrationClient<$Result.GetResult<Prisma.$CourseRegistrationPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many CourseRegistrations.
     * @param {CourseRegistrationCreateManyArgs} args - Arguments to create many CourseRegistrations.
     * @example
     * // Create many CourseRegistrations
     * const courseRegistration = await prisma.courseRegistration.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CourseRegistrationCreateManyArgs>(args?: SelectSubset<T, CourseRegistrationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CourseRegistrations and returns the data saved in the database.
     * @param {CourseRegistrationCreateManyAndReturnArgs} args - Arguments to create many CourseRegistrations.
     * @example
     * // Create many CourseRegistrations
     * const courseRegistration = await prisma.courseRegistration.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CourseRegistrations and only return the `id`
     * const courseRegistrationWithIdOnly = await prisma.courseRegistration.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CourseRegistrationCreateManyAndReturnArgs>(args?: SelectSubset<T, CourseRegistrationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CourseRegistrationPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a CourseRegistration.
     * @param {CourseRegistrationDeleteArgs} args - Arguments to delete one CourseRegistration.
     * @example
     * // Delete one CourseRegistration
     * const CourseRegistration = await prisma.courseRegistration.delete({
     *   where: {
     *     // ... filter to delete one CourseRegistration
     *   }
     * })
     * 
     */
    delete<T extends CourseRegistrationDeleteArgs>(args: SelectSubset<T, CourseRegistrationDeleteArgs<ExtArgs>>): Prisma__CourseRegistrationClient<$Result.GetResult<Prisma.$CourseRegistrationPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one CourseRegistration.
     * @param {CourseRegistrationUpdateArgs} args - Arguments to update one CourseRegistration.
     * @example
     * // Update one CourseRegistration
     * const courseRegistration = await prisma.courseRegistration.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CourseRegistrationUpdateArgs>(args: SelectSubset<T, CourseRegistrationUpdateArgs<ExtArgs>>): Prisma__CourseRegistrationClient<$Result.GetResult<Prisma.$CourseRegistrationPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more CourseRegistrations.
     * @param {CourseRegistrationDeleteManyArgs} args - Arguments to filter CourseRegistrations to delete.
     * @example
     * // Delete a few CourseRegistrations
     * const { count } = await prisma.courseRegistration.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CourseRegistrationDeleteManyArgs>(args?: SelectSubset<T, CourseRegistrationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CourseRegistrations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseRegistrationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CourseRegistrations
     * const courseRegistration = await prisma.courseRegistration.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CourseRegistrationUpdateManyArgs>(args: SelectSubset<T, CourseRegistrationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CourseRegistrations and returns the data updated in the database.
     * @param {CourseRegistrationUpdateManyAndReturnArgs} args - Arguments to update many CourseRegistrations.
     * @example
     * // Update many CourseRegistrations
     * const courseRegistration = await prisma.courseRegistration.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CourseRegistrations and only return the `id`
     * const courseRegistrationWithIdOnly = await prisma.courseRegistration.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CourseRegistrationUpdateManyAndReturnArgs>(args: SelectSubset<T, CourseRegistrationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CourseRegistrationPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one CourseRegistration.
     * @param {CourseRegistrationUpsertArgs} args - Arguments to update or create a CourseRegistration.
     * @example
     * // Update or create a CourseRegistration
     * const courseRegistration = await prisma.courseRegistration.upsert({
     *   create: {
     *     // ... data to create a CourseRegistration
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CourseRegistration we want to update
     *   }
     * })
     */
    upsert<T extends CourseRegistrationUpsertArgs>(args: SelectSubset<T, CourseRegistrationUpsertArgs<ExtArgs>>): Prisma__CourseRegistrationClient<$Result.GetResult<Prisma.$CourseRegistrationPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of CourseRegistrations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseRegistrationCountArgs} args - Arguments to filter CourseRegistrations to count.
     * @example
     * // Count the number of CourseRegistrations
     * const count = await prisma.courseRegistration.count({
     *   where: {
     *     // ... the filter for the CourseRegistrations we want to count
     *   }
     * })
    **/
    count<T extends CourseRegistrationCountArgs>(
      args?: Subset<T, CourseRegistrationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CourseRegistrationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CourseRegistration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseRegistrationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CourseRegistrationAggregateArgs>(args: Subset<T, CourseRegistrationAggregateArgs>): Prisma.PrismaPromise<GetCourseRegistrationAggregateType<T>>

    /**
     * Group by CourseRegistration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseRegistrationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CourseRegistrationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CourseRegistrationGroupByArgs['orderBy'] }
        : { orderBy?: CourseRegistrationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CourseRegistrationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCourseRegistrationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CourseRegistration model
   */
  readonly fields: CourseRegistrationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CourseRegistration.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CourseRegistrationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    course<T extends CourseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CourseDefaultArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CourseRegistration model
   */ 
  interface CourseRegistrationFieldRefs {
    readonly id: FieldRef<"CourseRegistration", 'Int'>
    readonly courseId: FieldRef<"CourseRegistration", 'Int'>
    readonly createdAt: FieldRef<"CourseRegistration", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CourseRegistration findUnique
   */
  export type CourseRegistrationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseRegistration
     */
    select?: CourseRegistrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseRegistration
     */
    omit?: CourseRegistrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseRegistrationInclude<ExtArgs> | null
    /**
     * Filter, which CourseRegistration to fetch.
     */
    where: CourseRegistrationWhereUniqueInput
  }

  /**
   * CourseRegistration findUniqueOrThrow
   */
  export type CourseRegistrationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseRegistration
     */
    select?: CourseRegistrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseRegistration
     */
    omit?: CourseRegistrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseRegistrationInclude<ExtArgs> | null
    /**
     * Filter, which CourseRegistration to fetch.
     */
    where: CourseRegistrationWhereUniqueInput
  }

  /**
   * CourseRegistration findFirst
   */
  export type CourseRegistrationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseRegistration
     */
    select?: CourseRegistrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseRegistration
     */
    omit?: CourseRegistrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseRegistrationInclude<ExtArgs> | null
    /**
     * Filter, which CourseRegistration to fetch.
     */
    where?: CourseRegistrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CourseRegistrations to fetch.
     */
    orderBy?: CourseRegistrationOrderByWithRelationInput | CourseRegistrationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CourseRegistrations.
     */
    cursor?: CourseRegistrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CourseRegistrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CourseRegistrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CourseRegistrations.
     */
    distinct?: CourseRegistrationScalarFieldEnum | CourseRegistrationScalarFieldEnum[]
  }

  /**
   * CourseRegistration findFirstOrThrow
   */
  export type CourseRegistrationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseRegistration
     */
    select?: CourseRegistrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseRegistration
     */
    omit?: CourseRegistrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseRegistrationInclude<ExtArgs> | null
    /**
     * Filter, which CourseRegistration to fetch.
     */
    where?: CourseRegistrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CourseRegistrations to fetch.
     */
    orderBy?: CourseRegistrationOrderByWithRelationInput | CourseRegistrationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CourseRegistrations.
     */
    cursor?: CourseRegistrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CourseRegistrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CourseRegistrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CourseRegistrations.
     */
    distinct?: CourseRegistrationScalarFieldEnum | CourseRegistrationScalarFieldEnum[]
  }

  /**
   * CourseRegistration findMany
   */
  export type CourseRegistrationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseRegistration
     */
    select?: CourseRegistrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseRegistration
     */
    omit?: CourseRegistrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseRegistrationInclude<ExtArgs> | null
    /**
     * Filter, which CourseRegistrations to fetch.
     */
    where?: CourseRegistrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CourseRegistrations to fetch.
     */
    orderBy?: CourseRegistrationOrderByWithRelationInput | CourseRegistrationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CourseRegistrations.
     */
    cursor?: CourseRegistrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CourseRegistrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CourseRegistrations.
     */
    skip?: number
    distinct?: CourseRegistrationScalarFieldEnum | CourseRegistrationScalarFieldEnum[]
  }

  /**
   * CourseRegistration create
   */
  export type CourseRegistrationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseRegistration
     */
    select?: CourseRegistrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseRegistration
     */
    omit?: CourseRegistrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseRegistrationInclude<ExtArgs> | null
    /**
     * The data needed to create a CourseRegistration.
     */
    data: XOR<CourseRegistrationCreateInput, CourseRegistrationUncheckedCreateInput>
  }

  /**
   * CourseRegistration createMany
   */
  export type CourseRegistrationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CourseRegistrations.
     */
    data: CourseRegistrationCreateManyInput | CourseRegistrationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CourseRegistration createManyAndReturn
   */
  export type CourseRegistrationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseRegistration
     */
    select?: CourseRegistrationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CourseRegistration
     */
    omit?: CourseRegistrationOmit<ExtArgs> | null
    /**
     * The data used to create many CourseRegistrations.
     */
    data: CourseRegistrationCreateManyInput | CourseRegistrationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseRegistrationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CourseRegistration update
   */
  export type CourseRegistrationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseRegistration
     */
    select?: CourseRegistrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseRegistration
     */
    omit?: CourseRegistrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseRegistrationInclude<ExtArgs> | null
    /**
     * The data needed to update a CourseRegistration.
     */
    data: XOR<CourseRegistrationUpdateInput, CourseRegistrationUncheckedUpdateInput>
    /**
     * Choose, which CourseRegistration to update.
     */
    where: CourseRegistrationWhereUniqueInput
  }

  /**
   * CourseRegistration updateMany
   */
  export type CourseRegistrationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CourseRegistrations.
     */
    data: XOR<CourseRegistrationUpdateManyMutationInput, CourseRegistrationUncheckedUpdateManyInput>
    /**
     * Filter which CourseRegistrations to update
     */
    where?: CourseRegistrationWhereInput
    /**
     * Limit how many CourseRegistrations to update.
     */
    limit?: number
  }

  /**
   * CourseRegistration updateManyAndReturn
   */
  export type CourseRegistrationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseRegistration
     */
    select?: CourseRegistrationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CourseRegistration
     */
    omit?: CourseRegistrationOmit<ExtArgs> | null
    /**
     * The data used to update CourseRegistrations.
     */
    data: XOR<CourseRegistrationUpdateManyMutationInput, CourseRegistrationUncheckedUpdateManyInput>
    /**
     * Filter which CourseRegistrations to update
     */
    where?: CourseRegistrationWhereInput
    /**
     * Limit how many CourseRegistrations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseRegistrationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CourseRegistration upsert
   */
  export type CourseRegistrationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseRegistration
     */
    select?: CourseRegistrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseRegistration
     */
    omit?: CourseRegistrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseRegistrationInclude<ExtArgs> | null
    /**
     * The filter to search for the CourseRegistration to update in case it exists.
     */
    where: CourseRegistrationWhereUniqueInput
    /**
     * In case the CourseRegistration found by the `where` argument doesn't exist, create a new CourseRegistration with this data.
     */
    create: XOR<CourseRegistrationCreateInput, CourseRegistrationUncheckedCreateInput>
    /**
     * In case the CourseRegistration was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CourseRegistrationUpdateInput, CourseRegistrationUncheckedUpdateInput>
  }

  /**
   * CourseRegistration delete
   */
  export type CourseRegistrationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseRegistration
     */
    select?: CourseRegistrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseRegistration
     */
    omit?: CourseRegistrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseRegistrationInclude<ExtArgs> | null
    /**
     * Filter which CourseRegistration to delete.
     */
    where: CourseRegistrationWhereUniqueInput
  }

  /**
   * CourseRegistration deleteMany
   */
  export type CourseRegistrationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CourseRegistrations to delete
     */
    where?: CourseRegistrationWhereInput
    /**
     * Limit how many CourseRegistrations to delete.
     */
    limit?: number
  }

  /**
   * CourseRegistration without action
   */
  export type CourseRegistrationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseRegistration
     */
    select?: CourseRegistrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseRegistration
     */
    omit?: CourseRegistrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseRegistrationInclude<ExtArgs> | null
  }


  /**
   * Model ClickJackLab1
   */

  export type AggregateClickJackLab1 = {
    _count: ClickJackLab1CountAggregateOutputType | null
    _avg: ClickJackLab1AvgAggregateOutputType | null
    _sum: ClickJackLab1SumAggregateOutputType | null
    _min: ClickJackLab1MinAggregateOutputType | null
    _max: ClickJackLab1MaxAggregateOutputType | null
  }

  export type ClickJackLab1AvgAggregateOutputType = {
    id: number | null
  }

  export type ClickJackLab1SumAggregateOutputType = {
    id: number | null
  }

  export type ClickJackLab1MinAggregateOutputType = {
    id: number | null
    username: string | null
    password: string | null
    email: string | null
  }

  export type ClickJackLab1MaxAggregateOutputType = {
    id: number | null
    username: string | null
    password: string | null
    email: string | null
  }

  export type ClickJackLab1CountAggregateOutputType = {
    id: number
    username: number
    password: number
    email: number
    _all: number
  }


  export type ClickJackLab1AvgAggregateInputType = {
    id?: true
  }

  export type ClickJackLab1SumAggregateInputType = {
    id?: true
  }

  export type ClickJackLab1MinAggregateInputType = {
    id?: true
    username?: true
    password?: true
    email?: true
  }

  export type ClickJackLab1MaxAggregateInputType = {
    id?: true
    username?: true
    password?: true
    email?: true
  }

  export type ClickJackLab1CountAggregateInputType = {
    id?: true
    username?: true
    password?: true
    email?: true
    _all?: true
  }

  export type ClickJackLab1AggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClickJackLab1 to aggregate.
     */
    where?: ClickJackLab1WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClickJackLab1s to fetch.
     */
    orderBy?: ClickJackLab1OrderByWithRelationInput | ClickJackLab1OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClickJackLab1WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClickJackLab1s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClickJackLab1s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ClickJackLab1s
    **/
    _count?: true | ClickJackLab1CountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClickJackLab1AvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClickJackLab1SumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClickJackLab1MinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClickJackLab1MaxAggregateInputType
  }

  export type GetClickJackLab1AggregateType<T extends ClickJackLab1AggregateArgs> = {
        [P in keyof T & keyof AggregateClickJackLab1]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClickJackLab1[P]>
      : GetScalarType<T[P], AggregateClickJackLab1[P]>
  }




  export type ClickJackLab1GroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClickJackLab1WhereInput
    orderBy?: ClickJackLab1OrderByWithAggregationInput | ClickJackLab1OrderByWithAggregationInput[]
    by: ClickJackLab1ScalarFieldEnum[] | ClickJackLab1ScalarFieldEnum
    having?: ClickJackLab1ScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClickJackLab1CountAggregateInputType | true
    _avg?: ClickJackLab1AvgAggregateInputType
    _sum?: ClickJackLab1SumAggregateInputType
    _min?: ClickJackLab1MinAggregateInputType
    _max?: ClickJackLab1MaxAggregateInputType
  }

  export type ClickJackLab1GroupByOutputType = {
    id: number
    username: string
    password: string
    email: string | null
    _count: ClickJackLab1CountAggregateOutputType | null
    _avg: ClickJackLab1AvgAggregateOutputType | null
    _sum: ClickJackLab1SumAggregateOutputType | null
    _min: ClickJackLab1MinAggregateOutputType | null
    _max: ClickJackLab1MaxAggregateOutputType | null
  }

  type GetClickJackLab1GroupByPayload<T extends ClickJackLab1GroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClickJackLab1GroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClickJackLab1GroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClickJackLab1GroupByOutputType[P]>
            : GetScalarType<T[P], ClickJackLab1GroupByOutputType[P]>
        }
      >
    >


  export type ClickJackLab1Select<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    password?: boolean
    email?: boolean
  }, ExtArgs["result"]["clickJackLab1"]>

  export type ClickJackLab1SelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    password?: boolean
    email?: boolean
  }, ExtArgs["result"]["clickJackLab1"]>

  export type ClickJackLab1SelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    password?: boolean
    email?: boolean
  }, ExtArgs["result"]["clickJackLab1"]>

  export type ClickJackLab1SelectScalar = {
    id?: boolean
    username?: boolean
    password?: boolean
    email?: boolean
  }

  export type ClickJackLab1Omit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "username" | "password" | "email", ExtArgs["result"]["clickJackLab1"]>

  export type $ClickJackLab1Payload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ClickJackLab1"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      username: string
      password: string
      email: string | null
    }, ExtArgs["result"]["clickJackLab1"]>
    composites: {}
  }

  type ClickJackLab1GetPayload<S extends boolean | null | undefined | ClickJackLab1DefaultArgs> = $Result.GetResult<Prisma.$ClickJackLab1Payload, S>

  type ClickJackLab1CountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ClickJackLab1FindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ClickJackLab1CountAggregateInputType | true
    }

  export interface ClickJackLab1Delegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ClickJackLab1'], meta: { name: 'ClickJackLab1' } }
    /**
     * Find zero or one ClickJackLab1 that matches the filter.
     * @param {ClickJackLab1FindUniqueArgs} args - Arguments to find a ClickJackLab1
     * @example
     * // Get one ClickJackLab1
     * const clickJackLab1 = await prisma.clickJackLab1.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClickJackLab1FindUniqueArgs>(args: SelectSubset<T, ClickJackLab1FindUniqueArgs<ExtArgs>>): Prisma__ClickJackLab1Client<$Result.GetResult<Prisma.$ClickJackLab1Payload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one ClickJackLab1 that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ClickJackLab1FindUniqueOrThrowArgs} args - Arguments to find a ClickJackLab1
     * @example
     * // Get one ClickJackLab1
     * const clickJackLab1 = await prisma.clickJackLab1.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClickJackLab1FindUniqueOrThrowArgs>(args: SelectSubset<T, ClickJackLab1FindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClickJackLab1Client<$Result.GetResult<Prisma.$ClickJackLab1Payload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first ClickJackLab1 that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClickJackLab1FindFirstArgs} args - Arguments to find a ClickJackLab1
     * @example
     * // Get one ClickJackLab1
     * const clickJackLab1 = await prisma.clickJackLab1.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClickJackLab1FindFirstArgs>(args?: SelectSubset<T, ClickJackLab1FindFirstArgs<ExtArgs>>): Prisma__ClickJackLab1Client<$Result.GetResult<Prisma.$ClickJackLab1Payload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first ClickJackLab1 that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClickJackLab1FindFirstOrThrowArgs} args - Arguments to find a ClickJackLab1
     * @example
     * // Get one ClickJackLab1
     * const clickJackLab1 = await prisma.clickJackLab1.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClickJackLab1FindFirstOrThrowArgs>(args?: SelectSubset<T, ClickJackLab1FindFirstOrThrowArgs<ExtArgs>>): Prisma__ClickJackLab1Client<$Result.GetResult<Prisma.$ClickJackLab1Payload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more ClickJackLab1s that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClickJackLab1FindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ClickJackLab1s
     * const clickJackLab1s = await prisma.clickJackLab1.findMany()
     * 
     * // Get first 10 ClickJackLab1s
     * const clickJackLab1s = await prisma.clickJackLab1.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clickJackLab1WithIdOnly = await prisma.clickJackLab1.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ClickJackLab1FindManyArgs>(args?: SelectSubset<T, ClickJackLab1FindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClickJackLab1Payload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a ClickJackLab1.
     * @param {ClickJackLab1CreateArgs} args - Arguments to create a ClickJackLab1.
     * @example
     * // Create one ClickJackLab1
     * const ClickJackLab1 = await prisma.clickJackLab1.create({
     *   data: {
     *     // ... data to create a ClickJackLab1
     *   }
     * })
     * 
     */
    create<T extends ClickJackLab1CreateArgs>(args: SelectSubset<T, ClickJackLab1CreateArgs<ExtArgs>>): Prisma__ClickJackLab1Client<$Result.GetResult<Prisma.$ClickJackLab1Payload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many ClickJackLab1s.
     * @param {ClickJackLab1CreateManyArgs} args - Arguments to create many ClickJackLab1s.
     * @example
     * // Create many ClickJackLab1s
     * const clickJackLab1 = await prisma.clickJackLab1.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClickJackLab1CreateManyArgs>(args?: SelectSubset<T, ClickJackLab1CreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ClickJackLab1s and returns the data saved in the database.
     * @param {ClickJackLab1CreateManyAndReturnArgs} args - Arguments to create many ClickJackLab1s.
     * @example
     * // Create many ClickJackLab1s
     * const clickJackLab1 = await prisma.clickJackLab1.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ClickJackLab1s and only return the `id`
     * const clickJackLab1WithIdOnly = await prisma.clickJackLab1.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ClickJackLab1CreateManyAndReturnArgs>(args?: SelectSubset<T, ClickJackLab1CreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClickJackLab1Payload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a ClickJackLab1.
     * @param {ClickJackLab1DeleteArgs} args - Arguments to delete one ClickJackLab1.
     * @example
     * // Delete one ClickJackLab1
     * const ClickJackLab1 = await prisma.clickJackLab1.delete({
     *   where: {
     *     // ... filter to delete one ClickJackLab1
     *   }
     * })
     * 
     */
    delete<T extends ClickJackLab1DeleteArgs>(args: SelectSubset<T, ClickJackLab1DeleteArgs<ExtArgs>>): Prisma__ClickJackLab1Client<$Result.GetResult<Prisma.$ClickJackLab1Payload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one ClickJackLab1.
     * @param {ClickJackLab1UpdateArgs} args - Arguments to update one ClickJackLab1.
     * @example
     * // Update one ClickJackLab1
     * const clickJackLab1 = await prisma.clickJackLab1.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClickJackLab1UpdateArgs>(args: SelectSubset<T, ClickJackLab1UpdateArgs<ExtArgs>>): Prisma__ClickJackLab1Client<$Result.GetResult<Prisma.$ClickJackLab1Payload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more ClickJackLab1s.
     * @param {ClickJackLab1DeleteManyArgs} args - Arguments to filter ClickJackLab1s to delete.
     * @example
     * // Delete a few ClickJackLab1s
     * const { count } = await prisma.clickJackLab1.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClickJackLab1DeleteManyArgs>(args?: SelectSubset<T, ClickJackLab1DeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ClickJackLab1s.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClickJackLab1UpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ClickJackLab1s
     * const clickJackLab1 = await prisma.clickJackLab1.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClickJackLab1UpdateManyArgs>(args: SelectSubset<T, ClickJackLab1UpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ClickJackLab1s and returns the data updated in the database.
     * @param {ClickJackLab1UpdateManyAndReturnArgs} args - Arguments to update many ClickJackLab1s.
     * @example
     * // Update many ClickJackLab1s
     * const clickJackLab1 = await prisma.clickJackLab1.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ClickJackLab1s and only return the `id`
     * const clickJackLab1WithIdOnly = await prisma.clickJackLab1.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ClickJackLab1UpdateManyAndReturnArgs>(args: SelectSubset<T, ClickJackLab1UpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClickJackLab1Payload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one ClickJackLab1.
     * @param {ClickJackLab1UpsertArgs} args - Arguments to update or create a ClickJackLab1.
     * @example
     * // Update or create a ClickJackLab1
     * const clickJackLab1 = await prisma.clickJackLab1.upsert({
     *   create: {
     *     // ... data to create a ClickJackLab1
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ClickJackLab1 we want to update
     *   }
     * })
     */
    upsert<T extends ClickJackLab1UpsertArgs>(args: SelectSubset<T, ClickJackLab1UpsertArgs<ExtArgs>>): Prisma__ClickJackLab1Client<$Result.GetResult<Prisma.$ClickJackLab1Payload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of ClickJackLab1s.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClickJackLab1CountArgs} args - Arguments to filter ClickJackLab1s to count.
     * @example
     * // Count the number of ClickJackLab1s
     * const count = await prisma.clickJackLab1.count({
     *   where: {
     *     // ... the filter for the ClickJackLab1s we want to count
     *   }
     * })
    **/
    count<T extends ClickJackLab1CountArgs>(
      args?: Subset<T, ClickJackLab1CountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClickJackLab1CountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ClickJackLab1.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClickJackLab1AggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClickJackLab1AggregateArgs>(args: Subset<T, ClickJackLab1AggregateArgs>): Prisma.PrismaPromise<GetClickJackLab1AggregateType<T>>

    /**
     * Group by ClickJackLab1.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClickJackLab1GroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClickJackLab1GroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClickJackLab1GroupByArgs['orderBy'] }
        : { orderBy?: ClickJackLab1GroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClickJackLab1GroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClickJackLab1GroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ClickJackLab1 model
   */
  readonly fields: ClickJackLab1FieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ClickJackLab1.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClickJackLab1Client<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ClickJackLab1 model
   */ 
  interface ClickJackLab1FieldRefs {
    readonly id: FieldRef<"ClickJackLab1", 'Int'>
    readonly username: FieldRef<"ClickJackLab1", 'String'>
    readonly password: FieldRef<"ClickJackLab1", 'String'>
    readonly email: FieldRef<"ClickJackLab1", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ClickJackLab1 findUnique
   */
  export type ClickJackLab1FindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClickJackLab1
     */
    select?: ClickJackLab1Select<ExtArgs> | null
    /**
     * Omit specific fields from the ClickJackLab1
     */
    omit?: ClickJackLab1Omit<ExtArgs> | null
    /**
     * Filter, which ClickJackLab1 to fetch.
     */
    where: ClickJackLab1WhereUniqueInput
  }

  /**
   * ClickJackLab1 findUniqueOrThrow
   */
  export type ClickJackLab1FindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClickJackLab1
     */
    select?: ClickJackLab1Select<ExtArgs> | null
    /**
     * Omit specific fields from the ClickJackLab1
     */
    omit?: ClickJackLab1Omit<ExtArgs> | null
    /**
     * Filter, which ClickJackLab1 to fetch.
     */
    where: ClickJackLab1WhereUniqueInput
  }

  /**
   * ClickJackLab1 findFirst
   */
  export type ClickJackLab1FindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClickJackLab1
     */
    select?: ClickJackLab1Select<ExtArgs> | null
    /**
     * Omit specific fields from the ClickJackLab1
     */
    omit?: ClickJackLab1Omit<ExtArgs> | null
    /**
     * Filter, which ClickJackLab1 to fetch.
     */
    where?: ClickJackLab1WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClickJackLab1s to fetch.
     */
    orderBy?: ClickJackLab1OrderByWithRelationInput | ClickJackLab1OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClickJackLab1s.
     */
    cursor?: ClickJackLab1WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClickJackLab1s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClickJackLab1s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClickJackLab1s.
     */
    distinct?: ClickJackLab1ScalarFieldEnum | ClickJackLab1ScalarFieldEnum[]
  }

  /**
   * ClickJackLab1 findFirstOrThrow
   */
  export type ClickJackLab1FindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClickJackLab1
     */
    select?: ClickJackLab1Select<ExtArgs> | null
    /**
     * Omit specific fields from the ClickJackLab1
     */
    omit?: ClickJackLab1Omit<ExtArgs> | null
    /**
     * Filter, which ClickJackLab1 to fetch.
     */
    where?: ClickJackLab1WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClickJackLab1s to fetch.
     */
    orderBy?: ClickJackLab1OrderByWithRelationInput | ClickJackLab1OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClickJackLab1s.
     */
    cursor?: ClickJackLab1WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClickJackLab1s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClickJackLab1s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClickJackLab1s.
     */
    distinct?: ClickJackLab1ScalarFieldEnum | ClickJackLab1ScalarFieldEnum[]
  }

  /**
   * ClickJackLab1 findMany
   */
  export type ClickJackLab1FindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClickJackLab1
     */
    select?: ClickJackLab1Select<ExtArgs> | null
    /**
     * Omit specific fields from the ClickJackLab1
     */
    omit?: ClickJackLab1Omit<ExtArgs> | null
    /**
     * Filter, which ClickJackLab1s to fetch.
     */
    where?: ClickJackLab1WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClickJackLab1s to fetch.
     */
    orderBy?: ClickJackLab1OrderByWithRelationInput | ClickJackLab1OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ClickJackLab1s.
     */
    cursor?: ClickJackLab1WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClickJackLab1s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClickJackLab1s.
     */
    skip?: number
    distinct?: ClickJackLab1ScalarFieldEnum | ClickJackLab1ScalarFieldEnum[]
  }

  /**
   * ClickJackLab1 create
   */
  export type ClickJackLab1CreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClickJackLab1
     */
    select?: ClickJackLab1Select<ExtArgs> | null
    /**
     * Omit specific fields from the ClickJackLab1
     */
    omit?: ClickJackLab1Omit<ExtArgs> | null
    /**
     * The data needed to create a ClickJackLab1.
     */
    data: XOR<ClickJackLab1CreateInput, ClickJackLab1UncheckedCreateInput>
  }

  /**
   * ClickJackLab1 createMany
   */
  export type ClickJackLab1CreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ClickJackLab1s.
     */
    data: ClickJackLab1CreateManyInput | ClickJackLab1CreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ClickJackLab1 createManyAndReturn
   */
  export type ClickJackLab1CreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClickJackLab1
     */
    select?: ClickJackLab1SelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ClickJackLab1
     */
    omit?: ClickJackLab1Omit<ExtArgs> | null
    /**
     * The data used to create many ClickJackLab1s.
     */
    data: ClickJackLab1CreateManyInput | ClickJackLab1CreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ClickJackLab1 update
   */
  export type ClickJackLab1UpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClickJackLab1
     */
    select?: ClickJackLab1Select<ExtArgs> | null
    /**
     * Omit specific fields from the ClickJackLab1
     */
    omit?: ClickJackLab1Omit<ExtArgs> | null
    /**
     * The data needed to update a ClickJackLab1.
     */
    data: XOR<ClickJackLab1UpdateInput, ClickJackLab1UncheckedUpdateInput>
    /**
     * Choose, which ClickJackLab1 to update.
     */
    where: ClickJackLab1WhereUniqueInput
  }

  /**
   * ClickJackLab1 updateMany
   */
  export type ClickJackLab1UpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ClickJackLab1s.
     */
    data: XOR<ClickJackLab1UpdateManyMutationInput, ClickJackLab1UncheckedUpdateManyInput>
    /**
     * Filter which ClickJackLab1s to update
     */
    where?: ClickJackLab1WhereInput
    /**
     * Limit how many ClickJackLab1s to update.
     */
    limit?: number
  }

  /**
   * ClickJackLab1 updateManyAndReturn
   */
  export type ClickJackLab1UpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClickJackLab1
     */
    select?: ClickJackLab1SelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ClickJackLab1
     */
    omit?: ClickJackLab1Omit<ExtArgs> | null
    /**
     * The data used to update ClickJackLab1s.
     */
    data: XOR<ClickJackLab1UpdateManyMutationInput, ClickJackLab1UncheckedUpdateManyInput>
    /**
     * Filter which ClickJackLab1s to update
     */
    where?: ClickJackLab1WhereInput
    /**
     * Limit how many ClickJackLab1s to update.
     */
    limit?: number
  }

  /**
   * ClickJackLab1 upsert
   */
  export type ClickJackLab1UpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClickJackLab1
     */
    select?: ClickJackLab1Select<ExtArgs> | null
    /**
     * Omit specific fields from the ClickJackLab1
     */
    omit?: ClickJackLab1Omit<ExtArgs> | null
    /**
     * The filter to search for the ClickJackLab1 to update in case it exists.
     */
    where: ClickJackLab1WhereUniqueInput
    /**
     * In case the ClickJackLab1 found by the `where` argument doesn't exist, create a new ClickJackLab1 with this data.
     */
    create: XOR<ClickJackLab1CreateInput, ClickJackLab1UncheckedCreateInput>
    /**
     * In case the ClickJackLab1 was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClickJackLab1UpdateInput, ClickJackLab1UncheckedUpdateInput>
  }

  /**
   * ClickJackLab1 delete
   */
  export type ClickJackLab1DeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClickJackLab1
     */
    select?: ClickJackLab1Select<ExtArgs> | null
    /**
     * Omit specific fields from the ClickJackLab1
     */
    omit?: ClickJackLab1Omit<ExtArgs> | null
    /**
     * Filter which ClickJackLab1 to delete.
     */
    where: ClickJackLab1WhereUniqueInput
  }

  /**
   * ClickJackLab1 deleteMany
   */
  export type ClickJackLab1DeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClickJackLab1s to delete
     */
    where?: ClickJackLab1WhereInput
    /**
     * Limit how many ClickJackLab1s to delete.
     */
    limit?: number
  }

  /**
   * ClickJackLab1 without action
   */
  export type ClickJackLab1DefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClickJackLab1
     */
    select?: ClickJackLab1Select<ExtArgs> | null
    /**
     * Omit specific fields from the ClickJackLab1
     */
    omit?: ClickJackLab1Omit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    name: 'name',
    email: 'email',
    password: 'password',
    isVerified: 'isVerified',
    role: 'role',
    token: 'token',
    address: 'address',
    birthday: 'birthday',
    phoneNum: 'phoneNum'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ImageScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    name: 'name',
    path: 'path',
    mimetype: 'mimetype',
    userId: 'userId'
  };

  export type ImageScalarFieldEnum = (typeof ImageScalarFieldEnum)[keyof typeof ImageScalarFieldEnum]


  export const ValidationNumberScalarFieldEnum: {
    id: 'id',
    number: 'number',
    createdAt: 'createdAt',
    expiration: 'expiration',
    isVerified: 'isVerified',
    userId: 'userId'
  };

  export type ValidationNumberScalarFieldEnum = (typeof ValidationNumberScalarFieldEnum)[keyof typeof ValidationNumberScalarFieldEnum]


  export const UserForsqlInjectionScalarFieldEnum: {
    id: 'id',
    username: 'username',
    password: 'password'
  };

  export type UserForsqlInjectionScalarFieldEnum = (typeof UserForsqlInjectionScalarFieldEnum)[keyof typeof UserForsqlInjectionScalarFieldEnum]


  export const UserForXSSScalarFieldEnum: {
    id: 'id',
    email: 'email'
  };

  export type UserForXSSScalarFieldEnum = (typeof UserForXSSScalarFieldEnum)[keyof typeof UserForXSSScalarFieldEnum]


  export const FileScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    name: 'name',
    path: 'path',
    mimetype: 'mimetype',
    userId: 'userId'
  };

  export type FileScalarFieldEnum = (typeof FileScalarFieldEnum)[keyof typeof FileScalarFieldEnum]


  export const Lab1IDORSScalarFieldEnum: {
    id: 'id',
    path: 'path'
  };

  export type Lab1IDORSScalarFieldEnum = (typeof Lab1IDORSScalarFieldEnum)[keyof typeof Lab1IDORSScalarFieldEnum]


  export const Lab2IDORSScalarFieldEnum: {
    id: 'id',
    balance: 'balance'
  };

  export type Lab2IDORSScalarFieldEnum = (typeof Lab2IDORSScalarFieldEnum)[keyof typeof Lab2IDORSScalarFieldEnum]


  export const Lab3IDORSScalarFieldEnum: {
    id: 'id',
    name: 'name',
    balance: 'balance'
  };

  export type Lab3IDORSScalarFieldEnum = (typeof Lab3IDORSScalarFieldEnum)[keyof typeof Lab3IDORSScalarFieldEnum]


  export const PostScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    content: 'content',
    userId: 'userId'
  };

  export type PostScalarFieldEnum = (typeof PostScalarFieldEnum)[keyof typeof PostScalarFieldEnum]


  export const Lab2sqlScalarFieldEnum: {
    id: 'id',
    category: 'category',
    released: 'released'
  };

  export type Lab2sqlScalarFieldEnum = (typeof Lab2sqlScalarFieldEnum)[keyof typeof Lab2sqlScalarFieldEnum]


  export const Lab3sqlScalarFieldEnum: {
    id: 'id',
    name: 'name',
    price: 'price',
    category: 'category'
  };

  export type Lab3sqlScalarFieldEnum = (typeof Lab3sqlScalarFieldEnum)[keyof typeof Lab3sqlScalarFieldEnum]


  export const ACUserScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type ACUserScalarFieldEnum = (typeof ACUserScalarFieldEnum)[keyof typeof ACUserScalarFieldEnum]


  export const ApiHackingLabScalarFieldEnum: {
    id: 'id',
    username: 'username',
    password: 'password'
  };

  export type ApiHackingLabScalarFieldEnum = (typeof ApiHackingLabScalarFieldEnum)[keyof typeof ApiHackingLabScalarFieldEnum]


  export const ImageForApiHackingScalarFieldEnum: {
    id: 'id',
    name: 'name',
    path: 'path',
    userId: 'userId'
  };

  export type ImageForApiHackingScalarFieldEnum = (typeof ImageForApiHackingScalarFieldEnum)[keyof typeof ImageForApiHackingScalarFieldEnum]


  export const ProductToPathTraversalLab1ScalarFieldEnum: {
    id: 'id',
    name: 'name',
    path: 'path',
    description: 'description'
  };

  export type ProductToPathTraversalLab1ScalarFieldEnum = (typeof ProductToPathTraversalLab1ScalarFieldEnum)[keyof typeof ProductToPathTraversalLab1ScalarFieldEnum]


  export const BankAccountScalarFieldEnum: {
    id: 'id',
    accountNo: 'accountNo',
    accountPass: 'accountPass',
    accountBalance: 'accountBalance',
    accountName: 'accountName'
  };

  export type BankAccountScalarFieldEnum = (typeof BankAccountScalarFieldEnum)[keyof typeof BankAccountScalarFieldEnum]


  export const CSRFLab2ScalarFieldEnum: {
    id: 'id',
    authority: 'authority',
    password: 'password'
  };

  export type CSRFLab2ScalarFieldEnum = (typeof CSRFLab2ScalarFieldEnum)[keyof typeof CSRFLab2ScalarFieldEnum]


  export const CSRFLab3ScalarFieldEnum: {
    id: 'id',
    name: 'name',
    balance: 'balance'
  };

  export type CSRFLab3ScalarFieldEnum = (typeof CSRFLab3ScalarFieldEnum)[keyof typeof CSRFLab3ScalarFieldEnum]


  export const FileInclusionLab1ScalarFieldEnum: {
    id: 'id',
    name: 'name',
    path: 'path'
  };

  export type FileInclusionLab1ScalarFieldEnum = (typeof FileInclusionLab1ScalarFieldEnum)[keyof typeof FileInclusionLab1ScalarFieldEnum]


  export const CartItemScalarFieldEnum: {
    id: 'id',
    name: 'name',
    price: 'price'
  };

  export type CartItemScalarFieldEnum = (typeof CartItemScalarFieldEnum)[keyof typeof CartItemScalarFieldEnum]


  export const BurPSuiteLab3ScalarFieldEnum: {
    id: 'id',
    name: 'name',
    path: 'path',
    description: 'description'
  };

  export type BurPSuiteLab3ScalarFieldEnum = (typeof BurPSuiteLab3ScalarFieldEnum)[keyof typeof BurPSuiteLab3ScalarFieldEnum]


  export const CourseScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    image: 'image',
    link: 'link',
    state: 'state',
    topics: 'topics',
    difficulty: 'difficulty',
    favorite: 'favorite'
  };

  export type CourseScalarFieldEnum = (typeof CourseScalarFieldEnum)[keyof typeof CourseScalarFieldEnum]


  export const CourseRegistrationScalarFieldEnum: {
    id: 'id',
    courseId: 'courseId',
    createdAt: 'createdAt'
  };

  export type CourseRegistrationScalarFieldEnum = (typeof CourseRegistrationScalarFieldEnum)[keyof typeof CourseRegistrationScalarFieldEnum]


  export const ClickJackLab1ScalarFieldEnum: {
    id: 'id',
    username: 'username',
    password: 'password',
    email: 'email'
  };

  export type ClickJackLab1ScalarFieldEnum = (typeof ClickJackLab1ScalarFieldEnum)[keyof typeof ClickJackLab1ScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'BigInt'
   */
  export type BigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt'>
    


  /**
   * Reference to a field of type 'BigInt[]'
   */
  export type ListBigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    isVerified?: BoolFilter<"User"> | boolean
    role?: EnumRoleFilter<"User"> | $Enums.Role
    token?: StringNullableFilter<"User"> | string | null
    address?: StringNullableFilter<"User"> | string | null
    birthday?: StringNullableFilter<"User"> | string | null
    phoneNum?: StringNullableFilter<"User"> | string | null
    validationNumber?: XOR<ValidationNumberNullableScalarRelationFilter, ValidationNumberWhereInput> | null
    image?: XOR<ImageNullableScalarRelationFilter, ImageWhereInput> | null
    File?: FileListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    isVerified?: SortOrder
    role?: SortOrder
    token?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    birthday?: SortOrderInput | SortOrder
    phoneNum?: SortOrderInput | SortOrder
    validationNumber?: ValidationNumberOrderByWithRelationInput
    image?: ImageOrderByWithRelationInput
    File?: FileOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    password?: StringFilter<"User"> | string
    isVerified?: BoolFilter<"User"> | boolean
    role?: EnumRoleFilter<"User"> | $Enums.Role
    token?: StringNullableFilter<"User"> | string | null
    address?: StringNullableFilter<"User"> | string | null
    birthday?: StringNullableFilter<"User"> | string | null
    phoneNum?: StringNullableFilter<"User"> | string | null
    validationNumber?: XOR<ValidationNumberNullableScalarRelationFilter, ValidationNumberWhereInput> | null
    image?: XOR<ImageNullableScalarRelationFilter, ImageWhereInput> | null
    File?: FileListRelationFilter
  }, "id" | "name" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    isVerified?: SortOrder
    role?: SortOrder
    token?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    birthday?: SortOrderInput | SortOrder
    phoneNum?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    name?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    isVerified?: BoolWithAggregatesFilter<"User"> | boolean
    role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
    token?: StringNullableWithAggregatesFilter<"User"> | string | null
    address?: StringNullableWithAggregatesFilter<"User"> | string | null
    birthday?: StringNullableWithAggregatesFilter<"User"> | string | null
    phoneNum?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type ImageWhereInput = {
    AND?: ImageWhereInput | ImageWhereInput[]
    OR?: ImageWhereInput[]
    NOT?: ImageWhereInput | ImageWhereInput[]
    id?: StringFilter<"Image"> | string
    createdAt?: DateTimeFilter<"Image"> | Date | string
    name?: StringFilter<"Image"> | string
    path?: StringFilter<"Image"> | string
    mimetype?: StringFilter<"Image"> | string
    userId?: StringFilter<"Image"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type ImageOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    name?: SortOrder
    path?: SortOrder
    mimetype?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type ImageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: ImageWhereInput | ImageWhereInput[]
    OR?: ImageWhereInput[]
    NOT?: ImageWhereInput | ImageWhereInput[]
    createdAt?: DateTimeFilter<"Image"> | Date | string
    name?: StringFilter<"Image"> | string
    path?: StringFilter<"Image"> | string
    mimetype?: StringFilter<"Image"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type ImageOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    name?: SortOrder
    path?: SortOrder
    mimetype?: SortOrder
    userId?: SortOrder
    _count?: ImageCountOrderByAggregateInput
    _max?: ImageMaxOrderByAggregateInput
    _min?: ImageMinOrderByAggregateInput
  }

  export type ImageScalarWhereWithAggregatesInput = {
    AND?: ImageScalarWhereWithAggregatesInput | ImageScalarWhereWithAggregatesInput[]
    OR?: ImageScalarWhereWithAggregatesInput[]
    NOT?: ImageScalarWhereWithAggregatesInput | ImageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Image"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Image"> | Date | string
    name?: StringWithAggregatesFilter<"Image"> | string
    path?: StringWithAggregatesFilter<"Image"> | string
    mimetype?: StringWithAggregatesFilter<"Image"> | string
    userId?: StringWithAggregatesFilter<"Image"> | string
  }

  export type ValidationNumberWhereInput = {
    AND?: ValidationNumberWhereInput | ValidationNumberWhereInput[]
    OR?: ValidationNumberWhereInput[]
    NOT?: ValidationNumberWhereInput | ValidationNumberWhereInput[]
    id?: StringFilter<"ValidationNumber"> | string
    number?: StringFilter<"ValidationNumber"> | string
    createdAt?: DateTimeFilter<"ValidationNumber"> | Date | string
    expiration?: BigIntFilter<"ValidationNumber"> | bigint | number
    isVerified?: BoolFilter<"ValidationNumber"> | boolean
    userId?: StringFilter<"ValidationNumber"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type ValidationNumberOrderByWithRelationInput = {
    id?: SortOrder
    number?: SortOrder
    createdAt?: SortOrder
    expiration?: SortOrder
    isVerified?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type ValidationNumberWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: ValidationNumberWhereInput | ValidationNumberWhereInput[]
    OR?: ValidationNumberWhereInput[]
    NOT?: ValidationNumberWhereInput | ValidationNumberWhereInput[]
    number?: StringFilter<"ValidationNumber"> | string
    createdAt?: DateTimeFilter<"ValidationNumber"> | Date | string
    expiration?: BigIntFilter<"ValidationNumber"> | bigint | number
    isVerified?: BoolFilter<"ValidationNumber"> | boolean
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type ValidationNumberOrderByWithAggregationInput = {
    id?: SortOrder
    number?: SortOrder
    createdAt?: SortOrder
    expiration?: SortOrder
    isVerified?: SortOrder
    userId?: SortOrder
    _count?: ValidationNumberCountOrderByAggregateInput
    _avg?: ValidationNumberAvgOrderByAggregateInput
    _max?: ValidationNumberMaxOrderByAggregateInput
    _min?: ValidationNumberMinOrderByAggregateInput
    _sum?: ValidationNumberSumOrderByAggregateInput
  }

  export type ValidationNumberScalarWhereWithAggregatesInput = {
    AND?: ValidationNumberScalarWhereWithAggregatesInput | ValidationNumberScalarWhereWithAggregatesInput[]
    OR?: ValidationNumberScalarWhereWithAggregatesInput[]
    NOT?: ValidationNumberScalarWhereWithAggregatesInput | ValidationNumberScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ValidationNumber"> | string
    number?: StringWithAggregatesFilter<"ValidationNumber"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ValidationNumber"> | Date | string
    expiration?: BigIntWithAggregatesFilter<"ValidationNumber"> | bigint | number
    isVerified?: BoolWithAggregatesFilter<"ValidationNumber"> | boolean
    userId?: StringWithAggregatesFilter<"ValidationNumber"> | string
  }

  export type userForsqlInjectionWhereInput = {
    AND?: userForsqlInjectionWhereInput | userForsqlInjectionWhereInput[]
    OR?: userForsqlInjectionWhereInput[]
    NOT?: userForsqlInjectionWhereInput | userForsqlInjectionWhereInput[]
    id?: StringFilter<"userForsqlInjection"> | string
    username?: StringNullableFilter<"userForsqlInjection"> | string | null
    password?: StringFilter<"userForsqlInjection"> | string
  }

  export type userForsqlInjectionOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrderInput | SortOrder
    password?: SortOrder
  }

  export type userForsqlInjectionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    username?: string
    AND?: userForsqlInjectionWhereInput | userForsqlInjectionWhereInput[]
    OR?: userForsqlInjectionWhereInput[]
    NOT?: userForsqlInjectionWhereInput | userForsqlInjectionWhereInput[]
    password?: StringFilter<"userForsqlInjection"> | string
  }, "id" | "username">

  export type userForsqlInjectionOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrderInput | SortOrder
    password?: SortOrder
    _count?: userForsqlInjectionCountOrderByAggregateInput
    _max?: userForsqlInjectionMaxOrderByAggregateInput
    _min?: userForsqlInjectionMinOrderByAggregateInput
  }

  export type userForsqlInjectionScalarWhereWithAggregatesInput = {
    AND?: userForsqlInjectionScalarWhereWithAggregatesInput | userForsqlInjectionScalarWhereWithAggregatesInput[]
    OR?: userForsqlInjectionScalarWhereWithAggregatesInput[]
    NOT?: userForsqlInjectionScalarWhereWithAggregatesInput | userForsqlInjectionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"userForsqlInjection"> | string
    username?: StringNullableWithAggregatesFilter<"userForsqlInjection"> | string | null
    password?: StringWithAggregatesFilter<"userForsqlInjection"> | string
  }

  export type userForXSSWhereInput = {
    AND?: userForXSSWhereInput | userForXSSWhereInput[]
    OR?: userForXSSWhereInput[]
    NOT?: userForXSSWhereInput | userForXSSWhereInput[]
    id?: StringFilter<"userForXSS"> | string
    email?: StringFilter<"userForXSS"> | string
    posts?: PostListRelationFilter
  }

  export type userForXSSOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    posts?: PostOrderByRelationAggregateInput
  }

  export type userForXSSWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: userForXSSWhereInput | userForXSSWhereInput[]
    OR?: userForXSSWhereInput[]
    NOT?: userForXSSWhereInput | userForXSSWhereInput[]
    posts?: PostListRelationFilter
  }, "id" | "email">

  export type userForXSSOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    _count?: userForXSSCountOrderByAggregateInput
    _max?: userForXSSMaxOrderByAggregateInput
    _min?: userForXSSMinOrderByAggregateInput
  }

  export type userForXSSScalarWhereWithAggregatesInput = {
    AND?: userForXSSScalarWhereWithAggregatesInput | userForXSSScalarWhereWithAggregatesInput[]
    OR?: userForXSSScalarWhereWithAggregatesInput[]
    NOT?: userForXSSScalarWhereWithAggregatesInput | userForXSSScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"userForXSS"> | string
    email?: StringWithAggregatesFilter<"userForXSS"> | string
  }

  export type FileWhereInput = {
    AND?: FileWhereInput | FileWhereInput[]
    OR?: FileWhereInput[]
    NOT?: FileWhereInput | FileWhereInput[]
    id?: StringFilter<"File"> | string
    createdAt?: DateTimeFilter<"File"> | Date | string
    name?: StringFilter<"File"> | string
    path?: StringFilter<"File"> | string
    mimetype?: StringFilter<"File"> | string
    userId?: StringFilter<"File"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type FileOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    name?: SortOrder
    path?: SortOrder
    mimetype?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type FileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FileWhereInput | FileWhereInput[]
    OR?: FileWhereInput[]
    NOT?: FileWhereInput | FileWhereInput[]
    createdAt?: DateTimeFilter<"File"> | Date | string
    name?: StringFilter<"File"> | string
    path?: StringFilter<"File"> | string
    mimetype?: StringFilter<"File"> | string
    userId?: StringFilter<"File"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type FileOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    name?: SortOrder
    path?: SortOrder
    mimetype?: SortOrder
    userId?: SortOrder
    _count?: FileCountOrderByAggregateInput
    _max?: FileMaxOrderByAggregateInput
    _min?: FileMinOrderByAggregateInput
  }

  export type FileScalarWhereWithAggregatesInput = {
    AND?: FileScalarWhereWithAggregatesInput | FileScalarWhereWithAggregatesInput[]
    OR?: FileScalarWhereWithAggregatesInput[]
    NOT?: FileScalarWhereWithAggregatesInput | FileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"File"> | string
    createdAt?: DateTimeWithAggregatesFilter<"File"> | Date | string
    name?: StringWithAggregatesFilter<"File"> | string
    path?: StringWithAggregatesFilter<"File"> | string
    mimetype?: StringWithAggregatesFilter<"File"> | string
    userId?: StringWithAggregatesFilter<"File"> | string
  }

  export type Lab1IDORSWhereInput = {
    AND?: Lab1IDORSWhereInput | Lab1IDORSWhereInput[]
    OR?: Lab1IDORSWhereInput[]
    NOT?: Lab1IDORSWhereInput | Lab1IDORSWhereInput[]
    id?: IntFilter<"Lab1IDORS"> | number
    path?: StringNullableFilter<"Lab1IDORS"> | string | null
  }

  export type Lab1IDORSOrderByWithRelationInput = {
    id?: SortOrder
    path?: SortOrderInput | SortOrder
  }

  export type Lab1IDORSWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: Lab1IDORSWhereInput | Lab1IDORSWhereInput[]
    OR?: Lab1IDORSWhereInput[]
    NOT?: Lab1IDORSWhereInput | Lab1IDORSWhereInput[]
    path?: StringNullableFilter<"Lab1IDORS"> | string | null
  }, "id">

  export type Lab1IDORSOrderByWithAggregationInput = {
    id?: SortOrder
    path?: SortOrderInput | SortOrder
    _count?: Lab1IDORSCountOrderByAggregateInput
    _avg?: Lab1IDORSAvgOrderByAggregateInput
    _max?: Lab1IDORSMaxOrderByAggregateInput
    _min?: Lab1IDORSMinOrderByAggregateInput
    _sum?: Lab1IDORSSumOrderByAggregateInput
  }

  export type Lab1IDORSScalarWhereWithAggregatesInput = {
    AND?: Lab1IDORSScalarWhereWithAggregatesInput | Lab1IDORSScalarWhereWithAggregatesInput[]
    OR?: Lab1IDORSScalarWhereWithAggregatesInput[]
    NOT?: Lab1IDORSScalarWhereWithAggregatesInput | Lab1IDORSScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Lab1IDORS"> | number
    path?: StringNullableWithAggregatesFilter<"Lab1IDORS"> | string | null
  }

  export type Lab2IDORSWhereInput = {
    AND?: Lab2IDORSWhereInput | Lab2IDORSWhereInput[]
    OR?: Lab2IDORSWhereInput[]
    NOT?: Lab2IDORSWhereInput | Lab2IDORSWhereInput[]
    id?: IntFilter<"Lab2IDORS"> | number
    balance?: IntFilter<"Lab2IDORS"> | number
  }

  export type Lab2IDORSOrderByWithRelationInput = {
    id?: SortOrder
    balance?: SortOrder
  }

  export type Lab2IDORSWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: Lab2IDORSWhereInput | Lab2IDORSWhereInput[]
    OR?: Lab2IDORSWhereInput[]
    NOT?: Lab2IDORSWhereInput | Lab2IDORSWhereInput[]
    balance?: IntFilter<"Lab2IDORS"> | number
  }, "id">

  export type Lab2IDORSOrderByWithAggregationInput = {
    id?: SortOrder
    balance?: SortOrder
    _count?: Lab2IDORSCountOrderByAggregateInput
    _avg?: Lab2IDORSAvgOrderByAggregateInput
    _max?: Lab2IDORSMaxOrderByAggregateInput
    _min?: Lab2IDORSMinOrderByAggregateInput
    _sum?: Lab2IDORSSumOrderByAggregateInput
  }

  export type Lab2IDORSScalarWhereWithAggregatesInput = {
    AND?: Lab2IDORSScalarWhereWithAggregatesInput | Lab2IDORSScalarWhereWithAggregatesInput[]
    OR?: Lab2IDORSScalarWhereWithAggregatesInput[]
    NOT?: Lab2IDORSScalarWhereWithAggregatesInput | Lab2IDORSScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Lab2IDORS"> | number
    balance?: IntWithAggregatesFilter<"Lab2IDORS"> | number
  }

  export type Lab3IDORSWhereInput = {
    AND?: Lab3IDORSWhereInput | Lab3IDORSWhereInput[]
    OR?: Lab3IDORSWhereInput[]
    NOT?: Lab3IDORSWhereInput | Lab3IDORSWhereInput[]
    id?: IntFilter<"Lab3IDORS"> | number
    name?: StringFilter<"Lab3IDORS"> | string
    balance?: IntFilter<"Lab3IDORS"> | number
  }

  export type Lab3IDORSOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    balance?: SortOrder
  }

  export type Lab3IDORSWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: Lab3IDORSWhereInput | Lab3IDORSWhereInput[]
    OR?: Lab3IDORSWhereInput[]
    NOT?: Lab3IDORSWhereInput | Lab3IDORSWhereInput[]
    name?: StringFilter<"Lab3IDORS"> | string
    balance?: IntFilter<"Lab3IDORS"> | number
  }, "id">

  export type Lab3IDORSOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    balance?: SortOrder
    _count?: Lab3IDORSCountOrderByAggregateInput
    _avg?: Lab3IDORSAvgOrderByAggregateInput
    _max?: Lab3IDORSMaxOrderByAggregateInput
    _min?: Lab3IDORSMinOrderByAggregateInput
    _sum?: Lab3IDORSSumOrderByAggregateInput
  }

  export type Lab3IDORSScalarWhereWithAggregatesInput = {
    AND?: Lab3IDORSScalarWhereWithAggregatesInput | Lab3IDORSScalarWhereWithAggregatesInput[]
    OR?: Lab3IDORSScalarWhereWithAggregatesInput[]
    NOT?: Lab3IDORSScalarWhereWithAggregatesInput | Lab3IDORSScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Lab3IDORS"> | number
    name?: StringWithAggregatesFilter<"Lab3IDORS"> | string
    balance?: IntWithAggregatesFilter<"Lab3IDORS"> | number
  }

  export type PostWhereInput = {
    AND?: PostWhereInput | PostWhereInput[]
    OR?: PostWhereInput[]
    NOT?: PostWhereInput | PostWhereInput[]
    id?: StringFilter<"Post"> | string
    createdAt?: DateTimeFilter<"Post"> | Date | string
    updatedAt?: DateTimeFilter<"Post"> | Date | string
    content?: StringFilter<"Post"> | string
    userId?: StringFilter<"Post"> | string
    user?: XOR<UserForXSSScalarRelationFilter, userForXSSWhereInput>
  }

  export type PostOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    content?: SortOrder
    userId?: SortOrder
    user?: userForXSSOrderByWithRelationInput
  }

  export type PostWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PostWhereInput | PostWhereInput[]
    OR?: PostWhereInput[]
    NOT?: PostWhereInput | PostWhereInput[]
    createdAt?: DateTimeFilter<"Post"> | Date | string
    updatedAt?: DateTimeFilter<"Post"> | Date | string
    content?: StringFilter<"Post"> | string
    userId?: StringFilter<"Post"> | string
    user?: XOR<UserForXSSScalarRelationFilter, userForXSSWhereInput>
  }, "id">

  export type PostOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    content?: SortOrder
    userId?: SortOrder
    _count?: PostCountOrderByAggregateInput
    _max?: PostMaxOrderByAggregateInput
    _min?: PostMinOrderByAggregateInput
  }

  export type PostScalarWhereWithAggregatesInput = {
    AND?: PostScalarWhereWithAggregatesInput | PostScalarWhereWithAggregatesInput[]
    OR?: PostScalarWhereWithAggregatesInput[]
    NOT?: PostScalarWhereWithAggregatesInput | PostScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Post"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Post"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Post"> | Date | string
    content?: StringWithAggregatesFilter<"Post"> | string
    userId?: StringWithAggregatesFilter<"Post"> | string
  }

  export type lab2sqlWhereInput = {
    AND?: lab2sqlWhereInput | lab2sqlWhereInput[]
    OR?: lab2sqlWhereInput[]
    NOT?: lab2sqlWhereInput | lab2sqlWhereInput[]
    id?: StringFilter<"lab2sql"> | string
    category?: StringNullableFilter<"lab2sql"> | string | null
    released?: StringNullableFilter<"lab2sql"> | string | null
  }

  export type lab2sqlOrderByWithRelationInput = {
    id?: SortOrder
    category?: SortOrderInput | SortOrder
    released?: SortOrderInput | SortOrder
  }

  export type lab2sqlWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: lab2sqlWhereInput | lab2sqlWhereInput[]
    OR?: lab2sqlWhereInput[]
    NOT?: lab2sqlWhereInput | lab2sqlWhereInput[]
    category?: StringNullableFilter<"lab2sql"> | string | null
    released?: StringNullableFilter<"lab2sql"> | string | null
  }, "id">

  export type lab2sqlOrderByWithAggregationInput = {
    id?: SortOrder
    category?: SortOrderInput | SortOrder
    released?: SortOrderInput | SortOrder
    _count?: lab2sqlCountOrderByAggregateInput
    _max?: lab2sqlMaxOrderByAggregateInput
    _min?: lab2sqlMinOrderByAggregateInput
  }

  export type lab2sqlScalarWhereWithAggregatesInput = {
    AND?: lab2sqlScalarWhereWithAggregatesInput | lab2sqlScalarWhereWithAggregatesInput[]
    OR?: lab2sqlScalarWhereWithAggregatesInput[]
    NOT?: lab2sqlScalarWhereWithAggregatesInput | lab2sqlScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"lab2sql"> | string
    category?: StringNullableWithAggregatesFilter<"lab2sql"> | string | null
    released?: StringNullableWithAggregatesFilter<"lab2sql"> | string | null
  }

  export type lab3sqlWhereInput = {
    AND?: lab3sqlWhereInput | lab3sqlWhereInput[]
    OR?: lab3sqlWhereInput[]
    NOT?: lab3sqlWhereInput | lab3sqlWhereInput[]
    id?: StringFilter<"lab3sql"> | string
    name?: StringNullableFilter<"lab3sql"> | string | null
    price?: StringNullableFilter<"lab3sql"> | string | null
    category?: StringNullableFilter<"lab3sql"> | string | null
  }

  export type lab3sqlOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    price?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
  }

  export type lab3sqlWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: lab3sqlWhereInput | lab3sqlWhereInput[]
    OR?: lab3sqlWhereInput[]
    NOT?: lab3sqlWhereInput | lab3sqlWhereInput[]
    name?: StringNullableFilter<"lab3sql"> | string | null
    price?: StringNullableFilter<"lab3sql"> | string | null
    category?: StringNullableFilter<"lab3sql"> | string | null
  }, "id">

  export type lab3sqlOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    price?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    _count?: lab3sqlCountOrderByAggregateInput
    _max?: lab3sqlMaxOrderByAggregateInput
    _min?: lab3sqlMinOrderByAggregateInput
  }

  export type lab3sqlScalarWhereWithAggregatesInput = {
    AND?: lab3sqlScalarWhereWithAggregatesInput | lab3sqlScalarWhereWithAggregatesInput[]
    OR?: lab3sqlScalarWhereWithAggregatesInput[]
    NOT?: lab3sqlScalarWhereWithAggregatesInput | lab3sqlScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"lab3sql"> | string
    name?: StringNullableWithAggregatesFilter<"lab3sql"> | string | null
    price?: StringNullableWithAggregatesFilter<"lab3sql"> | string | null
    category?: StringNullableWithAggregatesFilter<"lab3sql"> | string | null
  }

  export type ACUserWhereInput = {
    AND?: ACUserWhereInput | ACUserWhereInput[]
    OR?: ACUserWhereInput[]
    NOT?: ACUserWhereInput | ACUserWhereInput[]
    id?: IntFilter<"ACUser"> | number
    name?: StringFilter<"ACUser"> | string
  }

  export type ACUserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type ACUserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ACUserWhereInput | ACUserWhereInput[]
    OR?: ACUserWhereInput[]
    NOT?: ACUserWhereInput | ACUserWhereInput[]
    name?: StringFilter<"ACUser"> | string
  }, "id">

  export type ACUserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: ACUserCountOrderByAggregateInput
    _avg?: ACUserAvgOrderByAggregateInput
    _max?: ACUserMaxOrderByAggregateInput
    _min?: ACUserMinOrderByAggregateInput
    _sum?: ACUserSumOrderByAggregateInput
  }

  export type ACUserScalarWhereWithAggregatesInput = {
    AND?: ACUserScalarWhereWithAggregatesInput | ACUserScalarWhereWithAggregatesInput[]
    OR?: ACUserScalarWhereWithAggregatesInput[]
    NOT?: ACUserScalarWhereWithAggregatesInput | ACUserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ACUser"> | number
    name?: StringWithAggregatesFilter<"ACUser"> | string
  }

  export type apiHackingLabWhereInput = {
    AND?: apiHackingLabWhereInput | apiHackingLabWhereInput[]
    OR?: apiHackingLabWhereInput[]
    NOT?: apiHackingLabWhereInput | apiHackingLabWhereInput[]
    id?: IntFilter<"apiHackingLab"> | number
    username?: StringFilter<"apiHackingLab"> | string
    password?: StringFilter<"apiHackingLab"> | string
    image?: ImageForApiHackingListRelationFilter
  }

  export type apiHackingLabOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    image?: imageForApiHackingOrderByRelationAggregateInput
  }

  export type apiHackingLabWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    username?: string
    AND?: apiHackingLabWhereInput | apiHackingLabWhereInput[]
    OR?: apiHackingLabWhereInput[]
    NOT?: apiHackingLabWhereInput | apiHackingLabWhereInput[]
    password?: StringFilter<"apiHackingLab"> | string
    image?: ImageForApiHackingListRelationFilter
  }, "id" | "username">

  export type apiHackingLabOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    _count?: apiHackingLabCountOrderByAggregateInput
    _avg?: apiHackingLabAvgOrderByAggregateInput
    _max?: apiHackingLabMaxOrderByAggregateInput
    _min?: apiHackingLabMinOrderByAggregateInput
    _sum?: apiHackingLabSumOrderByAggregateInput
  }

  export type apiHackingLabScalarWhereWithAggregatesInput = {
    AND?: apiHackingLabScalarWhereWithAggregatesInput | apiHackingLabScalarWhereWithAggregatesInput[]
    OR?: apiHackingLabScalarWhereWithAggregatesInput[]
    NOT?: apiHackingLabScalarWhereWithAggregatesInput | apiHackingLabScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"apiHackingLab"> | number
    username?: StringWithAggregatesFilter<"apiHackingLab"> | string
    password?: StringWithAggregatesFilter<"apiHackingLab"> | string
  }

  export type imageForApiHackingWhereInput = {
    AND?: imageForApiHackingWhereInput | imageForApiHackingWhereInput[]
    OR?: imageForApiHackingWhereInput[]
    NOT?: imageForApiHackingWhereInput | imageForApiHackingWhereInput[]
    id?: IntFilter<"imageForApiHacking"> | number
    name?: StringFilter<"imageForApiHacking"> | string
    path?: StringFilter<"imageForApiHacking"> | string
    userId?: IntFilter<"imageForApiHacking"> | number
    user?: XOR<ApiHackingLabScalarRelationFilter, apiHackingLabWhereInput>
  }

  export type imageForApiHackingOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    path?: SortOrder
    userId?: SortOrder
    user?: apiHackingLabOrderByWithRelationInput
  }

  export type imageForApiHackingWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: imageForApiHackingWhereInput | imageForApiHackingWhereInput[]
    OR?: imageForApiHackingWhereInput[]
    NOT?: imageForApiHackingWhereInput | imageForApiHackingWhereInput[]
    name?: StringFilter<"imageForApiHacking"> | string
    path?: StringFilter<"imageForApiHacking"> | string
    userId?: IntFilter<"imageForApiHacking"> | number
    user?: XOR<ApiHackingLabScalarRelationFilter, apiHackingLabWhereInput>
  }, "id">

  export type imageForApiHackingOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    path?: SortOrder
    userId?: SortOrder
    _count?: imageForApiHackingCountOrderByAggregateInput
    _avg?: imageForApiHackingAvgOrderByAggregateInput
    _max?: imageForApiHackingMaxOrderByAggregateInput
    _min?: imageForApiHackingMinOrderByAggregateInput
    _sum?: imageForApiHackingSumOrderByAggregateInput
  }

  export type imageForApiHackingScalarWhereWithAggregatesInput = {
    AND?: imageForApiHackingScalarWhereWithAggregatesInput | imageForApiHackingScalarWhereWithAggregatesInput[]
    OR?: imageForApiHackingScalarWhereWithAggregatesInput[]
    NOT?: imageForApiHackingScalarWhereWithAggregatesInput | imageForApiHackingScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"imageForApiHacking"> | number
    name?: StringWithAggregatesFilter<"imageForApiHacking"> | string
    path?: StringWithAggregatesFilter<"imageForApiHacking"> | string
    userId?: IntWithAggregatesFilter<"imageForApiHacking"> | number
  }

  export type ProductToPathTraversalLab1WhereInput = {
    AND?: ProductToPathTraversalLab1WhereInput | ProductToPathTraversalLab1WhereInput[]
    OR?: ProductToPathTraversalLab1WhereInput[]
    NOT?: ProductToPathTraversalLab1WhereInput | ProductToPathTraversalLab1WhereInput[]
    id?: IntFilter<"ProductToPathTraversalLab1"> | number
    name?: StringNullableFilter<"ProductToPathTraversalLab1"> | string | null
    path?: StringFilter<"ProductToPathTraversalLab1"> | string
    description?: StringFilter<"ProductToPathTraversalLab1"> | string
  }

  export type ProductToPathTraversalLab1OrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    path?: SortOrder
    description?: SortOrder
  }

  export type ProductToPathTraversalLab1WhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ProductToPathTraversalLab1WhereInput | ProductToPathTraversalLab1WhereInput[]
    OR?: ProductToPathTraversalLab1WhereInput[]
    NOT?: ProductToPathTraversalLab1WhereInput | ProductToPathTraversalLab1WhereInput[]
    name?: StringNullableFilter<"ProductToPathTraversalLab1"> | string | null
    path?: StringFilter<"ProductToPathTraversalLab1"> | string
    description?: StringFilter<"ProductToPathTraversalLab1"> | string
  }, "id">

  export type ProductToPathTraversalLab1OrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    path?: SortOrder
    description?: SortOrder
    _count?: ProductToPathTraversalLab1CountOrderByAggregateInput
    _avg?: ProductToPathTraversalLab1AvgOrderByAggregateInput
    _max?: ProductToPathTraversalLab1MaxOrderByAggregateInput
    _min?: ProductToPathTraversalLab1MinOrderByAggregateInput
    _sum?: ProductToPathTraversalLab1SumOrderByAggregateInput
  }

  export type ProductToPathTraversalLab1ScalarWhereWithAggregatesInput = {
    AND?: ProductToPathTraversalLab1ScalarWhereWithAggregatesInput | ProductToPathTraversalLab1ScalarWhereWithAggregatesInput[]
    OR?: ProductToPathTraversalLab1ScalarWhereWithAggregatesInput[]
    NOT?: ProductToPathTraversalLab1ScalarWhereWithAggregatesInput | ProductToPathTraversalLab1ScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ProductToPathTraversalLab1"> | number
    name?: StringNullableWithAggregatesFilter<"ProductToPathTraversalLab1"> | string | null
    path?: StringWithAggregatesFilter<"ProductToPathTraversalLab1"> | string
    description?: StringWithAggregatesFilter<"ProductToPathTraversalLab1"> | string
  }

  export type BankAccountWhereInput = {
    AND?: BankAccountWhereInput | BankAccountWhereInput[]
    OR?: BankAccountWhereInput[]
    NOT?: BankAccountWhereInput | BankAccountWhereInput[]
    id?: IntFilter<"BankAccount"> | number
    accountNo?: StringFilter<"BankAccount"> | string
    accountPass?: StringFilter<"BankAccount"> | string
    accountBalance?: FloatFilter<"BankAccount"> | number
    accountName?: StringFilter<"BankAccount"> | string
  }

  export type BankAccountOrderByWithRelationInput = {
    id?: SortOrder
    accountNo?: SortOrder
    accountPass?: SortOrder
    accountBalance?: SortOrder
    accountName?: SortOrder
  }

  export type BankAccountWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    accountNo?: string
    AND?: BankAccountWhereInput | BankAccountWhereInput[]
    OR?: BankAccountWhereInput[]
    NOT?: BankAccountWhereInput | BankAccountWhereInput[]
    accountPass?: StringFilter<"BankAccount"> | string
    accountBalance?: FloatFilter<"BankAccount"> | number
    accountName?: StringFilter<"BankAccount"> | string
  }, "id" | "accountNo">

  export type BankAccountOrderByWithAggregationInput = {
    id?: SortOrder
    accountNo?: SortOrder
    accountPass?: SortOrder
    accountBalance?: SortOrder
    accountName?: SortOrder
    _count?: BankAccountCountOrderByAggregateInput
    _avg?: BankAccountAvgOrderByAggregateInput
    _max?: BankAccountMaxOrderByAggregateInput
    _min?: BankAccountMinOrderByAggregateInput
    _sum?: BankAccountSumOrderByAggregateInput
  }

  export type BankAccountScalarWhereWithAggregatesInput = {
    AND?: BankAccountScalarWhereWithAggregatesInput | BankAccountScalarWhereWithAggregatesInput[]
    OR?: BankAccountScalarWhereWithAggregatesInput[]
    NOT?: BankAccountScalarWhereWithAggregatesInput | BankAccountScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"BankAccount"> | number
    accountNo?: StringWithAggregatesFilter<"BankAccount"> | string
    accountPass?: StringWithAggregatesFilter<"BankAccount"> | string
    accountBalance?: FloatWithAggregatesFilter<"BankAccount"> | number
    accountName?: StringWithAggregatesFilter<"BankAccount"> | string
  }

  export type CSRFLab2WhereInput = {
    AND?: CSRFLab2WhereInput | CSRFLab2WhereInput[]
    OR?: CSRFLab2WhereInput[]
    NOT?: CSRFLab2WhereInput | CSRFLab2WhereInput[]
    id?: IntFilter<"CSRFLab2"> | number
    authority?: StringFilter<"CSRFLab2"> | string
    password?: StringFilter<"CSRFLab2"> | string
  }

  export type CSRFLab2OrderByWithRelationInput = {
    id?: SortOrder
    authority?: SortOrder
    password?: SortOrder
  }

  export type CSRFLab2WhereUniqueInput = Prisma.AtLeast<{
    id?: number
    authority?: string
    AND?: CSRFLab2WhereInput | CSRFLab2WhereInput[]
    OR?: CSRFLab2WhereInput[]
    NOT?: CSRFLab2WhereInput | CSRFLab2WhereInput[]
    password?: StringFilter<"CSRFLab2"> | string
  }, "id" | "authority">

  export type CSRFLab2OrderByWithAggregationInput = {
    id?: SortOrder
    authority?: SortOrder
    password?: SortOrder
    _count?: CSRFLab2CountOrderByAggregateInput
    _avg?: CSRFLab2AvgOrderByAggregateInput
    _max?: CSRFLab2MaxOrderByAggregateInput
    _min?: CSRFLab2MinOrderByAggregateInput
    _sum?: CSRFLab2SumOrderByAggregateInput
  }

  export type CSRFLab2ScalarWhereWithAggregatesInput = {
    AND?: CSRFLab2ScalarWhereWithAggregatesInput | CSRFLab2ScalarWhereWithAggregatesInput[]
    OR?: CSRFLab2ScalarWhereWithAggregatesInput[]
    NOT?: CSRFLab2ScalarWhereWithAggregatesInput | CSRFLab2ScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CSRFLab2"> | number
    authority?: StringWithAggregatesFilter<"CSRFLab2"> | string
    password?: StringWithAggregatesFilter<"CSRFLab2"> | string
  }

  export type CSRFLab3WhereInput = {
    AND?: CSRFLab3WhereInput | CSRFLab3WhereInput[]
    OR?: CSRFLab3WhereInput[]
    NOT?: CSRFLab3WhereInput | CSRFLab3WhereInput[]
    id?: IntFilter<"CSRFLab3"> | number
    name?: StringFilter<"CSRFLab3"> | string
    balance?: IntFilter<"CSRFLab3"> | number
  }

  export type CSRFLab3OrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    balance?: SortOrder
  }

  export type CSRFLab3WhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CSRFLab3WhereInput | CSRFLab3WhereInput[]
    OR?: CSRFLab3WhereInput[]
    NOT?: CSRFLab3WhereInput | CSRFLab3WhereInput[]
    name?: StringFilter<"CSRFLab3"> | string
    balance?: IntFilter<"CSRFLab3"> | number
  }, "id">

  export type CSRFLab3OrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    balance?: SortOrder
    _count?: CSRFLab3CountOrderByAggregateInput
    _avg?: CSRFLab3AvgOrderByAggregateInput
    _max?: CSRFLab3MaxOrderByAggregateInput
    _min?: CSRFLab3MinOrderByAggregateInput
    _sum?: CSRFLab3SumOrderByAggregateInput
  }

  export type CSRFLab3ScalarWhereWithAggregatesInput = {
    AND?: CSRFLab3ScalarWhereWithAggregatesInput | CSRFLab3ScalarWhereWithAggregatesInput[]
    OR?: CSRFLab3ScalarWhereWithAggregatesInput[]
    NOT?: CSRFLab3ScalarWhereWithAggregatesInput | CSRFLab3ScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CSRFLab3"> | number
    name?: StringWithAggregatesFilter<"CSRFLab3"> | string
    balance?: IntWithAggregatesFilter<"CSRFLab3"> | number
  }

  export type FileInclusionLab1WhereInput = {
    AND?: FileInclusionLab1WhereInput | FileInclusionLab1WhereInput[]
    OR?: FileInclusionLab1WhereInput[]
    NOT?: FileInclusionLab1WhereInput | FileInclusionLab1WhereInput[]
    id?: StringFilter<"FileInclusionLab1"> | string
    name?: StringFilter<"FileInclusionLab1"> | string
    path?: StringFilter<"FileInclusionLab1"> | string
  }

  export type FileInclusionLab1OrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    path?: SortOrder
  }

  export type FileInclusionLab1WhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: FileInclusionLab1WhereInput | FileInclusionLab1WhereInput[]
    OR?: FileInclusionLab1WhereInput[]
    NOT?: FileInclusionLab1WhereInput | FileInclusionLab1WhereInput[]
    path?: StringFilter<"FileInclusionLab1"> | string
  }, "id" | "name">

  export type FileInclusionLab1OrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    path?: SortOrder
    _count?: FileInclusionLab1CountOrderByAggregateInput
    _max?: FileInclusionLab1MaxOrderByAggregateInput
    _min?: FileInclusionLab1MinOrderByAggregateInput
  }

  export type FileInclusionLab1ScalarWhereWithAggregatesInput = {
    AND?: FileInclusionLab1ScalarWhereWithAggregatesInput | FileInclusionLab1ScalarWhereWithAggregatesInput[]
    OR?: FileInclusionLab1ScalarWhereWithAggregatesInput[]
    NOT?: FileInclusionLab1ScalarWhereWithAggregatesInput | FileInclusionLab1ScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FileInclusionLab1"> | string
    name?: StringWithAggregatesFilter<"FileInclusionLab1"> | string
    path?: StringWithAggregatesFilter<"FileInclusionLab1"> | string
  }

  export type CartItemWhereInput = {
    AND?: CartItemWhereInput | CartItemWhereInput[]
    OR?: CartItemWhereInput[]
    NOT?: CartItemWhereInput | CartItemWhereInput[]
    id?: IntFilter<"CartItem"> | number
    name?: StringFilter<"CartItem"> | string
    price?: IntFilter<"CartItem"> | number
  }

  export type CartItemOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
  }

  export type CartItemWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CartItemWhereInput | CartItemWhereInput[]
    OR?: CartItemWhereInput[]
    NOT?: CartItemWhereInput | CartItemWhereInput[]
    name?: StringFilter<"CartItem"> | string
    price?: IntFilter<"CartItem"> | number
  }, "id">

  export type CartItemOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    _count?: CartItemCountOrderByAggregateInput
    _avg?: CartItemAvgOrderByAggregateInput
    _max?: CartItemMaxOrderByAggregateInput
    _min?: CartItemMinOrderByAggregateInput
    _sum?: CartItemSumOrderByAggregateInput
  }

  export type CartItemScalarWhereWithAggregatesInput = {
    AND?: CartItemScalarWhereWithAggregatesInput | CartItemScalarWhereWithAggregatesInput[]
    OR?: CartItemScalarWhereWithAggregatesInput[]
    NOT?: CartItemScalarWhereWithAggregatesInput | CartItemScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CartItem"> | number
    name?: StringWithAggregatesFilter<"CartItem"> | string
    price?: IntWithAggregatesFilter<"CartItem"> | number
  }

  export type BurPSuiteLab3WhereInput = {
    AND?: BurPSuiteLab3WhereInput | BurPSuiteLab3WhereInput[]
    OR?: BurPSuiteLab3WhereInput[]
    NOT?: BurPSuiteLab3WhereInput | BurPSuiteLab3WhereInput[]
    id?: StringFilter<"BurPSuiteLab3"> | string
    name?: StringNullableFilter<"BurPSuiteLab3"> | string | null
    path?: StringNullableFilter<"BurPSuiteLab3"> | string | null
    description?: StringNullableFilter<"BurPSuiteLab3"> | string | null
  }

  export type BurPSuiteLab3OrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    path?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
  }

  export type BurPSuiteLab3WhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BurPSuiteLab3WhereInput | BurPSuiteLab3WhereInput[]
    OR?: BurPSuiteLab3WhereInput[]
    NOT?: BurPSuiteLab3WhereInput | BurPSuiteLab3WhereInput[]
    name?: StringNullableFilter<"BurPSuiteLab3"> | string | null
    path?: StringNullableFilter<"BurPSuiteLab3"> | string | null
    description?: StringNullableFilter<"BurPSuiteLab3"> | string | null
  }, "id">

  export type BurPSuiteLab3OrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    path?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    _count?: BurPSuiteLab3CountOrderByAggregateInput
    _max?: BurPSuiteLab3MaxOrderByAggregateInput
    _min?: BurPSuiteLab3MinOrderByAggregateInput
  }

  export type BurPSuiteLab3ScalarWhereWithAggregatesInput = {
    AND?: BurPSuiteLab3ScalarWhereWithAggregatesInput | BurPSuiteLab3ScalarWhereWithAggregatesInput[]
    OR?: BurPSuiteLab3ScalarWhereWithAggregatesInput[]
    NOT?: BurPSuiteLab3ScalarWhereWithAggregatesInput | BurPSuiteLab3ScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"BurPSuiteLab3"> | string
    name?: StringNullableWithAggregatesFilter<"BurPSuiteLab3"> | string | null
    path?: StringNullableWithAggregatesFilter<"BurPSuiteLab3"> | string | null
    description?: StringNullableWithAggregatesFilter<"BurPSuiteLab3"> | string | null
  }

  export type CourseWhereInput = {
    AND?: CourseWhereInput | CourseWhereInput[]
    OR?: CourseWhereInput[]
    NOT?: CourseWhereInput | CourseWhereInput[]
    id?: IntFilter<"Course"> | number
    title?: StringFilter<"Course"> | string
    description?: StringFilter<"Course"> | string
    image?: StringNullableFilter<"Course"> | string | null
    link?: StringNullableFilter<"Course"> | string | null
    state?: StringFilter<"Course"> | string
    topics?: StringNullableListFilter<"Course">
    difficulty?: StringFilter<"Course"> | string
    favorite?: BoolFilter<"Course"> | boolean
    registrations?: CourseRegistrationListRelationFilter
  }

  export type CourseOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    image?: SortOrderInput | SortOrder
    link?: SortOrderInput | SortOrder
    state?: SortOrder
    topics?: SortOrder
    difficulty?: SortOrder
    favorite?: SortOrder
    registrations?: CourseRegistrationOrderByRelationAggregateInput
  }

  export type CourseWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CourseWhereInput | CourseWhereInput[]
    OR?: CourseWhereInput[]
    NOT?: CourseWhereInput | CourseWhereInput[]
    title?: StringFilter<"Course"> | string
    description?: StringFilter<"Course"> | string
    image?: StringNullableFilter<"Course"> | string | null
    link?: StringNullableFilter<"Course"> | string | null
    state?: StringFilter<"Course"> | string
    topics?: StringNullableListFilter<"Course">
    difficulty?: StringFilter<"Course"> | string
    favorite?: BoolFilter<"Course"> | boolean
    registrations?: CourseRegistrationListRelationFilter
  }, "id">

  export type CourseOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    image?: SortOrderInput | SortOrder
    link?: SortOrderInput | SortOrder
    state?: SortOrder
    topics?: SortOrder
    difficulty?: SortOrder
    favorite?: SortOrder
    _count?: CourseCountOrderByAggregateInput
    _avg?: CourseAvgOrderByAggregateInput
    _max?: CourseMaxOrderByAggregateInput
    _min?: CourseMinOrderByAggregateInput
    _sum?: CourseSumOrderByAggregateInput
  }

  export type CourseScalarWhereWithAggregatesInput = {
    AND?: CourseScalarWhereWithAggregatesInput | CourseScalarWhereWithAggregatesInput[]
    OR?: CourseScalarWhereWithAggregatesInput[]
    NOT?: CourseScalarWhereWithAggregatesInput | CourseScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Course"> | number
    title?: StringWithAggregatesFilter<"Course"> | string
    description?: StringWithAggregatesFilter<"Course"> | string
    image?: StringNullableWithAggregatesFilter<"Course"> | string | null
    link?: StringNullableWithAggregatesFilter<"Course"> | string | null
    state?: StringWithAggregatesFilter<"Course"> | string
    topics?: StringNullableListFilter<"Course">
    difficulty?: StringWithAggregatesFilter<"Course"> | string
    favorite?: BoolWithAggregatesFilter<"Course"> | boolean
  }

  export type CourseRegistrationWhereInput = {
    AND?: CourseRegistrationWhereInput | CourseRegistrationWhereInput[]
    OR?: CourseRegistrationWhereInput[]
    NOT?: CourseRegistrationWhereInput | CourseRegistrationWhereInput[]
    id?: IntFilter<"CourseRegistration"> | number
    courseId?: IntFilter<"CourseRegistration"> | number
    createdAt?: DateTimeFilter<"CourseRegistration"> | Date | string
    course?: XOR<CourseScalarRelationFilter, CourseWhereInput>
  }

  export type CourseRegistrationOrderByWithRelationInput = {
    id?: SortOrder
    courseId?: SortOrder
    createdAt?: SortOrder
    course?: CourseOrderByWithRelationInput
  }

  export type CourseRegistrationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CourseRegistrationWhereInput | CourseRegistrationWhereInput[]
    OR?: CourseRegistrationWhereInput[]
    NOT?: CourseRegistrationWhereInput | CourseRegistrationWhereInput[]
    courseId?: IntFilter<"CourseRegistration"> | number
    createdAt?: DateTimeFilter<"CourseRegistration"> | Date | string
    course?: XOR<CourseScalarRelationFilter, CourseWhereInput>
  }, "id">

  export type CourseRegistrationOrderByWithAggregationInput = {
    id?: SortOrder
    courseId?: SortOrder
    createdAt?: SortOrder
    _count?: CourseRegistrationCountOrderByAggregateInput
    _avg?: CourseRegistrationAvgOrderByAggregateInput
    _max?: CourseRegistrationMaxOrderByAggregateInput
    _min?: CourseRegistrationMinOrderByAggregateInput
    _sum?: CourseRegistrationSumOrderByAggregateInput
  }

  export type CourseRegistrationScalarWhereWithAggregatesInput = {
    AND?: CourseRegistrationScalarWhereWithAggregatesInput | CourseRegistrationScalarWhereWithAggregatesInput[]
    OR?: CourseRegistrationScalarWhereWithAggregatesInput[]
    NOT?: CourseRegistrationScalarWhereWithAggregatesInput | CourseRegistrationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CourseRegistration"> | number
    courseId?: IntWithAggregatesFilter<"CourseRegistration"> | number
    createdAt?: DateTimeWithAggregatesFilter<"CourseRegistration"> | Date | string
  }

  export type ClickJackLab1WhereInput = {
    AND?: ClickJackLab1WhereInput | ClickJackLab1WhereInput[]
    OR?: ClickJackLab1WhereInput[]
    NOT?: ClickJackLab1WhereInput | ClickJackLab1WhereInput[]
    id?: IntFilter<"ClickJackLab1"> | number
    username?: StringFilter<"ClickJackLab1"> | string
    password?: StringFilter<"ClickJackLab1"> | string
    email?: StringNullableFilter<"ClickJackLab1"> | string | null
  }

  export type ClickJackLab1OrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    email?: SortOrderInput | SortOrder
  }

  export type ClickJackLab1WhereUniqueInput = Prisma.AtLeast<{
    id?: number
    username?: string
    AND?: ClickJackLab1WhereInput | ClickJackLab1WhereInput[]
    OR?: ClickJackLab1WhereInput[]
    NOT?: ClickJackLab1WhereInput | ClickJackLab1WhereInput[]
    password?: StringFilter<"ClickJackLab1"> | string
    email?: StringNullableFilter<"ClickJackLab1"> | string | null
  }, "id" | "username">

  export type ClickJackLab1OrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    email?: SortOrderInput | SortOrder
    _count?: ClickJackLab1CountOrderByAggregateInput
    _avg?: ClickJackLab1AvgOrderByAggregateInput
    _max?: ClickJackLab1MaxOrderByAggregateInput
    _min?: ClickJackLab1MinOrderByAggregateInput
    _sum?: ClickJackLab1SumOrderByAggregateInput
  }

  export type ClickJackLab1ScalarWhereWithAggregatesInput = {
    AND?: ClickJackLab1ScalarWhereWithAggregatesInput | ClickJackLab1ScalarWhereWithAggregatesInput[]
    OR?: ClickJackLab1ScalarWhereWithAggregatesInput[]
    NOT?: ClickJackLab1ScalarWhereWithAggregatesInput | ClickJackLab1ScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ClickJackLab1"> | number
    username?: StringWithAggregatesFilter<"ClickJackLab1"> | string
    password?: StringWithAggregatesFilter<"ClickJackLab1"> | string
    email?: StringNullableWithAggregatesFilter<"ClickJackLab1"> | string | null
  }

  export type UserCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    email: string
    password: string
    isVerified?: boolean
    role?: $Enums.Role
    token?: string | null
    address?: string | null
    birthday?: string | null
    phoneNum?: string | null
    validationNumber?: ValidationNumberCreateNestedOneWithoutUserInput
    image?: ImageCreateNestedOneWithoutUserInput
    File?: FileCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    email: string
    password: string
    isVerified?: boolean
    role?: $Enums.Role
    token?: string | null
    address?: string | null
    birthday?: string | null
    phoneNum?: string | null
    validationNumber?: ValidationNumberUncheckedCreateNestedOneWithoutUserInput
    image?: ImageUncheckedCreateNestedOneWithoutUserInput
    File?: FileUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    token?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNum?: NullableStringFieldUpdateOperationsInput | string | null
    validationNumber?: ValidationNumberUpdateOneWithoutUserNestedInput
    image?: ImageUpdateOneWithoutUserNestedInput
    File?: FileUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    token?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNum?: NullableStringFieldUpdateOperationsInput | string | null
    validationNumber?: ValidationNumberUncheckedUpdateOneWithoutUserNestedInput
    image?: ImageUncheckedUpdateOneWithoutUserNestedInput
    File?: FileUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    email: string
    password: string
    isVerified?: boolean
    role?: $Enums.Role
    token?: string | null
    address?: string | null
    birthday?: string | null
    phoneNum?: string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    token?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNum?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    token?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNum?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ImageCreateInput = {
    id?: string
    createdAt?: Date | string
    name: string
    path: string
    mimetype: string
    user: UserCreateNestedOneWithoutImageInput
  }

  export type ImageUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    name: string
    path: string
    mimetype: string
    userId: string
  }

  export type ImageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    mimetype?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutImageNestedInput
  }

  export type ImageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    mimetype?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ImageCreateManyInput = {
    id?: string
    createdAt?: Date | string
    name: string
    path: string
    mimetype: string
    userId: string
  }

  export type ImageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    mimetype?: StringFieldUpdateOperationsInput | string
  }

  export type ImageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    mimetype?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ValidationNumberCreateInput = {
    id?: string
    number: string
    createdAt?: Date | string
    expiration: bigint | number
    isVerified?: boolean
    user: UserCreateNestedOneWithoutValidationNumberInput
  }

  export type ValidationNumberUncheckedCreateInput = {
    id?: string
    number: string
    createdAt?: Date | string
    expiration: bigint | number
    isVerified?: boolean
    userId: string
  }

  export type ValidationNumberUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiration?: BigIntFieldUpdateOperationsInput | bigint | number
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutValidationNumberNestedInput
  }

  export type ValidationNumberUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiration?: BigIntFieldUpdateOperationsInput | bigint | number
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ValidationNumberCreateManyInput = {
    id?: string
    number: string
    createdAt?: Date | string
    expiration: bigint | number
    isVerified?: boolean
    userId: string
  }

  export type ValidationNumberUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiration?: BigIntFieldUpdateOperationsInput | bigint | number
    isVerified?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ValidationNumberUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiration?: BigIntFieldUpdateOperationsInput | bigint | number
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type userForsqlInjectionCreateInput = {
    id?: string
    username?: string | null
    password: string
  }

  export type userForsqlInjectionUncheckedCreateInput = {
    id?: string
    username?: string | null
    password: string
  }

  export type userForsqlInjectionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
  }

  export type userForsqlInjectionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
  }

  export type userForsqlInjectionCreateManyInput = {
    id?: string
    username?: string | null
    password: string
  }

  export type userForsqlInjectionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
  }

  export type userForsqlInjectionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
  }

  export type userForXSSCreateInput = {
    id?: string
    email: string
    posts?: PostCreateNestedManyWithoutUserInput
  }

  export type userForXSSUncheckedCreateInput = {
    id?: string
    email: string
    posts?: PostUncheckedCreateNestedManyWithoutUserInput
  }

  export type userForXSSUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    posts?: PostUpdateManyWithoutUserNestedInput
  }

  export type userForXSSUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    posts?: PostUncheckedUpdateManyWithoutUserNestedInput
  }

  export type userForXSSCreateManyInput = {
    id?: string
    email: string
  }

  export type userForXSSUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type userForXSSUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type FileCreateInput = {
    id?: string
    createdAt?: Date | string
    name: string
    path: string
    mimetype: string
    user: UserCreateNestedOneWithoutFileInput
  }

  export type FileUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    name: string
    path: string
    mimetype: string
    userId: string
  }

  export type FileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    mimetype?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutFileNestedInput
  }

  export type FileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    mimetype?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type FileCreateManyInput = {
    id?: string
    createdAt?: Date | string
    name: string
    path: string
    mimetype: string
    userId: string
  }

  export type FileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    mimetype?: StringFieldUpdateOperationsInput | string
  }

  export type FileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    mimetype?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type Lab1IDORSCreateInput = {
    path?: string | null
  }

  export type Lab1IDORSUncheckedCreateInput = {
    id?: number
    path?: string | null
  }

  export type Lab1IDORSUpdateInput = {
    path?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type Lab1IDORSUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    path?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type Lab1IDORSCreateManyInput = {
    id?: number
    path?: string | null
  }

  export type Lab1IDORSUpdateManyMutationInput = {
    path?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type Lab1IDORSUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    path?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type Lab2IDORSCreateInput = {
    id?: number
    balance?: number
  }

  export type Lab2IDORSUncheckedCreateInput = {
    id?: number
    balance?: number
  }

  export type Lab2IDORSUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    balance?: IntFieldUpdateOperationsInput | number
  }

  export type Lab2IDORSUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    balance?: IntFieldUpdateOperationsInput | number
  }

  export type Lab2IDORSCreateManyInput = {
    id?: number
    balance?: number
  }

  export type Lab2IDORSUpdateManyMutationInput = {
    id?: IntFieldUpdateOperationsInput | number
    balance?: IntFieldUpdateOperationsInput | number
  }

  export type Lab2IDORSUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    balance?: IntFieldUpdateOperationsInput | number
  }

  export type Lab3IDORSCreateInput = {
    name?: string
    balance?: number
  }

  export type Lab3IDORSUncheckedCreateInput = {
    id?: number
    name?: string
    balance?: number
  }

  export type Lab3IDORSUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    balance?: IntFieldUpdateOperationsInput | number
  }

  export type Lab3IDORSUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    balance?: IntFieldUpdateOperationsInput | number
  }

  export type Lab3IDORSCreateManyInput = {
    id?: number
    name?: string
    balance?: number
  }

  export type Lab3IDORSUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    balance?: IntFieldUpdateOperationsInput | number
  }

  export type Lab3IDORSUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    balance?: IntFieldUpdateOperationsInput | number
  }

  export type PostCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    content: string
    user: userForXSSCreateNestedOneWithoutPostsInput
  }

  export type PostUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    content: string
    userId: string
  }

  export type PostUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    user?: userForXSSUpdateOneRequiredWithoutPostsNestedInput
  }

  export type PostUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type PostCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    content: string
    userId: string
  }

  export type PostUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type PostUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type lab2sqlCreateInput = {
    id?: string
    category?: string | null
    released?: string | null
  }

  export type lab2sqlUncheckedCreateInput = {
    id?: string
    category?: string | null
    released?: string | null
  }

  export type lab2sqlUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    released?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type lab2sqlUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    released?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type lab2sqlCreateManyInput = {
    id?: string
    category?: string | null
    released?: string | null
  }

  export type lab2sqlUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    released?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type lab2sqlUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    released?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type lab3sqlCreateInput = {
    id?: string
    name?: string | null
    price?: string | null
    category?: string | null
  }

  export type lab3sqlUncheckedCreateInput = {
    id?: string
    name?: string | null
    price?: string | null
    category?: string | null
  }

  export type lab3sqlUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type lab3sqlUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type lab3sqlCreateManyInput = {
    id?: string
    name?: string | null
    price?: string | null
    category?: string | null
  }

  export type lab3sqlUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type lab3sqlUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ACUserCreateInput = {
    name: string
  }

  export type ACUserUncheckedCreateInput = {
    id?: number
    name: string
  }

  export type ACUserUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ACUserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ACUserCreateManyInput = {
    id?: number
    name: string
  }

  export type ACUserUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ACUserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type apiHackingLabCreateInput = {
    username: string
    password: string
    image?: imageForApiHackingCreateNestedManyWithoutUserInput
  }

  export type apiHackingLabUncheckedCreateInput = {
    id?: number
    username: string
    password: string
    image?: imageForApiHackingUncheckedCreateNestedManyWithoutUserInput
  }

  export type apiHackingLabUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: imageForApiHackingUpdateManyWithoutUserNestedInput
  }

  export type apiHackingLabUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: imageForApiHackingUncheckedUpdateManyWithoutUserNestedInput
  }

  export type apiHackingLabCreateManyInput = {
    id?: number
    username: string
    password: string
  }

  export type apiHackingLabUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type apiHackingLabUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type imageForApiHackingCreateInput = {
    name: string
    path: string
    user: apiHackingLabCreateNestedOneWithoutImageInput
  }

  export type imageForApiHackingUncheckedCreateInput = {
    id?: number
    name: string
    path: string
    userId: number
  }

  export type imageForApiHackingUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    user?: apiHackingLabUpdateOneRequiredWithoutImageNestedInput
  }

  export type imageForApiHackingUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type imageForApiHackingCreateManyInput = {
    id?: number
    name: string
    path: string
    userId: number
  }

  export type imageForApiHackingUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
  }

  export type imageForApiHackingUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type ProductToPathTraversalLab1CreateInput = {
    name?: string | null
    path: string
    description: string
  }

  export type ProductToPathTraversalLab1UncheckedCreateInput = {
    id?: number
    name?: string | null
    path: string
    description: string
  }

  export type ProductToPathTraversalLab1UpdateInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    path?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type ProductToPathTraversalLab1UncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    path?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type ProductToPathTraversalLab1CreateManyInput = {
    id?: number
    name?: string | null
    path: string
    description: string
  }

  export type ProductToPathTraversalLab1UpdateManyMutationInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    path?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type ProductToPathTraversalLab1UncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    path?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type BankAccountCreateInput = {
    accountNo: string
    accountPass: string
    accountBalance?: number
    accountName: string
  }

  export type BankAccountUncheckedCreateInput = {
    id?: number
    accountNo: string
    accountPass: string
    accountBalance?: number
    accountName: string
  }

  export type BankAccountUpdateInput = {
    accountNo?: StringFieldUpdateOperationsInput | string
    accountPass?: StringFieldUpdateOperationsInput | string
    accountBalance?: FloatFieldUpdateOperationsInput | number
    accountName?: StringFieldUpdateOperationsInput | string
  }

  export type BankAccountUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    accountNo?: StringFieldUpdateOperationsInput | string
    accountPass?: StringFieldUpdateOperationsInput | string
    accountBalance?: FloatFieldUpdateOperationsInput | number
    accountName?: StringFieldUpdateOperationsInput | string
  }

  export type BankAccountCreateManyInput = {
    id?: number
    accountNo: string
    accountPass: string
    accountBalance?: number
    accountName: string
  }

  export type BankAccountUpdateManyMutationInput = {
    accountNo?: StringFieldUpdateOperationsInput | string
    accountPass?: StringFieldUpdateOperationsInput | string
    accountBalance?: FloatFieldUpdateOperationsInput | number
    accountName?: StringFieldUpdateOperationsInput | string
  }

  export type BankAccountUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    accountNo?: StringFieldUpdateOperationsInput | string
    accountPass?: StringFieldUpdateOperationsInput | string
    accountBalance?: FloatFieldUpdateOperationsInput | number
    accountName?: StringFieldUpdateOperationsInput | string
  }

  export type CSRFLab2CreateInput = {
    authority: string
    password: string
  }

  export type CSRFLab2UncheckedCreateInput = {
    id?: number
    authority: string
    password: string
  }

  export type CSRFLab2UpdateInput = {
    authority?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type CSRFLab2UncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    authority?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type CSRFLab2CreateManyInput = {
    id?: number
    authority: string
    password: string
  }

  export type CSRFLab2UpdateManyMutationInput = {
    authority?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type CSRFLab2UncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    authority?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type CSRFLab3CreateInput = {
    name?: string
    balance?: number
  }

  export type CSRFLab3UncheckedCreateInput = {
    id?: number
    name?: string
    balance?: number
  }

  export type CSRFLab3UpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    balance?: IntFieldUpdateOperationsInput | number
  }

  export type CSRFLab3UncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    balance?: IntFieldUpdateOperationsInput | number
  }

  export type CSRFLab3CreateManyInput = {
    id?: number
    name?: string
    balance?: number
  }

  export type CSRFLab3UpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    balance?: IntFieldUpdateOperationsInput | number
  }

  export type CSRFLab3UncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    balance?: IntFieldUpdateOperationsInput | number
  }

  export type FileInclusionLab1CreateInput = {
    id?: string
    name: string
    path: string
  }

  export type FileInclusionLab1UncheckedCreateInput = {
    id?: string
    name: string
    path: string
  }

  export type FileInclusionLab1UpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
  }

  export type FileInclusionLab1UncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
  }

  export type FileInclusionLab1CreateManyInput = {
    id?: string
    name: string
    path: string
  }

  export type FileInclusionLab1UpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
  }

  export type FileInclusionLab1UncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
  }

  export type CartItemCreateInput = {
    name: string
    price: number
  }

  export type CartItemUncheckedCreateInput = {
    id?: number
    name: string
    price: number
  }

  export type CartItemUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
  }

  export type CartItemUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
  }

  export type CartItemCreateManyInput = {
    id?: number
    name: string
    price: number
  }

  export type CartItemUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
  }

  export type CartItemUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
  }

  export type BurPSuiteLab3CreateInput = {
    id?: string
    name?: string | null
    path?: string | null
    description?: string | null
  }

  export type BurPSuiteLab3UncheckedCreateInput = {
    id?: string
    name?: string | null
    path?: string | null
    description?: string | null
  }

  export type BurPSuiteLab3UpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    path?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BurPSuiteLab3UncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    path?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BurPSuiteLab3CreateManyInput = {
    id?: string
    name?: string | null
    path?: string | null
    description?: string | null
  }

  export type BurPSuiteLab3UpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    path?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BurPSuiteLab3UncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    path?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CourseCreateInput = {
    title: string
    description: string
    image?: string | null
    link?: string | null
    state: string
    topics?: CourseCreatetopicsInput | string[]
    difficulty: string
    favorite?: boolean
    registrations?: CourseRegistrationCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateInput = {
    id?: number
    title: string
    description: string
    image?: string | null
    link?: string | null
    state: string
    topics?: CourseCreatetopicsInput | string[]
    difficulty: string
    favorite?: boolean
    registrations?: CourseRegistrationUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    state?: StringFieldUpdateOperationsInput | string
    topics?: CourseUpdatetopicsInput | string[]
    difficulty?: StringFieldUpdateOperationsInput | string
    favorite?: BoolFieldUpdateOperationsInput | boolean
    registrations?: CourseRegistrationUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    state?: StringFieldUpdateOperationsInput | string
    topics?: CourseUpdatetopicsInput | string[]
    difficulty?: StringFieldUpdateOperationsInput | string
    favorite?: BoolFieldUpdateOperationsInput | boolean
    registrations?: CourseRegistrationUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type CourseCreateManyInput = {
    id?: number
    title: string
    description: string
    image?: string | null
    link?: string | null
    state: string
    topics?: CourseCreatetopicsInput | string[]
    difficulty: string
    favorite?: boolean
  }

  export type CourseUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    state?: StringFieldUpdateOperationsInput | string
    topics?: CourseUpdatetopicsInput | string[]
    difficulty?: StringFieldUpdateOperationsInput | string
    favorite?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CourseUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    state?: StringFieldUpdateOperationsInput | string
    topics?: CourseUpdatetopicsInput | string[]
    difficulty?: StringFieldUpdateOperationsInput | string
    favorite?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CourseRegistrationCreateInput = {
    createdAt?: Date | string
    course: CourseCreateNestedOneWithoutRegistrationsInput
  }

  export type CourseRegistrationUncheckedCreateInput = {
    id?: number
    courseId: number
    createdAt?: Date | string
  }

  export type CourseRegistrationUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    course?: CourseUpdateOneRequiredWithoutRegistrationsNestedInput
  }

  export type CourseRegistrationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseRegistrationCreateManyInput = {
    id?: number
    courseId: number
    createdAt?: Date | string
  }

  export type CourseRegistrationUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseRegistrationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClickJackLab1CreateInput = {
    username: string
    password: string
    email?: string | null
  }

  export type ClickJackLab1UncheckedCreateInput = {
    id?: number
    username: string
    password: string
    email?: string | null
  }

  export type ClickJackLab1UpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ClickJackLab1UncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ClickJackLab1CreateManyInput = {
    id?: number
    username: string
    password: string
    email?: string | null
  }

  export type ClickJackLab1UpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ClickJackLab1UncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type ValidationNumberNullableScalarRelationFilter = {
    is?: ValidationNumberWhereInput | null
    isNot?: ValidationNumberWhereInput | null
  }

  export type ImageNullableScalarRelationFilter = {
    is?: ImageWhereInput | null
    isNot?: ImageWhereInput | null
  }

  export type FileListRelationFilter = {
    every?: FileWhereInput
    some?: FileWhereInput
    none?: FileWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type FileOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    isVerified?: SortOrder
    role?: SortOrder
    token?: SortOrder
    address?: SortOrder
    birthday?: SortOrder
    phoneNum?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    isVerified?: SortOrder
    role?: SortOrder
    token?: SortOrder
    address?: SortOrder
    birthday?: SortOrder
    phoneNum?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    isVerified?: SortOrder
    role?: SortOrder
    token?: SortOrder
    address?: SortOrder
    birthday?: SortOrder
    phoneNum?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ImageCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    name?: SortOrder
    path?: SortOrder
    mimetype?: SortOrder
    userId?: SortOrder
  }

  export type ImageMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    name?: SortOrder
    path?: SortOrder
    mimetype?: SortOrder
    userId?: SortOrder
  }

  export type ImageMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    name?: SortOrder
    path?: SortOrder
    mimetype?: SortOrder
    userId?: SortOrder
  }

  export type BigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type ValidationNumberCountOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
    createdAt?: SortOrder
    expiration?: SortOrder
    isVerified?: SortOrder
    userId?: SortOrder
  }

  export type ValidationNumberAvgOrderByAggregateInput = {
    expiration?: SortOrder
  }

  export type ValidationNumberMaxOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
    createdAt?: SortOrder
    expiration?: SortOrder
    isVerified?: SortOrder
    userId?: SortOrder
  }

  export type ValidationNumberMinOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
    createdAt?: SortOrder
    expiration?: SortOrder
    isVerified?: SortOrder
    userId?: SortOrder
  }

  export type ValidationNumberSumOrderByAggregateInput = {
    expiration?: SortOrder
  }

  export type BigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type userForsqlInjectionCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
  }

  export type userForsqlInjectionMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
  }

  export type userForsqlInjectionMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
  }

  export type PostListRelationFilter = {
    every?: PostWhereInput
    some?: PostWhereInput
    none?: PostWhereInput
  }

  export type PostOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type userForXSSCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
  }

  export type userForXSSMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
  }

  export type userForXSSMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
  }

  export type FileCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    name?: SortOrder
    path?: SortOrder
    mimetype?: SortOrder
    userId?: SortOrder
  }

  export type FileMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    name?: SortOrder
    path?: SortOrder
    mimetype?: SortOrder
    userId?: SortOrder
  }

  export type FileMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    name?: SortOrder
    path?: SortOrder
    mimetype?: SortOrder
    userId?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type Lab1IDORSCountOrderByAggregateInput = {
    id?: SortOrder
    path?: SortOrder
  }

  export type Lab1IDORSAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type Lab1IDORSMaxOrderByAggregateInput = {
    id?: SortOrder
    path?: SortOrder
  }

  export type Lab1IDORSMinOrderByAggregateInput = {
    id?: SortOrder
    path?: SortOrder
  }

  export type Lab1IDORSSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type Lab2IDORSCountOrderByAggregateInput = {
    id?: SortOrder
    balance?: SortOrder
  }

  export type Lab2IDORSAvgOrderByAggregateInput = {
    id?: SortOrder
    balance?: SortOrder
  }

  export type Lab2IDORSMaxOrderByAggregateInput = {
    id?: SortOrder
    balance?: SortOrder
  }

  export type Lab2IDORSMinOrderByAggregateInput = {
    id?: SortOrder
    balance?: SortOrder
  }

  export type Lab2IDORSSumOrderByAggregateInput = {
    id?: SortOrder
    balance?: SortOrder
  }

  export type Lab3IDORSCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    balance?: SortOrder
  }

  export type Lab3IDORSAvgOrderByAggregateInput = {
    id?: SortOrder
    balance?: SortOrder
  }

  export type Lab3IDORSMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    balance?: SortOrder
  }

  export type Lab3IDORSMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    balance?: SortOrder
  }

  export type Lab3IDORSSumOrderByAggregateInput = {
    id?: SortOrder
    balance?: SortOrder
  }

  export type UserForXSSScalarRelationFilter = {
    is?: userForXSSWhereInput
    isNot?: userForXSSWhereInput
  }

  export type PostCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    content?: SortOrder
    userId?: SortOrder
  }

  export type PostMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    content?: SortOrder
    userId?: SortOrder
  }

  export type PostMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    content?: SortOrder
    userId?: SortOrder
  }

  export type lab2sqlCountOrderByAggregateInput = {
    id?: SortOrder
    category?: SortOrder
    released?: SortOrder
  }

  export type lab2sqlMaxOrderByAggregateInput = {
    id?: SortOrder
    category?: SortOrder
    released?: SortOrder
  }

  export type lab2sqlMinOrderByAggregateInput = {
    id?: SortOrder
    category?: SortOrder
    released?: SortOrder
  }

  export type lab3sqlCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    category?: SortOrder
  }

  export type lab3sqlMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    category?: SortOrder
  }

  export type lab3sqlMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    category?: SortOrder
  }

  export type ACUserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type ACUserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ACUserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type ACUserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type ACUserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ImageForApiHackingListRelationFilter = {
    every?: imageForApiHackingWhereInput
    some?: imageForApiHackingWhereInput
    none?: imageForApiHackingWhereInput
  }

  export type imageForApiHackingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type apiHackingLabCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
  }

  export type apiHackingLabAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type apiHackingLabMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
  }

  export type apiHackingLabMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
  }

  export type apiHackingLabSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ApiHackingLabScalarRelationFilter = {
    is?: apiHackingLabWhereInput
    isNot?: apiHackingLabWhereInput
  }

  export type imageForApiHackingCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    path?: SortOrder
    userId?: SortOrder
  }

  export type imageForApiHackingAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type imageForApiHackingMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    path?: SortOrder
    userId?: SortOrder
  }

  export type imageForApiHackingMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    path?: SortOrder
    userId?: SortOrder
  }

  export type imageForApiHackingSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type ProductToPathTraversalLab1CountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    path?: SortOrder
    description?: SortOrder
  }

  export type ProductToPathTraversalLab1AvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ProductToPathTraversalLab1MaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    path?: SortOrder
    description?: SortOrder
  }

  export type ProductToPathTraversalLab1MinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    path?: SortOrder
    description?: SortOrder
  }

  export type ProductToPathTraversalLab1SumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type BankAccountCountOrderByAggregateInput = {
    id?: SortOrder
    accountNo?: SortOrder
    accountPass?: SortOrder
    accountBalance?: SortOrder
    accountName?: SortOrder
  }

  export type BankAccountAvgOrderByAggregateInput = {
    id?: SortOrder
    accountBalance?: SortOrder
  }

  export type BankAccountMaxOrderByAggregateInput = {
    id?: SortOrder
    accountNo?: SortOrder
    accountPass?: SortOrder
    accountBalance?: SortOrder
    accountName?: SortOrder
  }

  export type BankAccountMinOrderByAggregateInput = {
    id?: SortOrder
    accountNo?: SortOrder
    accountPass?: SortOrder
    accountBalance?: SortOrder
    accountName?: SortOrder
  }

  export type BankAccountSumOrderByAggregateInput = {
    id?: SortOrder
    accountBalance?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type CSRFLab2CountOrderByAggregateInput = {
    id?: SortOrder
    authority?: SortOrder
    password?: SortOrder
  }

  export type CSRFLab2AvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CSRFLab2MaxOrderByAggregateInput = {
    id?: SortOrder
    authority?: SortOrder
    password?: SortOrder
  }

  export type CSRFLab2MinOrderByAggregateInput = {
    id?: SortOrder
    authority?: SortOrder
    password?: SortOrder
  }

  export type CSRFLab2SumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CSRFLab3CountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    balance?: SortOrder
  }

  export type CSRFLab3AvgOrderByAggregateInput = {
    id?: SortOrder
    balance?: SortOrder
  }

  export type CSRFLab3MaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    balance?: SortOrder
  }

  export type CSRFLab3MinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    balance?: SortOrder
  }

  export type CSRFLab3SumOrderByAggregateInput = {
    id?: SortOrder
    balance?: SortOrder
  }

  export type FileInclusionLab1CountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    path?: SortOrder
  }

  export type FileInclusionLab1MaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    path?: SortOrder
  }

  export type FileInclusionLab1MinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    path?: SortOrder
  }

  export type CartItemCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
  }

  export type CartItemAvgOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
  }

  export type CartItemMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
  }

  export type CartItemMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
  }

  export type CartItemSumOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
  }

  export type BurPSuiteLab3CountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    path?: SortOrder
    description?: SortOrder
  }

  export type BurPSuiteLab3MaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    path?: SortOrder
    description?: SortOrder
  }

  export type BurPSuiteLab3MinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    path?: SortOrder
    description?: SortOrder
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type CourseRegistrationListRelationFilter = {
    every?: CourseRegistrationWhereInput
    some?: CourseRegistrationWhereInput
    none?: CourseRegistrationWhereInput
  }

  export type CourseRegistrationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CourseCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    image?: SortOrder
    link?: SortOrder
    state?: SortOrder
    topics?: SortOrder
    difficulty?: SortOrder
    favorite?: SortOrder
  }

  export type CourseAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CourseMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    image?: SortOrder
    link?: SortOrder
    state?: SortOrder
    difficulty?: SortOrder
    favorite?: SortOrder
  }

  export type CourseMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    image?: SortOrder
    link?: SortOrder
    state?: SortOrder
    difficulty?: SortOrder
    favorite?: SortOrder
  }

  export type CourseSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CourseScalarRelationFilter = {
    is?: CourseWhereInput
    isNot?: CourseWhereInput
  }

  export type CourseRegistrationCountOrderByAggregateInput = {
    id?: SortOrder
    courseId?: SortOrder
    createdAt?: SortOrder
  }

  export type CourseRegistrationAvgOrderByAggregateInput = {
    id?: SortOrder
    courseId?: SortOrder
  }

  export type CourseRegistrationMaxOrderByAggregateInput = {
    id?: SortOrder
    courseId?: SortOrder
    createdAt?: SortOrder
  }

  export type CourseRegistrationMinOrderByAggregateInput = {
    id?: SortOrder
    courseId?: SortOrder
    createdAt?: SortOrder
  }

  export type CourseRegistrationSumOrderByAggregateInput = {
    id?: SortOrder
    courseId?: SortOrder
  }

  export type ClickJackLab1CountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    email?: SortOrder
  }

  export type ClickJackLab1AvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ClickJackLab1MaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    email?: SortOrder
  }

  export type ClickJackLab1MinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    email?: SortOrder
  }

  export type ClickJackLab1SumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ValidationNumberCreateNestedOneWithoutUserInput = {
    create?: XOR<ValidationNumberCreateWithoutUserInput, ValidationNumberUncheckedCreateWithoutUserInput>
    connectOrCreate?: ValidationNumberCreateOrConnectWithoutUserInput
    connect?: ValidationNumberWhereUniqueInput
  }

  export type ImageCreateNestedOneWithoutUserInput = {
    create?: XOR<ImageCreateWithoutUserInput, ImageUncheckedCreateWithoutUserInput>
    connectOrCreate?: ImageCreateOrConnectWithoutUserInput
    connect?: ImageWhereUniqueInput
  }

  export type FileCreateNestedManyWithoutUserInput = {
    create?: XOR<FileCreateWithoutUserInput, FileUncheckedCreateWithoutUserInput> | FileCreateWithoutUserInput[] | FileUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FileCreateOrConnectWithoutUserInput | FileCreateOrConnectWithoutUserInput[]
    createMany?: FileCreateManyUserInputEnvelope
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
  }

  export type ValidationNumberUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<ValidationNumberCreateWithoutUserInput, ValidationNumberUncheckedCreateWithoutUserInput>
    connectOrCreate?: ValidationNumberCreateOrConnectWithoutUserInput
    connect?: ValidationNumberWhereUniqueInput
  }

  export type ImageUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<ImageCreateWithoutUserInput, ImageUncheckedCreateWithoutUserInput>
    connectOrCreate?: ImageCreateOrConnectWithoutUserInput
    connect?: ImageWhereUniqueInput
  }

  export type FileUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FileCreateWithoutUserInput, FileUncheckedCreateWithoutUserInput> | FileCreateWithoutUserInput[] | FileUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FileCreateOrConnectWithoutUserInput | FileCreateOrConnectWithoutUserInput[]
    createMany?: FileCreateManyUserInputEnvelope
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type ValidationNumberUpdateOneWithoutUserNestedInput = {
    create?: XOR<ValidationNumberCreateWithoutUserInput, ValidationNumberUncheckedCreateWithoutUserInput>
    connectOrCreate?: ValidationNumberCreateOrConnectWithoutUserInput
    upsert?: ValidationNumberUpsertWithoutUserInput
    disconnect?: ValidationNumberWhereInput | boolean
    delete?: ValidationNumberWhereInput | boolean
    connect?: ValidationNumberWhereUniqueInput
    update?: XOR<XOR<ValidationNumberUpdateToOneWithWhereWithoutUserInput, ValidationNumberUpdateWithoutUserInput>, ValidationNumberUncheckedUpdateWithoutUserInput>
  }

  export type ImageUpdateOneWithoutUserNestedInput = {
    create?: XOR<ImageCreateWithoutUserInput, ImageUncheckedCreateWithoutUserInput>
    connectOrCreate?: ImageCreateOrConnectWithoutUserInput
    upsert?: ImageUpsertWithoutUserInput
    disconnect?: ImageWhereInput | boolean
    delete?: ImageWhereInput | boolean
    connect?: ImageWhereUniqueInput
    update?: XOR<XOR<ImageUpdateToOneWithWhereWithoutUserInput, ImageUpdateWithoutUserInput>, ImageUncheckedUpdateWithoutUserInput>
  }

  export type FileUpdateManyWithoutUserNestedInput = {
    create?: XOR<FileCreateWithoutUserInput, FileUncheckedCreateWithoutUserInput> | FileCreateWithoutUserInput[] | FileUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FileCreateOrConnectWithoutUserInput | FileCreateOrConnectWithoutUserInput[]
    upsert?: FileUpsertWithWhereUniqueWithoutUserInput | FileUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FileCreateManyUserInputEnvelope
    set?: FileWhereUniqueInput | FileWhereUniqueInput[]
    disconnect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    delete?: FileWhereUniqueInput | FileWhereUniqueInput[]
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    update?: FileUpdateWithWhereUniqueWithoutUserInput | FileUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FileUpdateManyWithWhereWithoutUserInput | FileUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FileScalarWhereInput | FileScalarWhereInput[]
  }

  export type ValidationNumberUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<ValidationNumberCreateWithoutUserInput, ValidationNumberUncheckedCreateWithoutUserInput>
    connectOrCreate?: ValidationNumberCreateOrConnectWithoutUserInput
    upsert?: ValidationNumberUpsertWithoutUserInput
    disconnect?: ValidationNumberWhereInput | boolean
    delete?: ValidationNumberWhereInput | boolean
    connect?: ValidationNumberWhereUniqueInput
    update?: XOR<XOR<ValidationNumberUpdateToOneWithWhereWithoutUserInput, ValidationNumberUpdateWithoutUserInput>, ValidationNumberUncheckedUpdateWithoutUserInput>
  }

  export type ImageUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<ImageCreateWithoutUserInput, ImageUncheckedCreateWithoutUserInput>
    connectOrCreate?: ImageCreateOrConnectWithoutUserInput
    upsert?: ImageUpsertWithoutUserInput
    disconnect?: ImageWhereInput | boolean
    delete?: ImageWhereInput | boolean
    connect?: ImageWhereUniqueInput
    update?: XOR<XOR<ImageUpdateToOneWithWhereWithoutUserInput, ImageUpdateWithoutUserInput>, ImageUncheckedUpdateWithoutUserInput>
  }

  export type FileUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FileCreateWithoutUserInput, FileUncheckedCreateWithoutUserInput> | FileCreateWithoutUserInput[] | FileUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FileCreateOrConnectWithoutUserInput | FileCreateOrConnectWithoutUserInput[]
    upsert?: FileUpsertWithWhereUniqueWithoutUserInput | FileUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FileCreateManyUserInputEnvelope
    set?: FileWhereUniqueInput | FileWhereUniqueInput[]
    disconnect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    delete?: FileWhereUniqueInput | FileWhereUniqueInput[]
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    update?: FileUpdateWithWhereUniqueWithoutUserInput | FileUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FileUpdateManyWithWhereWithoutUserInput | FileUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FileScalarWhereInput | FileScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutImageInput = {
    create?: XOR<UserCreateWithoutImageInput, UserUncheckedCreateWithoutImageInput>
    connectOrCreate?: UserCreateOrConnectWithoutImageInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutImageNestedInput = {
    create?: XOR<UserCreateWithoutImageInput, UserUncheckedCreateWithoutImageInput>
    connectOrCreate?: UserCreateOrConnectWithoutImageInput
    upsert?: UserUpsertWithoutImageInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutImageInput, UserUpdateWithoutImageInput>, UserUncheckedUpdateWithoutImageInput>
  }

  export type UserCreateNestedOneWithoutValidationNumberInput = {
    create?: XOR<UserCreateWithoutValidationNumberInput, UserUncheckedCreateWithoutValidationNumberInput>
    connectOrCreate?: UserCreateOrConnectWithoutValidationNumberInput
    connect?: UserWhereUniqueInput
  }

  export type BigIntFieldUpdateOperationsInput = {
    set?: bigint | number
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type UserUpdateOneRequiredWithoutValidationNumberNestedInput = {
    create?: XOR<UserCreateWithoutValidationNumberInput, UserUncheckedCreateWithoutValidationNumberInput>
    connectOrCreate?: UserCreateOrConnectWithoutValidationNumberInput
    upsert?: UserUpsertWithoutValidationNumberInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutValidationNumberInput, UserUpdateWithoutValidationNumberInput>, UserUncheckedUpdateWithoutValidationNumberInput>
  }

  export type PostCreateNestedManyWithoutUserInput = {
    create?: XOR<PostCreateWithoutUserInput, PostUncheckedCreateWithoutUserInput> | PostCreateWithoutUserInput[] | PostUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PostCreateOrConnectWithoutUserInput | PostCreateOrConnectWithoutUserInput[]
    createMany?: PostCreateManyUserInputEnvelope
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
  }

  export type PostUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PostCreateWithoutUserInput, PostUncheckedCreateWithoutUserInput> | PostCreateWithoutUserInput[] | PostUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PostCreateOrConnectWithoutUserInput | PostCreateOrConnectWithoutUserInput[]
    createMany?: PostCreateManyUserInputEnvelope
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
  }

  export type PostUpdateManyWithoutUserNestedInput = {
    create?: XOR<PostCreateWithoutUserInput, PostUncheckedCreateWithoutUserInput> | PostCreateWithoutUserInput[] | PostUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PostCreateOrConnectWithoutUserInput | PostCreateOrConnectWithoutUserInput[]
    upsert?: PostUpsertWithWhereUniqueWithoutUserInput | PostUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PostCreateManyUserInputEnvelope
    set?: PostWhereUniqueInput | PostWhereUniqueInput[]
    disconnect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    delete?: PostWhereUniqueInput | PostWhereUniqueInput[]
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    update?: PostUpdateWithWhereUniqueWithoutUserInput | PostUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PostUpdateManyWithWhereWithoutUserInput | PostUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PostScalarWhereInput | PostScalarWhereInput[]
  }

  export type PostUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PostCreateWithoutUserInput, PostUncheckedCreateWithoutUserInput> | PostCreateWithoutUserInput[] | PostUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PostCreateOrConnectWithoutUserInput | PostCreateOrConnectWithoutUserInput[]
    upsert?: PostUpsertWithWhereUniqueWithoutUserInput | PostUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PostCreateManyUserInputEnvelope
    set?: PostWhereUniqueInput | PostWhereUniqueInput[]
    disconnect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    delete?: PostWhereUniqueInput | PostWhereUniqueInput[]
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    update?: PostUpdateWithWhereUniqueWithoutUserInput | PostUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PostUpdateManyWithWhereWithoutUserInput | PostUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PostScalarWhereInput | PostScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutFileInput = {
    create?: XOR<UserCreateWithoutFileInput, UserUncheckedCreateWithoutFileInput>
    connectOrCreate?: UserCreateOrConnectWithoutFileInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutFileNestedInput = {
    create?: XOR<UserCreateWithoutFileInput, UserUncheckedCreateWithoutFileInput>
    connectOrCreate?: UserCreateOrConnectWithoutFileInput
    upsert?: UserUpsertWithoutFileInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFileInput, UserUpdateWithoutFileInput>, UserUncheckedUpdateWithoutFileInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type userForXSSCreateNestedOneWithoutPostsInput = {
    create?: XOR<userForXSSCreateWithoutPostsInput, userForXSSUncheckedCreateWithoutPostsInput>
    connectOrCreate?: userForXSSCreateOrConnectWithoutPostsInput
    connect?: userForXSSWhereUniqueInput
  }

  export type userForXSSUpdateOneRequiredWithoutPostsNestedInput = {
    create?: XOR<userForXSSCreateWithoutPostsInput, userForXSSUncheckedCreateWithoutPostsInput>
    connectOrCreate?: userForXSSCreateOrConnectWithoutPostsInput
    upsert?: userForXSSUpsertWithoutPostsInput
    connect?: userForXSSWhereUniqueInput
    update?: XOR<XOR<userForXSSUpdateToOneWithWhereWithoutPostsInput, userForXSSUpdateWithoutPostsInput>, userForXSSUncheckedUpdateWithoutPostsInput>
  }

  export type imageForApiHackingCreateNestedManyWithoutUserInput = {
    create?: XOR<imageForApiHackingCreateWithoutUserInput, imageForApiHackingUncheckedCreateWithoutUserInput> | imageForApiHackingCreateWithoutUserInput[] | imageForApiHackingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: imageForApiHackingCreateOrConnectWithoutUserInput | imageForApiHackingCreateOrConnectWithoutUserInput[]
    createMany?: imageForApiHackingCreateManyUserInputEnvelope
    connect?: imageForApiHackingWhereUniqueInput | imageForApiHackingWhereUniqueInput[]
  }

  export type imageForApiHackingUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<imageForApiHackingCreateWithoutUserInput, imageForApiHackingUncheckedCreateWithoutUserInput> | imageForApiHackingCreateWithoutUserInput[] | imageForApiHackingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: imageForApiHackingCreateOrConnectWithoutUserInput | imageForApiHackingCreateOrConnectWithoutUserInput[]
    createMany?: imageForApiHackingCreateManyUserInputEnvelope
    connect?: imageForApiHackingWhereUniqueInput | imageForApiHackingWhereUniqueInput[]
  }

  export type imageForApiHackingUpdateManyWithoutUserNestedInput = {
    create?: XOR<imageForApiHackingCreateWithoutUserInput, imageForApiHackingUncheckedCreateWithoutUserInput> | imageForApiHackingCreateWithoutUserInput[] | imageForApiHackingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: imageForApiHackingCreateOrConnectWithoutUserInput | imageForApiHackingCreateOrConnectWithoutUserInput[]
    upsert?: imageForApiHackingUpsertWithWhereUniqueWithoutUserInput | imageForApiHackingUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: imageForApiHackingCreateManyUserInputEnvelope
    set?: imageForApiHackingWhereUniqueInput | imageForApiHackingWhereUniqueInput[]
    disconnect?: imageForApiHackingWhereUniqueInput | imageForApiHackingWhereUniqueInput[]
    delete?: imageForApiHackingWhereUniqueInput | imageForApiHackingWhereUniqueInput[]
    connect?: imageForApiHackingWhereUniqueInput | imageForApiHackingWhereUniqueInput[]
    update?: imageForApiHackingUpdateWithWhereUniqueWithoutUserInput | imageForApiHackingUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: imageForApiHackingUpdateManyWithWhereWithoutUserInput | imageForApiHackingUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: imageForApiHackingScalarWhereInput | imageForApiHackingScalarWhereInput[]
  }

  export type imageForApiHackingUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<imageForApiHackingCreateWithoutUserInput, imageForApiHackingUncheckedCreateWithoutUserInput> | imageForApiHackingCreateWithoutUserInput[] | imageForApiHackingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: imageForApiHackingCreateOrConnectWithoutUserInput | imageForApiHackingCreateOrConnectWithoutUserInput[]
    upsert?: imageForApiHackingUpsertWithWhereUniqueWithoutUserInput | imageForApiHackingUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: imageForApiHackingCreateManyUserInputEnvelope
    set?: imageForApiHackingWhereUniqueInput | imageForApiHackingWhereUniqueInput[]
    disconnect?: imageForApiHackingWhereUniqueInput | imageForApiHackingWhereUniqueInput[]
    delete?: imageForApiHackingWhereUniqueInput | imageForApiHackingWhereUniqueInput[]
    connect?: imageForApiHackingWhereUniqueInput | imageForApiHackingWhereUniqueInput[]
    update?: imageForApiHackingUpdateWithWhereUniqueWithoutUserInput | imageForApiHackingUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: imageForApiHackingUpdateManyWithWhereWithoutUserInput | imageForApiHackingUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: imageForApiHackingScalarWhereInput | imageForApiHackingScalarWhereInput[]
  }

  export type apiHackingLabCreateNestedOneWithoutImageInput = {
    create?: XOR<apiHackingLabCreateWithoutImageInput, apiHackingLabUncheckedCreateWithoutImageInput>
    connectOrCreate?: apiHackingLabCreateOrConnectWithoutImageInput
    connect?: apiHackingLabWhereUniqueInput
  }

  export type apiHackingLabUpdateOneRequiredWithoutImageNestedInput = {
    create?: XOR<apiHackingLabCreateWithoutImageInput, apiHackingLabUncheckedCreateWithoutImageInput>
    connectOrCreate?: apiHackingLabCreateOrConnectWithoutImageInput
    upsert?: apiHackingLabUpsertWithoutImageInput
    connect?: apiHackingLabWhereUniqueInput
    update?: XOR<XOR<apiHackingLabUpdateToOneWithWhereWithoutImageInput, apiHackingLabUpdateWithoutImageInput>, apiHackingLabUncheckedUpdateWithoutImageInput>
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CourseCreatetopicsInput = {
    set: string[]
  }

  export type CourseRegistrationCreateNestedManyWithoutCourseInput = {
    create?: XOR<CourseRegistrationCreateWithoutCourseInput, CourseRegistrationUncheckedCreateWithoutCourseInput> | CourseRegistrationCreateWithoutCourseInput[] | CourseRegistrationUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: CourseRegistrationCreateOrConnectWithoutCourseInput | CourseRegistrationCreateOrConnectWithoutCourseInput[]
    createMany?: CourseRegistrationCreateManyCourseInputEnvelope
    connect?: CourseRegistrationWhereUniqueInput | CourseRegistrationWhereUniqueInput[]
  }

  export type CourseRegistrationUncheckedCreateNestedManyWithoutCourseInput = {
    create?: XOR<CourseRegistrationCreateWithoutCourseInput, CourseRegistrationUncheckedCreateWithoutCourseInput> | CourseRegistrationCreateWithoutCourseInput[] | CourseRegistrationUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: CourseRegistrationCreateOrConnectWithoutCourseInput | CourseRegistrationCreateOrConnectWithoutCourseInput[]
    createMany?: CourseRegistrationCreateManyCourseInputEnvelope
    connect?: CourseRegistrationWhereUniqueInput | CourseRegistrationWhereUniqueInput[]
  }

  export type CourseUpdatetopicsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type CourseRegistrationUpdateManyWithoutCourseNestedInput = {
    create?: XOR<CourseRegistrationCreateWithoutCourseInput, CourseRegistrationUncheckedCreateWithoutCourseInput> | CourseRegistrationCreateWithoutCourseInput[] | CourseRegistrationUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: CourseRegistrationCreateOrConnectWithoutCourseInput | CourseRegistrationCreateOrConnectWithoutCourseInput[]
    upsert?: CourseRegistrationUpsertWithWhereUniqueWithoutCourseInput | CourseRegistrationUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: CourseRegistrationCreateManyCourseInputEnvelope
    set?: CourseRegistrationWhereUniqueInput | CourseRegistrationWhereUniqueInput[]
    disconnect?: CourseRegistrationWhereUniqueInput | CourseRegistrationWhereUniqueInput[]
    delete?: CourseRegistrationWhereUniqueInput | CourseRegistrationWhereUniqueInput[]
    connect?: CourseRegistrationWhereUniqueInput | CourseRegistrationWhereUniqueInput[]
    update?: CourseRegistrationUpdateWithWhereUniqueWithoutCourseInput | CourseRegistrationUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: CourseRegistrationUpdateManyWithWhereWithoutCourseInput | CourseRegistrationUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: CourseRegistrationScalarWhereInput | CourseRegistrationScalarWhereInput[]
  }

  export type CourseRegistrationUncheckedUpdateManyWithoutCourseNestedInput = {
    create?: XOR<CourseRegistrationCreateWithoutCourseInput, CourseRegistrationUncheckedCreateWithoutCourseInput> | CourseRegistrationCreateWithoutCourseInput[] | CourseRegistrationUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: CourseRegistrationCreateOrConnectWithoutCourseInput | CourseRegistrationCreateOrConnectWithoutCourseInput[]
    upsert?: CourseRegistrationUpsertWithWhereUniqueWithoutCourseInput | CourseRegistrationUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: CourseRegistrationCreateManyCourseInputEnvelope
    set?: CourseRegistrationWhereUniqueInput | CourseRegistrationWhereUniqueInput[]
    disconnect?: CourseRegistrationWhereUniqueInput | CourseRegistrationWhereUniqueInput[]
    delete?: CourseRegistrationWhereUniqueInput | CourseRegistrationWhereUniqueInput[]
    connect?: CourseRegistrationWhereUniqueInput | CourseRegistrationWhereUniqueInput[]
    update?: CourseRegistrationUpdateWithWhereUniqueWithoutCourseInput | CourseRegistrationUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: CourseRegistrationUpdateManyWithWhereWithoutCourseInput | CourseRegistrationUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: CourseRegistrationScalarWhereInput | CourseRegistrationScalarWhereInput[]
  }

  export type CourseCreateNestedOneWithoutRegistrationsInput = {
    create?: XOR<CourseCreateWithoutRegistrationsInput, CourseUncheckedCreateWithoutRegistrationsInput>
    connectOrCreate?: CourseCreateOrConnectWithoutRegistrationsInput
    connect?: CourseWhereUniqueInput
  }

  export type CourseUpdateOneRequiredWithoutRegistrationsNestedInput = {
    create?: XOR<CourseCreateWithoutRegistrationsInput, CourseUncheckedCreateWithoutRegistrationsInput>
    connectOrCreate?: CourseCreateOrConnectWithoutRegistrationsInput
    upsert?: CourseUpsertWithoutRegistrationsInput
    connect?: CourseWhereUniqueInput
    update?: XOR<XOR<CourseUpdateToOneWithWhereWithoutRegistrationsInput, CourseUpdateWithoutRegistrationsInput>, CourseUncheckedUpdateWithoutRegistrationsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type NestedBigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type ValidationNumberCreateWithoutUserInput = {
    id?: string
    number: string
    createdAt?: Date | string
    expiration: bigint | number
    isVerified?: boolean
  }

  export type ValidationNumberUncheckedCreateWithoutUserInput = {
    id?: string
    number: string
    createdAt?: Date | string
    expiration: bigint | number
    isVerified?: boolean
  }

  export type ValidationNumberCreateOrConnectWithoutUserInput = {
    where: ValidationNumberWhereUniqueInput
    create: XOR<ValidationNumberCreateWithoutUserInput, ValidationNumberUncheckedCreateWithoutUserInput>
  }

  export type ImageCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    name: string
    path: string
    mimetype: string
  }

  export type ImageUncheckedCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    name: string
    path: string
    mimetype: string
  }

  export type ImageCreateOrConnectWithoutUserInput = {
    where: ImageWhereUniqueInput
    create: XOR<ImageCreateWithoutUserInput, ImageUncheckedCreateWithoutUserInput>
  }

  export type FileCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    name: string
    path: string
    mimetype: string
  }

  export type FileUncheckedCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    name: string
    path: string
    mimetype: string
  }

  export type FileCreateOrConnectWithoutUserInput = {
    where: FileWhereUniqueInput
    create: XOR<FileCreateWithoutUserInput, FileUncheckedCreateWithoutUserInput>
  }

  export type FileCreateManyUserInputEnvelope = {
    data: FileCreateManyUserInput | FileCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ValidationNumberUpsertWithoutUserInput = {
    update: XOR<ValidationNumberUpdateWithoutUserInput, ValidationNumberUncheckedUpdateWithoutUserInput>
    create: XOR<ValidationNumberCreateWithoutUserInput, ValidationNumberUncheckedCreateWithoutUserInput>
    where?: ValidationNumberWhereInput
  }

  export type ValidationNumberUpdateToOneWithWhereWithoutUserInput = {
    where?: ValidationNumberWhereInput
    data: XOR<ValidationNumberUpdateWithoutUserInput, ValidationNumberUncheckedUpdateWithoutUserInput>
  }

  export type ValidationNumberUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiration?: BigIntFieldUpdateOperationsInput | bigint | number
    isVerified?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ValidationNumberUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiration?: BigIntFieldUpdateOperationsInput | bigint | number
    isVerified?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ImageUpsertWithoutUserInput = {
    update: XOR<ImageUpdateWithoutUserInput, ImageUncheckedUpdateWithoutUserInput>
    create: XOR<ImageCreateWithoutUserInput, ImageUncheckedCreateWithoutUserInput>
    where?: ImageWhereInput
  }

  export type ImageUpdateToOneWithWhereWithoutUserInput = {
    where?: ImageWhereInput
    data: XOR<ImageUpdateWithoutUserInput, ImageUncheckedUpdateWithoutUserInput>
  }

  export type ImageUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    mimetype?: StringFieldUpdateOperationsInput | string
  }

  export type ImageUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    mimetype?: StringFieldUpdateOperationsInput | string
  }

  export type FileUpsertWithWhereUniqueWithoutUserInput = {
    where: FileWhereUniqueInput
    update: XOR<FileUpdateWithoutUserInput, FileUncheckedUpdateWithoutUserInput>
    create: XOR<FileCreateWithoutUserInput, FileUncheckedCreateWithoutUserInput>
  }

  export type FileUpdateWithWhereUniqueWithoutUserInput = {
    where: FileWhereUniqueInput
    data: XOR<FileUpdateWithoutUserInput, FileUncheckedUpdateWithoutUserInput>
  }

  export type FileUpdateManyWithWhereWithoutUserInput = {
    where: FileScalarWhereInput
    data: XOR<FileUpdateManyMutationInput, FileUncheckedUpdateManyWithoutUserInput>
  }

  export type FileScalarWhereInput = {
    AND?: FileScalarWhereInput | FileScalarWhereInput[]
    OR?: FileScalarWhereInput[]
    NOT?: FileScalarWhereInput | FileScalarWhereInput[]
    id?: StringFilter<"File"> | string
    createdAt?: DateTimeFilter<"File"> | Date | string
    name?: StringFilter<"File"> | string
    path?: StringFilter<"File"> | string
    mimetype?: StringFilter<"File"> | string
    userId?: StringFilter<"File"> | string
  }

  export type UserCreateWithoutImageInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    email: string
    password: string
    isVerified?: boolean
    role?: $Enums.Role
    token?: string | null
    address?: string | null
    birthday?: string | null
    phoneNum?: string | null
    validationNumber?: ValidationNumberCreateNestedOneWithoutUserInput
    File?: FileCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutImageInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    email: string
    password: string
    isVerified?: boolean
    role?: $Enums.Role
    token?: string | null
    address?: string | null
    birthday?: string | null
    phoneNum?: string | null
    validationNumber?: ValidationNumberUncheckedCreateNestedOneWithoutUserInput
    File?: FileUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutImageInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutImageInput, UserUncheckedCreateWithoutImageInput>
  }

  export type UserUpsertWithoutImageInput = {
    update: XOR<UserUpdateWithoutImageInput, UserUncheckedUpdateWithoutImageInput>
    create: XOR<UserCreateWithoutImageInput, UserUncheckedCreateWithoutImageInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutImageInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutImageInput, UserUncheckedUpdateWithoutImageInput>
  }

  export type UserUpdateWithoutImageInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    token?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNum?: NullableStringFieldUpdateOperationsInput | string | null
    validationNumber?: ValidationNumberUpdateOneWithoutUserNestedInput
    File?: FileUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutImageInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    token?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNum?: NullableStringFieldUpdateOperationsInput | string | null
    validationNumber?: ValidationNumberUncheckedUpdateOneWithoutUserNestedInput
    File?: FileUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutValidationNumberInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    email: string
    password: string
    isVerified?: boolean
    role?: $Enums.Role
    token?: string | null
    address?: string | null
    birthday?: string | null
    phoneNum?: string | null
    image?: ImageCreateNestedOneWithoutUserInput
    File?: FileCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutValidationNumberInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    email: string
    password: string
    isVerified?: boolean
    role?: $Enums.Role
    token?: string | null
    address?: string | null
    birthday?: string | null
    phoneNum?: string | null
    image?: ImageUncheckedCreateNestedOneWithoutUserInput
    File?: FileUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutValidationNumberInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutValidationNumberInput, UserUncheckedCreateWithoutValidationNumberInput>
  }

  export type UserUpsertWithoutValidationNumberInput = {
    update: XOR<UserUpdateWithoutValidationNumberInput, UserUncheckedUpdateWithoutValidationNumberInput>
    create: XOR<UserCreateWithoutValidationNumberInput, UserUncheckedCreateWithoutValidationNumberInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutValidationNumberInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutValidationNumberInput, UserUncheckedUpdateWithoutValidationNumberInput>
  }

  export type UserUpdateWithoutValidationNumberInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    token?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNum?: NullableStringFieldUpdateOperationsInput | string | null
    image?: ImageUpdateOneWithoutUserNestedInput
    File?: FileUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutValidationNumberInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    token?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNum?: NullableStringFieldUpdateOperationsInput | string | null
    image?: ImageUncheckedUpdateOneWithoutUserNestedInput
    File?: FileUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PostCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    content: string
  }

  export type PostUncheckedCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    content: string
  }

  export type PostCreateOrConnectWithoutUserInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutUserInput, PostUncheckedCreateWithoutUserInput>
  }

  export type PostCreateManyUserInputEnvelope = {
    data: PostCreateManyUserInput | PostCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type PostUpsertWithWhereUniqueWithoutUserInput = {
    where: PostWhereUniqueInput
    update: XOR<PostUpdateWithoutUserInput, PostUncheckedUpdateWithoutUserInput>
    create: XOR<PostCreateWithoutUserInput, PostUncheckedCreateWithoutUserInput>
  }

  export type PostUpdateWithWhereUniqueWithoutUserInput = {
    where: PostWhereUniqueInput
    data: XOR<PostUpdateWithoutUserInput, PostUncheckedUpdateWithoutUserInput>
  }

  export type PostUpdateManyWithWhereWithoutUserInput = {
    where: PostScalarWhereInput
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyWithoutUserInput>
  }

  export type PostScalarWhereInput = {
    AND?: PostScalarWhereInput | PostScalarWhereInput[]
    OR?: PostScalarWhereInput[]
    NOT?: PostScalarWhereInput | PostScalarWhereInput[]
    id?: StringFilter<"Post"> | string
    createdAt?: DateTimeFilter<"Post"> | Date | string
    updatedAt?: DateTimeFilter<"Post"> | Date | string
    content?: StringFilter<"Post"> | string
    userId?: StringFilter<"Post"> | string
  }

  export type UserCreateWithoutFileInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    email: string
    password: string
    isVerified?: boolean
    role?: $Enums.Role
    token?: string | null
    address?: string | null
    birthday?: string | null
    phoneNum?: string | null
    validationNumber?: ValidationNumberCreateNestedOneWithoutUserInput
    image?: ImageCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFileInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    email: string
    password: string
    isVerified?: boolean
    role?: $Enums.Role
    token?: string | null
    address?: string | null
    birthday?: string | null
    phoneNum?: string | null
    validationNumber?: ValidationNumberUncheckedCreateNestedOneWithoutUserInput
    image?: ImageUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFileInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFileInput, UserUncheckedCreateWithoutFileInput>
  }

  export type UserUpsertWithoutFileInput = {
    update: XOR<UserUpdateWithoutFileInput, UserUncheckedUpdateWithoutFileInput>
    create: XOR<UserCreateWithoutFileInput, UserUncheckedCreateWithoutFileInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFileInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFileInput, UserUncheckedUpdateWithoutFileInput>
  }

  export type UserUpdateWithoutFileInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    token?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNum?: NullableStringFieldUpdateOperationsInput | string | null
    validationNumber?: ValidationNumberUpdateOneWithoutUserNestedInput
    image?: ImageUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFileInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    token?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNum?: NullableStringFieldUpdateOperationsInput | string | null
    validationNumber?: ValidationNumberUncheckedUpdateOneWithoutUserNestedInput
    image?: ImageUncheckedUpdateOneWithoutUserNestedInput
  }

  export type userForXSSCreateWithoutPostsInput = {
    id?: string
    email: string
  }

  export type userForXSSUncheckedCreateWithoutPostsInput = {
    id?: string
    email: string
  }

  export type userForXSSCreateOrConnectWithoutPostsInput = {
    where: userForXSSWhereUniqueInput
    create: XOR<userForXSSCreateWithoutPostsInput, userForXSSUncheckedCreateWithoutPostsInput>
  }

  export type userForXSSUpsertWithoutPostsInput = {
    update: XOR<userForXSSUpdateWithoutPostsInput, userForXSSUncheckedUpdateWithoutPostsInput>
    create: XOR<userForXSSCreateWithoutPostsInput, userForXSSUncheckedCreateWithoutPostsInput>
    where?: userForXSSWhereInput
  }

  export type userForXSSUpdateToOneWithWhereWithoutPostsInput = {
    where?: userForXSSWhereInput
    data: XOR<userForXSSUpdateWithoutPostsInput, userForXSSUncheckedUpdateWithoutPostsInput>
  }

  export type userForXSSUpdateWithoutPostsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type userForXSSUncheckedUpdateWithoutPostsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type imageForApiHackingCreateWithoutUserInput = {
    name: string
    path: string
  }

  export type imageForApiHackingUncheckedCreateWithoutUserInput = {
    id?: number
    name: string
    path: string
  }

  export type imageForApiHackingCreateOrConnectWithoutUserInput = {
    where: imageForApiHackingWhereUniqueInput
    create: XOR<imageForApiHackingCreateWithoutUserInput, imageForApiHackingUncheckedCreateWithoutUserInput>
  }

  export type imageForApiHackingCreateManyUserInputEnvelope = {
    data: imageForApiHackingCreateManyUserInput | imageForApiHackingCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type imageForApiHackingUpsertWithWhereUniqueWithoutUserInput = {
    where: imageForApiHackingWhereUniqueInput
    update: XOR<imageForApiHackingUpdateWithoutUserInput, imageForApiHackingUncheckedUpdateWithoutUserInput>
    create: XOR<imageForApiHackingCreateWithoutUserInput, imageForApiHackingUncheckedCreateWithoutUserInput>
  }

  export type imageForApiHackingUpdateWithWhereUniqueWithoutUserInput = {
    where: imageForApiHackingWhereUniqueInput
    data: XOR<imageForApiHackingUpdateWithoutUserInput, imageForApiHackingUncheckedUpdateWithoutUserInput>
  }

  export type imageForApiHackingUpdateManyWithWhereWithoutUserInput = {
    where: imageForApiHackingScalarWhereInput
    data: XOR<imageForApiHackingUpdateManyMutationInput, imageForApiHackingUncheckedUpdateManyWithoutUserInput>
  }

  export type imageForApiHackingScalarWhereInput = {
    AND?: imageForApiHackingScalarWhereInput | imageForApiHackingScalarWhereInput[]
    OR?: imageForApiHackingScalarWhereInput[]
    NOT?: imageForApiHackingScalarWhereInput | imageForApiHackingScalarWhereInput[]
    id?: IntFilter<"imageForApiHacking"> | number
    name?: StringFilter<"imageForApiHacking"> | string
    path?: StringFilter<"imageForApiHacking"> | string
    userId?: IntFilter<"imageForApiHacking"> | number
  }

  export type apiHackingLabCreateWithoutImageInput = {
    username: string
    password: string
  }

  export type apiHackingLabUncheckedCreateWithoutImageInput = {
    id?: number
    username: string
    password: string
  }

  export type apiHackingLabCreateOrConnectWithoutImageInput = {
    where: apiHackingLabWhereUniqueInput
    create: XOR<apiHackingLabCreateWithoutImageInput, apiHackingLabUncheckedCreateWithoutImageInput>
  }

  export type apiHackingLabUpsertWithoutImageInput = {
    update: XOR<apiHackingLabUpdateWithoutImageInput, apiHackingLabUncheckedUpdateWithoutImageInput>
    create: XOR<apiHackingLabCreateWithoutImageInput, apiHackingLabUncheckedCreateWithoutImageInput>
    where?: apiHackingLabWhereInput
  }

  export type apiHackingLabUpdateToOneWithWhereWithoutImageInput = {
    where?: apiHackingLabWhereInput
    data: XOR<apiHackingLabUpdateWithoutImageInput, apiHackingLabUncheckedUpdateWithoutImageInput>
  }

  export type apiHackingLabUpdateWithoutImageInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type apiHackingLabUncheckedUpdateWithoutImageInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type CourseRegistrationCreateWithoutCourseInput = {
    createdAt?: Date | string
  }

  export type CourseRegistrationUncheckedCreateWithoutCourseInput = {
    id?: number
    createdAt?: Date | string
  }

  export type CourseRegistrationCreateOrConnectWithoutCourseInput = {
    where: CourseRegistrationWhereUniqueInput
    create: XOR<CourseRegistrationCreateWithoutCourseInput, CourseRegistrationUncheckedCreateWithoutCourseInput>
  }

  export type CourseRegistrationCreateManyCourseInputEnvelope = {
    data: CourseRegistrationCreateManyCourseInput | CourseRegistrationCreateManyCourseInput[]
    skipDuplicates?: boolean
  }

  export type CourseRegistrationUpsertWithWhereUniqueWithoutCourseInput = {
    where: CourseRegistrationWhereUniqueInput
    update: XOR<CourseRegistrationUpdateWithoutCourseInput, CourseRegistrationUncheckedUpdateWithoutCourseInput>
    create: XOR<CourseRegistrationCreateWithoutCourseInput, CourseRegistrationUncheckedCreateWithoutCourseInput>
  }

  export type CourseRegistrationUpdateWithWhereUniqueWithoutCourseInput = {
    where: CourseRegistrationWhereUniqueInput
    data: XOR<CourseRegistrationUpdateWithoutCourseInput, CourseRegistrationUncheckedUpdateWithoutCourseInput>
  }

  export type CourseRegistrationUpdateManyWithWhereWithoutCourseInput = {
    where: CourseRegistrationScalarWhereInput
    data: XOR<CourseRegistrationUpdateManyMutationInput, CourseRegistrationUncheckedUpdateManyWithoutCourseInput>
  }

  export type CourseRegistrationScalarWhereInput = {
    AND?: CourseRegistrationScalarWhereInput | CourseRegistrationScalarWhereInput[]
    OR?: CourseRegistrationScalarWhereInput[]
    NOT?: CourseRegistrationScalarWhereInput | CourseRegistrationScalarWhereInput[]
    id?: IntFilter<"CourseRegistration"> | number
    courseId?: IntFilter<"CourseRegistration"> | number
    createdAt?: DateTimeFilter<"CourseRegistration"> | Date | string
  }

  export type CourseCreateWithoutRegistrationsInput = {
    title: string
    description: string
    image?: string | null
    link?: string | null
    state: string
    topics?: CourseCreatetopicsInput | string[]
    difficulty: string
    favorite?: boolean
  }

  export type CourseUncheckedCreateWithoutRegistrationsInput = {
    id?: number
    title: string
    description: string
    image?: string | null
    link?: string | null
    state: string
    topics?: CourseCreatetopicsInput | string[]
    difficulty: string
    favorite?: boolean
  }

  export type CourseCreateOrConnectWithoutRegistrationsInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutRegistrationsInput, CourseUncheckedCreateWithoutRegistrationsInput>
  }

  export type CourseUpsertWithoutRegistrationsInput = {
    update: XOR<CourseUpdateWithoutRegistrationsInput, CourseUncheckedUpdateWithoutRegistrationsInput>
    create: XOR<CourseCreateWithoutRegistrationsInput, CourseUncheckedCreateWithoutRegistrationsInput>
    where?: CourseWhereInput
  }

  export type CourseUpdateToOneWithWhereWithoutRegistrationsInput = {
    where?: CourseWhereInput
    data: XOR<CourseUpdateWithoutRegistrationsInput, CourseUncheckedUpdateWithoutRegistrationsInput>
  }

  export type CourseUpdateWithoutRegistrationsInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    state?: StringFieldUpdateOperationsInput | string
    topics?: CourseUpdatetopicsInput | string[]
    difficulty?: StringFieldUpdateOperationsInput | string
    favorite?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CourseUncheckedUpdateWithoutRegistrationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    state?: StringFieldUpdateOperationsInput | string
    topics?: CourseUpdatetopicsInput | string[]
    difficulty?: StringFieldUpdateOperationsInput | string
    favorite?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FileCreateManyUserInput = {
    id?: string
    createdAt?: Date | string
    name: string
    path: string
    mimetype: string
  }

  export type FileUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    mimetype?: StringFieldUpdateOperationsInput | string
  }

  export type FileUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    mimetype?: StringFieldUpdateOperationsInput | string
  }

  export type FileUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    mimetype?: StringFieldUpdateOperationsInput | string
  }

  export type PostCreateManyUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    content: string
  }

  export type PostUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type PostUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type PostUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type imageForApiHackingCreateManyUserInput = {
    id?: number
    name: string
    path: string
  }

  export type imageForApiHackingUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
  }

  export type imageForApiHackingUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
  }

  export type imageForApiHackingUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
  }

  export type CourseRegistrationCreateManyCourseInput = {
    id?: number
    createdAt?: Date | string
  }

  export type CourseRegistrationUpdateWithoutCourseInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseRegistrationUncheckedUpdateWithoutCourseInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseRegistrationUncheckedUpdateManyWithoutCourseInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}